<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【Angular网易云】--30、总结</title>
    <url>/posts/c8cb5db9/</url>
    <content><![CDATA[<h1 id="后续修改"><a href="#后续修改" class="headerlink" title="后续修改"></a>后续修改</h1><p>在完成了主要的功能之后，就是准备对环境以及小优化进行修正，比如页面的标题实现动态改变或者刷新页面时添加顶部的进度条，其中最重要的就是实现路由懒加载以及配置proxy跨域。</p>
<h1 id="关于课程"><a href="#关于课程" class="headerlink" title="关于课程"></a>关于课程</h1><p>关于本课程我是在B站中观看的，在刷一波up主的地址</p>
<blockquote>
<ul>
<li><strong><a href="https://space.bilibili.com/142925973?spm_id_from=333.788.b_765f7570696e666f.1">B站视频地址——会js的诸葛村夫</a></strong></li>
</ul>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>刚开始接触angular时是我刚开始实习工作的时候，当时公司主要框架就是使用angular，所以就开始在练手的项目中使用angular，，在之后接手项目的时候，开始接触UI库，主要是使用nz-zorro，实现的也是后台管理系统这种相对比难度较小的项目。但是越是依赖组件库就越是感觉框架的难度。所以在摒弃之前的舒适度后，想着练手与一个真正使用angularAPI的教程，再次感谢up主的教程。</p>
<p>在结束这个教程之后，相对比之前的懵懂，可能现在会比较清晰一点，但是目前该有的问题仍然是存在，比如说api的覆盖率以及原生js的基础知识，可能有些功能让我重新实现一遍仍然是有难度的。所以在之后的打算中要加强对原生js的理解与使用，并且多看一下angularAPI。</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--29、注册</title>
    <url>/posts/b51902b1/</url>
    <content><![CDATA[<h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><p>注册功能是此项目中最后一个功能模块，我原本以为注册的逻辑很简单，没想到如此的繁琐，以至于项目频频短路，而且没有测试用的注册账号，所以在真的注册时并没有拿到相应的数据。</p>
<p>其次还有和收藏分享有关的功能，其基本的实现逻辑与登录等类似，区别之处就是数据的交互并不只是单一的接口，有关数据状态的变更还是要依靠ngrx来检测，所以关于分享与收藏并不打算繁琐的总结了。</p>
<hr>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>在登录页面和首页头像处有注册的入口，在点击触发后能够将弹窗显示并且类型为事先定义的register类型。在注册页面注入表单组件能够获取手机号码以及设置密码，然后能够根据密码来调用验证码的发送与判断。.</p>
<h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><ul>
<li>app.component.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">nz-menu-item</span> (<span class="attr">click</span>)=<span class="string">&quot;openModalByMenu(&#x27;register&#x27;)&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">i</span> <span class="attr">nz-icon</span> <span class="attr">nzType</span>=<span class="string">&quot;user-add&quot;</span> <span class="attr">nzTheme</span>=<span class="string">&quot;outline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>注册</span><br><span class="line"> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>app.component.ts</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(</span><br><span class="line">      private memberBatchActionsServer: MemberBatchActionsService,</span><br><span class="line">  ) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  openModalByMenu (type: <span class="string">&#x27;loginByPhone&#x27;</span> | <span class="string">&#x27;register&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (type === <span class="string">&#x27;loginByPhone&#x27;</span>) &#123;</span><br><span class="line">          <span class="built_in">this</span>.openModal(ModalTypes.LoginByPhone);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.openModal(ModalTypes.Register);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 打开弹窗</span></span><br><span class="line">  openModal (type: ModalTypes) &#123;</span><br><span class="line">      <span class="built_in">this</span>.memberBatchActionsServer.controlModal(<span class="literal">true</span>, type);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>弹窗的状态逻辑也是根据之前设置的action实现的。而在首页订阅弹框的显隐状态与类型即可动态的添加浮层。</p>
<hr>
<ul>
<li>wy-layer-register.component.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;register modal-content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-wrap&quot;</span> *<span class="attr">ngIf</span>=<span class="string">&quot;!showCode else code&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">nz-form</span> <span class="attr">nzLayout</span>=<span class="string">&quot;vertical&quot;</span> [<span class="attr">formGroup</span>]=<span class="string">&quot;formModel&quot;</span> (<span class="attr">ngSubmit</span>)=<span class="string">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-label</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">nz-form-label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-control</span> <span class="attr">nzHasFeedback</span> <span class="attr">nzErrorTip</span>=<span class="string">&quot;请填写正确的手机号&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nz-input-group</span> <span class="attr">nzPrefixIcon</span>=<span class="string">&quot;mobile&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">nz-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入手机号&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;phone&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">nz-input-group</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-label</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">nz-form-label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-control</span> <span class="attr">nzHasFeedback</span> <span class="attr">nzErrorTip</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nz-input-group</span> <span class="attr">nzPrefixIcon</span>=<span class="string">&quot;lock&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">nz-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">nz-input-group</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">nz-button</span> <span class="attr">nzBlock</span> <span class="attr">nzType</span>=<span class="string">&quot;primary&quot;</span> [<span class="attr">disabled</span>]=<span class="string">&quot;!formModel.valid&quot;</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">code</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">app-wy-check-code</span></span></span><br><span class="line"><span class="tag">          [<span class="attr">phone</span>]=<span class="string">&quot;formModel.get(&#x27;phone&#x27;).value&quot;</span></span></span><br><span class="line"><span class="tag">          [<span class="attr">codePass</span>]=<span class="string">&quot;codePass&quot;</span></span></span><br><span class="line"><span class="tag">          [<span class="attr">timing</span>]=<span class="string">&quot;timing&quot;</span></span></span><br><span class="line"><span class="tag">          (<span class="attr">onCheckCode</span>)=<span class="string">&quot;onCheckCode($event)&quot;</span></span></span><br><span class="line"><span class="tag">          (<span class="attr">onReatSendCode</span>)=<span class="string">&quot;sendCode()&quot;</span></span></span><br><span class="line"><span class="tag">          (<span class="attr">onCheckExist</span>)=<span class="string">&quot;onCheckExist()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">app-wy-check-code</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;m-footer clearfix&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> (<span class="attr">click</span>)=<span class="string">&quot;changeType()&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span> 其它登陆方式<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/20210116165032470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"><br>打开页面时会显示表单组件，动态响应输入值后点击下一步即是发送验证码，此时页面会改变，因此可以创建新的组件来单独实现验证码的检查。</p>
<ul>
<li>wy-layer-register.component.ts</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">enum Exist &#123;</span><br><span class="line">    <span class="string">&#x27;存在&#x27;</span> = <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;不存在&#x27;</span> = <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">&#x27;app-wy-layer-register&#x27;</span>,</span><br><span class="line">    templateUrl: <span class="string">&#x27;./wy-layer-register.component.html&#x27;</span>,</span><br><span class="line">    styleUrls: [<span class="string">&#x27;./wy-layer-register.component.less&#x27;</span>],</span><br><span class="line">    changeDetection: ChangeDetectionStrategy.OnPush</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">WyLayerRegisterComponent</span> <span class="title">implements</span> <span class="title">OnInit</span>, <span class="title">OnChanges</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Input() visible = <span class="literal">false</span>;</span><br><span class="line">    @Output() onChangeModalType = <span class="keyword">new</span> EventEmitter&lt;string&gt;();</span><br><span class="line">    @Output() onRegister = <span class="keyword">new</span> EventEmitter&lt;string&gt;();</span><br><span class="line"></span><br><span class="line">    showCode = <span class="literal">false</span>;</span><br><span class="line">    formModel: FormGroup;</span><br><span class="line">    timing: number;</span><br><span class="line">    codePass: string | boolean = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        private fb: FormBuilder,</span><br><span class="line">        private message: NzMessageService,</span><br><span class="line">        private memberServe: MemberService,</span><br><span class="line">        private cdr: ChangeDetectorRef</span><br><span class="line">    ) &#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ngOnChanges (changes: SimpleChanges): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (changes.visible &amp;&amp; !changes.visible.firstChange) &#123;</span><br><span class="line">            <span class="built_in">this</span>.formModel.markAllAsTouched();</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.visible) &#123;</span><br><span class="line">                <span class="built_in">this</span>.showCode = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnInit (): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.formModel = <span class="built_in">this</span>.fb.group(&#123;</span><br><span class="line">            phone: [<span class="string">&#x27;&#x27;</span>, [Validators.required, Validators.pattern(<span class="regexp">/^1\d&#123;10&#125;$/</span>)]],</span><br><span class="line">            password: [<span class="string">&#x27;&#x27;</span>, [Validators.required, Validators.minLength(<span class="number">6</span>)]]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onSubmit () &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.formModel.valid) &#123;</span><br><span class="line">            <span class="built_in">this</span>.sendCode();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sendCode () &#123;</span><br><span class="line">      <span class="built_in">this</span>.memberServe.sendCode(<span class="built_in">this</span>.formModel.get(<span class="string">&#x27;phone&#x27;</span>).value).subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.timing = <span class="number">60</span>;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.showCode) &#123;</span><br><span class="line">                <span class="built_in">this</span>.showCode = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.cdr.markForCheck();</span><br><span class="line">            interval(<span class="number">1000</span>).pipe(take(<span class="number">60</span>)).subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.timing--;</span><br><span class="line">                <span class="built_in">this</span>.cdr.markForCheck();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">this</span>.message.error(error.message))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onCheckCode (code: string) &#123;</span><br><span class="line">        <span class="built_in">this</span>.memberServe.checkCode(<span class="built_in">this</span>.formModel.get(<span class="string">&#x27;phone&#x27;</span>).value, <span class="built_in">Number</span>(code))</span><br><span class="line">            .subscribe(</span><br><span class="line">                () =&gt; <span class="built_in">this</span>.codePass = <span class="literal">true</span>,</span><br><span class="line">                () =&gt; <span class="built_in">this</span>.codePass = <span class="literal">false</span>,</span><br><span class="line">                () =&gt; <span class="built_in">this</span>.cdr.markForCheck()</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    onCheckExist () &#123;</span><br><span class="line">        <span class="keyword">const</span> phone = <span class="built_in">this</span>.formModel.get(<span class="string">&#x27;phone&#x27;</span>).value;</span><br><span class="line">        <span class="built_in">this</span>.memberServe.checkExist(<span class="built_in">Number</span>(phone)).subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;checkExist&#x27;</span>, res);</span><br><span class="line">            <span class="keyword">if</span> (Exist[res] === <span class="string">&#x27;存在&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.message.error(<span class="string">&#x27;账号已存在，可直接登陆&#x27;</span>);</span><br><span class="line">                <span class="built_in">this</span>.changeType(ModalTypes.LoginByPhone);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.onRegister.emit(phone);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    changeType (type = ModalTypes.Default) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onChangeModalType.emit(type);</span><br><span class="line">        <span class="built_in">this</span>.showCode = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">this</span>.formModel.reset()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输入手机号与密码之后点击下一步将会触发onSubmit中sendCode回调，其中有段timer的递减是用来提示重新发送验证码的倒计时，，其中有点问题的就是变更监测的模式是使用了onPush策略，所以timer的递减后传给验证码组件时就会出现停顿的现象，，此时要手动的触发变更监测。就是使用ChangeDelectorRef类型中markForCheck方法。</p>
<hr>
<h2 id="验证码组件"><a href="#验证码组件" class="headerlink" title="验证码组件"></a>验证码组件</h2><ul>
<li>wy-check-code.component.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;check-code&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;js-mobwrap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;s-fc3&quot;</span>&gt;</span></span><br><span class="line">        你的手机号：</span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">&quot;s-fc1&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;js-mob&quot;</span>&gt;</span>&#123;&#123;phone&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;s-fc4&quot;</span>&gt;</span>为了安全，我们会给您发送短信验证码<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">nz-form</span> <span class="attr">nzLayout</span>=<span class="string">&quot;vertical&quot;</span> [<span class="attr">formGroup</span>]=<span class="string">&quot;formModel&quot;</span> (<span class="attr">ngSubmit</span>)=<span class="string">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">app-wy-code</span> <span class="attr">formControlName</span>=<span class="string">&quot;code&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-wy-code</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;send clearfix&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;err&quot;</span> [<span class="attr">hidden</span>]=<span class="string">&quot;!showErrorTip&quot;</span>&gt;</span>验证码不正确<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;txt&quot;</span> *<span class="attr">ngIf</span>=<span class="string">&quot;!showRepeatBtn else repeatBtn&quot;</span>&gt;</span>&#123;&#123;timing&#125;&#125;s<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">repeatBtn</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;txt repeat&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;onReatSendCode.emit()&quot;</span>&gt;</span>重新发送<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">nz-button</span> <span class="attr">nzType</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">nzBlock</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/20210116185731102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"></p>
<p>此页面是下一步后的跳转页面，其中红色框中的验证码输入内容及逻辑放在了新的组件中。</p>
<ul>
<li>wy-check-code.component.ts</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">private phoneHideStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">formModel: FormGroup;</span><br><span class="line">showRepeatBtn = <span class="literal">false</span>;</span><br><span class="line">showErrorTip = <span class="literal">false</span>;</span><br><span class="line">@Input() codePass = <span class="literal">false</span>;</span><br><span class="line">@Input() timing: number;</span><br><span class="line">@Input()</span><br><span class="line">set phone (phone: string) &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = phone.split(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    arr.splice(<span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;****&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.phoneHideStr = arr.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get phone () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.phoneHideStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Output() onCheckCode = <span class="keyword">new</span> EventEmitter&lt;string&gt;();</span><br><span class="line">@Output() onReatSendCode = <span class="keyword">new</span> EventEmitter&lt;string&gt;();</span><br><span class="line">@Output() onCheckExist = <span class="keyword">new</span> EventEmitter&lt;<span class="keyword">void</span>&gt;();</span><br><span class="line"><span class="keyword">constructor</span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">ngOnInit () &#123;</span><br><span class="line">    <span class="built_in">this</span>.formModel = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">        code: <span class="keyword">new</span> FormControl(<span class="string">&#x27;&#x27;</span>, [Validators.required, Validators.pattern(<span class="regexp">/\d&#123;4&#125;/</span>)])</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> codeControl = <span class="built_in">this</span>.formModel.get(<span class="string">&#x27;code&#x27;</span>);</span><br><span class="line">    codeControl.statusChanges.subscribe(<span class="function"><span class="params">status</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (status === <span class="string">&#x27;VALID&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.onCheckCode.emit(<span class="built_in">this</span>.formModel.value.code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ngOnChanges (changes: SimpleChanges): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (changes.timing) &#123;</span><br><span class="line">        <span class="built_in">this</span>.showRepeatBtn = <span class="built_in">this</span>.timing &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (changes.codePass &amp;&amp; !changes.codePass.firstChange) &#123;</span><br><span class="line">        <span class="built_in">this</span>.showErrorTip = !<span class="built_in">this</span>.codePass;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">onSubmit () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.formModel.valid &amp;&amp; <span class="built_in">this</span>.codePass) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onCheckExist.emit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>页面初始化时，会创建表单组件，添加表单控制器code。因为在展示手机号的时候要对数据加密，所以添加了对手机号二次处理的set、get方法。然后对表单控制器属性添加状态监测，当表单验证通过时会将输入的验证码发射出去，然后调用验证接口。</p>
<h2 id="处理验证码"><a href="#处理验证码" class="headerlink" title="处理验证码"></a>处理验证码</h2><p>验证码的输入逻辑以及样式放在了单独的组件中。但是验证逻辑仍然在父组件中，所以关于其输入的结构都会在父层做处理。</p>
<ul>
<li>wy-code.component.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;code-wrap clearfix&quot;</span> #<span class="attr">codeWrap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;u-word&quot;</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of inputArr; index as i&quot;</span> [<span class="attr">class.focus</span>]=<span class="string">&quot;result[i]&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这里是循环了四个输入框，但是样式上有点小复杂，自己尝试实现，未果！</p>
<ul>
<li>wy-code.component.ts</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CODELEN = <span class="number">4</span>;</span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">&#x27;app-wy-code&#x27;</span>,</span><br><span class="line">    templateUrl: <span class="string">&#x27;./wy-code.component.html&#x27;</span>,</span><br><span class="line">    styleUrls: [<span class="string">&#x27;./wy-code.component.less&#x27;</span>],</span><br><span class="line">    providers: [</span><br><span class="line">        &#123;</span><br><span class="line">            provide: NG_VALUE_ACCESSOR,</span><br><span class="line">            useExisting: forwardRef(<span class="function">() =&gt;</span> WyCodeComponent),</span><br><span class="line">            multi: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">WyCodeComponent</span> <span class="title">implements</span> <span class="title">OnInit</span>, <span class="title">ControlValueAccessor</span> </span>&#123;</span><br><span class="line">    inputArr = [];</span><br><span class="line">    inputsEl: HTMLElement[];</span><br><span class="line">    private code: string;</span><br><span class="line"></span><br><span class="line">    result: string[] = [];</span><br><span class="line">    currentFocusIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    private destory$ = <span class="keyword">new</span> Subject();</span><br><span class="line">    @ViewChild(<span class="string">&#x27;codeWrap&#x27;</span>, &#123; <span class="attr">static</span>: <span class="literal">true</span> &#125;) private codeWrap: ElementRef;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(private cdr: ChangeDetectorRef) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    ngOnInit () &#123;</span><br><span class="line">        <span class="built_in">this</span>.inputArr = <span class="built_in">Array</span>(CODELEN).fill(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngAfterViewInit (): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.inputsEl = <span class="built_in">this</span>.codeWrap.nativeElement.getElementsByClassName(<span class="string">&#x27;item&#x27;</span>) <span class="keyword">as</span> HTMLElement[];</span><br><span class="line">        <span class="built_in">this</span>.inputsEl[<span class="number">0</span>].focus();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> a = <span class="number">0</span>; a &lt; <span class="built_in">this</span>.inputsEl.length; a++) &#123;</span><br><span class="line">            <span class="keyword">const</span> item = <span class="built_in">this</span>.inputsEl[a];</span><br><span class="line">            fromEvent(item, <span class="string">&#x27;keyup&#x27;</span>).pipe(takeUntil(<span class="built_in">this</span>.destory$)).subscribe(<span class="function">(<span class="params">event: KeyboardEvent</span>) =&gt;</span> <span class="built_in">this</span>.listenKeyUp(event));</span><br><span class="line">            fromEvent(item, <span class="string">&#x27;click&#x27;</span>).pipe(takeUntil(<span class="built_in">this</span>.destory$)).subscribe(<span class="function">() =&gt;</span> <span class="built_in">this</span>.currentFocusIndex = a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private listenKeyUp (event: KeyboardEvent) &#123;</span><br><span class="line">        <span class="keyword">const</span> target = event.target <span class="keyword">as</span> HTMLInputElement;</span><br><span class="line">        <span class="keyword">const</span> value = target.value;</span><br><span class="line">        <span class="keyword">const</span> isBackSpace = event.key === <span class="string">&quot;Backspace&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/\D/</span>.test(value)) &#123;</span><br><span class="line">            target.value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="built_in">this</span>.result[<span class="built_in">this</span>.currentFocusIndex] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            <span class="built_in">this</span>.result[<span class="built_in">this</span>.currentFocusIndex] = value;</span><br><span class="line">            <span class="built_in">this</span>.currentFocusIndex = (<span class="built_in">this</span>.currentFocusIndex + <span class="number">1</span>) % CODELEN;</span><br><span class="line">            <span class="built_in">this</span>.inputsEl[<span class="built_in">this</span>.currentFocusIndex].focus();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isBackSpace) &#123;</span><br><span class="line">            <span class="built_in">this</span>.result[<span class="built_in">this</span>.currentFocusIndex] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="built_in">this</span>.currentFocusIndex = <span class="built_in">Math</span>.max(<span class="built_in">this</span>.currentFocusIndex - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">this</span>.inputsEl[<span class="built_in">this</span>.currentFocusIndex].focus();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.checkResult(<span class="built_in">this</span>.result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private checkResult (result: string[]) &#123;</span><br><span class="line">        <span class="keyword">const</span> codeStr = result.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setValue(codeStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private setValue (code: string) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.onValueChange(code);</span><br><span class="line">        <span class="built_in">this</span>.cdr.markForCheck();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private onValueChange (value: string): <span class="keyword">void</span> &#123; &#125;</span><br><span class="line">    private onTouched (): <span class="keyword">void</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    writeValue (code: string): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setValue(code);</span><br><span class="line">    &#125;</span><br><span class="line">    registerOnChange (fn: <span class="function">(<span class="params">value: string</span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.onValueChange = fn;</span><br><span class="line">    &#125;</span><br><span class="line">    registerOnTouched (fn: <span class="function">() =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.onTouched = fn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnDestroy (): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.destory$.next();</span><br><span class="line">        <span class="built_in">this</span>.destory$.complete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当组件视图初始化之后会对四个输入框进行监听，对删除键的交互以及匹配输入值不能为数值以外的其他值。</p>
<p><strong>其中使用了自定义表单控件ControlValueAccessor，关于这个知识点我的能力是解释不清楚的，再看了一些博客和介绍之后，推荐有兴趣的可以去看一下这篇文章：<br><a href="https://segmentfault.com/a/1190000014129567">别再对 Angular 表单的 ControlValueAccessor 感到迷惑</a></strong></p>
<hr>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--28、个人中心</title>
    <url>/posts/359b25ac/</url>
    <content><![CDATA[<h1 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h1><p>个人中心是展示当前登录人信息的一个模块，关于最近听歌排行以及创建的歌单和收藏的歌单列表等。其入口是在首页登录后头像的展示位置处。</p>
<p><img data-src="https://img-blog.csdnimg.cn/20210115170900933.png"></p>
<hr>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><ul>
<li>app.component.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">nz-menu-item</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#x27;/member&#x27;, user.profile.userId]&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">nz-icon</span> <span class="attr">nzType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">nzTheme</span>=<span class="string">&quot;outline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>我的主页</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">nz-menu-item</span> (<span class="attr">click</span>)=<span class="string">&quot;onLogout()&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">nz-icon</span> <span class="attr">nzType</span>=<span class="string">&quot;close-circle&quot;</span> <span class="attr">nzTheme</span>=<span class="string">&quot;outline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>退出</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
当点击li标签时将当前登录人的ID传给个人中心模块。</li>
</ul>
<hr>
<h2 id="创建个人中心模块"><a href="#创建个人中心模块" class="headerlink" title="创建个人中心模块"></a>创建个人中心模块</h2><p>使用指令在pages目录下创建模块和组件：<br><img data-src="https://img-blog.csdnimg.cn/20210115171421785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"></p>
<hr>
<h2 id="为组件添加路由"><a href="#为组件添加路由" class="headerlink" title="为组件添加路由"></a>为组件添加路由</h2><ul>
<li>member-routing.module.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;member/:id&#x27;</span>, <span class="attr">component</span>: CenterComponent, <span class="attr">data</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;个人中心&#x27;</span> &#125;, <span class="attr">resolve</span>: &#123; <span class="attr">user</span>: CenterResolverService &#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;records/:id&#x27;</span>, <span class="attr">component</span>: RecordDetailComponent, <span class="attr">data</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;听歌记录&#x27;</span> &#125;, <span class="attr">resolve</span>: &#123; <span class="attr">user</span>: RecordResolverService &#125; &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [RouterModule.forChild(routes)],</span><br><span class="line">    <span class="built_in">exports</span>: [RouterModule],</span><br><span class="line">    providers: [CenterResolverService, RecordResolverService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberRoutingModule</span> </span>&#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
其中使用了路由守卫来保证数据的完整。</li>
</ul>
<hr>
<h2 id="调用API"><a href="#调用API" class="headerlink" title="调用API"></a>调用API</h2><p>根据返回值创建返回值类型</p>
<ul>
<li>member.types.ts</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> type RecordVal = &#123;</span><br><span class="line">    playCount: number;</span><br><span class="line">    score: number;</span><br><span class="line">    song: Song;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type recordKeys = <span class="string">&#x27;weekData&#x27;</span> | <span class="string">&#x27;allData&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type UserRecord = &#123;</span><br><span class="line">    [key <span class="keyword">in</span> recordKeys]: RecordVal[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type UserSheet = &#123;</span><br><span class="line">    self: SongSheet[];</span><br><span class="line">    subscribed: SongSheet[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>member.service.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> enum RecordType &#123;</span><br><span class="line">    allData,</span><br><span class="line">    weekData,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 获取听歌记录</span></span><br><span class="line">    getUserRecord (uid: string, type = RecordType.weekData): Observable&lt;RecordVal[]&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;query-string&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> params = <span class="keyword">new</span> HttpParams(&#123; <span class="attr">fromString</span>: querystring.stringify(&#123; uid, type &#125;) &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="built_in">this</span>.uri + <span class="string">&#x27;user/record&#x27;</span>, &#123; params &#125;).pipe(</span><br><span class="line">            map(<span class="function">(<span class="params">res: UserRecord</span>) =&gt;</span> res[RecordType[type]])</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户歌单</span></span><br><span class="line">    getUserSheets (uid: string): Observable&lt;UserSheet&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> params = <span class="keyword">new</span> HttpParams().set(<span class="string">&#x27;uid&#x27;</span>, uid);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="built_in">this</span>.uri + <span class="string">&#x27;user/playlist&#x27;</span>, &#123; params &#125;).pipe(</span><br><span class="line">            map(<span class="function">(<span class="params">res: &#123; playlist: SongSheet[] &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> list = res.playlist;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    self: list.filter(<span class="function"><span class="params">item</span> =&gt;</span> !item.subscribed),</span><br><span class="line">                    subscribed: list.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.subscribed)</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="添加路由守卫"><a href="#添加路由守卫" class="headerlink" title="添加路由守卫"></a>添加路由守卫</h2><p>因为使用了路由守卫，所以可以将需要的数据统一通过守卫来传递。</p>
<ul>
<li>center-resolve.service.ts</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(</span><br><span class="line">    private memberServe: MemberService,</span><br><span class="line">    private router: Router</span><br><span class="line">) &#123; &#125;</span><br><span class="line"></span><br><span class="line">resolve (route: ActivatedRouteSnapshot): Observable&lt;CenterDataType&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> uid = route.paramMap.get(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (uid) &#123;</span><br><span class="line">        <span class="keyword">return</span> forkJoin([</span><br><span class="line">            <span class="built_in">this</span>.memberServe.getUserInfo(uid),</span><br><span class="line">            <span class="built_in">this</span>.memberServe.getUserRecord(uid),</span><br><span class="line">            <span class="built_in">this</span>.memberServe.getUserSheets(uid),</span><br><span class="line">        ]).pipe(first());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.router.navigate([<span class="string">&#x27;/home&#x27;</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>record-resolve.service.ts</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">type RecordDataType = [User, RecordVal[]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        private memberServe: MemberService,</span><br><span class="line">        private router: Router</span><br><span class="line">    ) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    resolve (route: ActivatedRouteSnapshot): Observable&lt;RecordDataType&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> uid = route.paramMap.get(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (uid) &#123;</span><br><span class="line">            <span class="keyword">return</span> forkJoin([</span><br><span class="line">                <span class="built_in">this</span>.memberServe.getUserInfo(uid),</span><br><span class="line">                <span class="built_in">this</span>.memberServe.getUserRecord(uid),</span><br><span class="line">            ]).pipe(first());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.router.navigate([<span class="string">&#x27;/home&#x27;</span>])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><ul>
<li>center.component.ts</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CenterComponent</span> <span class="title">implements</span> <span class="title">OnInit</span>, <span class="title">OnDestroy</span> </span>&#123;</span><br><span class="line">    user: User;</span><br><span class="line">    records: RecordVal[];</span><br><span class="line">    userSheet: UserSheet;</span><br><span class="line">    recordType = RecordType.weekData;</span><br><span class="line"></span><br><span class="line">    private currentSong: Song;</span><br><span class="line">    currentIndex = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    private destory$ = <span class="keyword">new</span> Subject();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        private route: ActivatedRoute,</span><br><span class="line">        private sheetServe: SheetService,</span><br><span class="line">        private playerBatchActionsServer: PlayerBatchActionsService,</span><br><span class="line">        private message: NzMessageService,</span><br><span class="line">        private songServe: SongService,</span><br><span class="line">        private memberServe: MemberService,</span><br><span class="line">        private cdr: ChangeDetectorRef,</span><br><span class="line">        private store$: Store&lt;AppModule&gt;</span><br><span class="line">    ) &#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ngOnInit (): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.route.data.pipe(map(<span class="function"><span class="params">res</span> =&gt;</span> res.user)).subscribe(<span class="function">(<span class="params">[user, userRecord, userSheet]</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.user = user;</span><br><span class="line">            <span class="built_in">this</span>.records = userRecord;</span><br><span class="line">            <span class="built_in">this</span>.userSheet = userSheet;</span><br><span class="line">            <span class="built_in">this</span>.listenCurrentSong();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private listenCurrentSong () &#123;</span><br><span class="line">        <span class="built_in">this</span>.store$.pipe(select(getPlayer), select(getCurrentSong), takeUntil(<span class="built_in">this</span>.destory$)).subscribe(<span class="function"><span class="params">song</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.currentSong = song;</span><br><span class="line">            <span class="keyword">if</span> (song) &#123;</span><br><span class="line">                <span class="keyword">const</span> songs = <span class="built_in">this</span>.records.map(<span class="function"><span class="params">res</span> =&gt;</span> res.song);</span><br><span class="line">                <span class="built_in">this</span>.currentIndex = findIndex(songs, song);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.currentIndex = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击歌单，获取歌单信息</span></span><br><span class="line">    onPlaySheet (id: number) &#123;</span><br><span class="line">        <span class="built_in">this</span>.sheetServe.playSheet(id).subscribe(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.playerBatchActionsServer.selectPlayList(&#123; list, <span class="attr">index</span>: <span class="number">0</span> &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onAddSong ([song, isPlay]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.currentSong || <span class="built_in">this</span>.currentSong.id !== song.id) &#123;</span><br><span class="line">            <span class="built_in">this</span>.songServe.getSongList(song)</span><br><span class="line">                .subscribe(<span class="function"><span class="params">list</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (list.length) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.playerBatchActionsServer.insertSong(list[<span class="number">0</span>], isPlay);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">this</span>.message.create(<span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;无url!&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onChangeType (type: RecordType) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.recordType !== type) &#123;</span><br><span class="line">            <span class="built_in">this</span>.recordType = type;</span><br><span class="line">            <span class="built_in">this</span>.memberServe.getUserRecord(<span class="built_in">this</span>.user.profile.userId.toString(), type).subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.records = res.slice(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">                <span class="built_in">this</span>.cdr.markForCheck();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnDestroy (): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.destory$.next();</span><br><span class="line">        <span class="built_in">this</span>.destory$.complete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始化页面的时候，首先将路由守卫中获取到的数据储存起来，然后开始使用Store监听当前歌曲，根据当前歌曲来获取歌曲索引，并在页面显示高亮。其余逻辑与歌单列表相似，添加到歌单以及播放都是使用封装好的actions进行状态操作。当页面销毁的时候的，能够给监听解绑，此时可以使用生命周期钩子，当销毁钩子触发时，调用多播可观察对象的destory$变量的next方法，当Store中takeUntil检测到该变量触发时，就会解绑监听。</p>
<p><img data-src="https://img-blog.csdnimg.cn/20210115204043476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>子组件的用法很灵活，可以将动作设置在子组件内，也可以让子组件仅当做展示页面所有的事件触发都利用组件之间传值来实现。</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--27、HTTP拦截器</title>
    <url>/posts/a80028c9/</url>
    <content><![CDATA[<h1 id="HTTP拦截"><a href="#HTTP拦截" class="headerlink" title="HTTP拦截"></a>HTTP拦截</h1><p>在做请求的时，有时需要对请求做一些配置上的附加或者改变，又或者是对响应值的拦截，这时候就需要拦截器了。</p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>签到时需要登录状态，而状态值存在cookies中，所以在每次请求时都需要将cookies一起发送过去，因此添加HTTP拦截器来拦截请求并作出配置上的改变。</p>
<p>XMLHttpRequest类型的 withCredentials属性指示是否使用类似的cookies，因此将其设置为true即可。</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-cn/docs/web/api/xmlhttprequest/withcredentials">XMLHttpRequest.withCredentials</a><br>XMLHttpRequest.withCredentials  属性是一个Boolean类型，它指示了是否该使用类似cookies,authorization headers(头部授权)或者TLS客户端证书这一类资格证书来创建一个跨站点访问控制（cross-site Access-Control）请求。在同一个站点下使用withCredentials属性是无效的。</p>
</blockquote>
<blockquote>
<p>此外，这个指示也会被用做响应中cookies 被忽视的标示。默认值是false。</p>
</blockquote>
<blockquote>
<p>如果在发送来自其他域的XMLHttpRequest请求之前，未设置withCredentials 为true，那么就不能为它自己的域设置cookie值。而通过设置withCredentials 为true获得的第三方cookies，将会依旧享受同源策略，因此不能被通过document.cookie或者从头部相应请求的脚本等访问。</p>
</blockquote>
<pre><code>不同域下的XmlHttpRequest 响应
不论其Access-Control- header 设置什么值
都无法为它自身站点设置cookie值
除非它在请求之前将withCredentials 设为true。</code></pre>
<hr>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>创建http-interceptors文件夹，新增common.interceptor.ts文件和index.ts文件</p>
<ul>
<li>common.interceptor.ts</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/common/http&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/core&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; catchError &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs/internal/operators&quot;</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonInterceptor</span> <span class="title">implements</span> <span class="title">HttpInterceptor</span> </span>&#123;</span><br><span class="line">    intercept (req: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> next.handle(req.clone(&#123;</span><br><span class="line">            withCredentials: <span class="literal">true</span></span><br><span class="line">        &#125;)).pipe(catchError(<span class="built_in">this</span>.handleError))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 错误处理</span></span><br><span class="line">    private handleError (error: HttpErrorResponse): never &#123;</span><br><span class="line">        <span class="keyword">throw</span> error.error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>intercept 方法会把请求转换成一个最终返回 HTTP 响应体的 Observable。 在这个场景中，每个拦截器都完全能自己处理这个请求。大多数拦截器拦截都会在传入时检查请求，然后把（可能被修改过的）请求转发给 next 对象的 handle() 方法，而 next 对象实现了 HttpHandler 接口。</strong></p>
</blockquote>
<blockquote>
<p><strong>像 intercept() 一样，handle() 方法也会把 HTTP 请求转换成 HttpEvents 组成的 Observable，它最终包含的是来自服务器的响应。 intercept() 函数可以检查这个可观察对象，并在把它返回给调用者之前修改它。</strong></p>
</blockquote>
<p><strong>如果你必须修改一个请求，先把它克隆一份，修改这个克隆体后再把它传给 next.handle()</strong></p>
<p>所以将添加了跨站点访问配置的副本返回出去并且加上一个错误处理就写好了一个拦截器。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>如果拦截器比较多，其建议将其包含在数组中，将数组注入到服务模块中。</p>
<ul>
<li>index.ts</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HTTP_INTERCEPTORS &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/common/http&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonInterceptor &#125; <span class="keyword">from</span> <span class="string">&quot;./common.interceptor&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> httpInterceptorProvides = [</span><br><span class="line">    &#123; <span class="attr">provide</span>: HTTP_INTERCEPTORS, <span class="attr">useClass</span>: CommonInterceptor, <span class="attr">multi</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>注意 multi: true 选项。 这个必须的选项会告诉 Angular HTTP_INTERCEPTORS 是一个多重提供者的令牌，表示它会注入一个多值的数组，而不是单一的值。</strong></p>
<ul>
<li>services.module.ts</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; InjectionToken, NgModule &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/core&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; httpInterceptorProvides &#125; <span class="keyword">from</span> <span class="string">&quot;./http-interceptors&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> API_CONFIG = <span class="keyword">new</span> InjectionToken(<span class="string">&quot;ApiconfigToken&quot;</span>);</span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    declarations: [],</span><br><span class="line">    imports: [],</span><br><span class="line">    providers: [</span><br><span class="line">        &#123; <span class="attr">provide</span>: API_CONFIG, <span class="attr">useValue</span>: <span class="string">&quot;http://localhost:3000/&quot;</span> &#125;,</span><br><span class="line">        httpInterceptorProvides</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ServicesModule</span> </span>&#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--26、登录/登出</title>
    <url>/posts/d4e2d6d6/</url>
    <content><![CDATA[<h1 id="登录实现"><a href="#登录实现" class="headerlink" title="登录实现"></a>登录实现</h1><p>就目前的进度来看，是没有实现token验证的，所以所有的登录也只是简单的验证账密，即使账密的复写也只是存在localstorage内存中的，所以关于更加安全的登录不知道后面会不会修改。<br><img data-src="https://img-blog.csdnimg.cn/20210114194342967.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210114194352305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="切换弹窗页面"><a href="#切换弹窗页面" class="headerlink" title="切换弹窗页面"></a>切换弹窗页面</h2><p>开始实现的default页面只是用来判断登录还是注册，所以说这一步的操作还是要更换弹窗内的渲染内容的。</p>
<pre><code>将创建好的登录模块和注册模块添加到
app.component.html中的wy-layer-modal标签内。</code></pre>
<ul>
<li><p>app.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-wy-layer-modal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-wy-layer-login</span> <span class="attr">name</span>=<span class="string">&quot;login&quot;</span> [<span class="attr">wyRememberLogin</span>]=<span class="string">&quot;wyRememberLogin&quot;</span> (<span class="attr">onChangeModalType</span>)=<span class="string">&quot;onChangeModalType($event)&quot;</span> (<span class="attr">onLogin</span>)=<span class="string">&quot;onLogin($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-wy-layer-login</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-wy-layer-default</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span> (<span class="attr">onChangeModalType</span>)=<span class="string">&quot;onChangeModalType($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-wy-layer-default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-wy-layer-register</span> <span class="attr">name</span>=<span class="string">&quot;register&quot;</span> (<span class="attr">onChangeModalType</span>)=<span class="string">&quot;onChangeModalType($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-wy-layer-register</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-wy-layer-modal</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样在选择弹框子页面时根据name值来判断。</p>
</li>
<li><p>app.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">nz-menu-item</span> (<span class="attr">click</span>)=<span class="string">&quot;openModalByMenu(&#x27;loginByPhone&#x27;)&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">nz-icon</span> <span class="attr">nzType</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">nzTheme</span>=<span class="string">&quot;outline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>手机登录</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">nz-menu-item</span> (<span class="attr">click</span>)=<span class="string">&quot;openModalByMenu(&#x27;register&#x27;)&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">nz-icon</span> <span class="attr">nzType</span>=<span class="string">&quot;user-add&quot;</span> <span class="attr">nzTheme</span>=<span class="string">&quot;outline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>注册</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>app.component.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">private memberBatchActionsServer: MemberBatchActionsService,</span><br><span class="line"></span><br><span class="line">openModalByMenu (type: <span class="string">&#x27;loginByPhone&#x27;</span> | <span class="string">&#x27;register&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&#x27;loginByPhone&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.openModal(ModalTypes.LoginByPhone);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.openModal(ModalTypes.Register);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开弹窗</span></span><br><span class="line">openModal (type: ModalTypes) &#123;</span><br><span class="line">    <span class="built_in">this</span>.memberBatchActionsServer.controlModal(<span class="literal">true</span>, type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当点击登录或者注册时，就会通过参数的不通来判断当前需要设置哪一种状态，当wy-layer-modal中的Store监听到状态的改变就会根据当前改变后的状态改变渲染内容。因此在占位处使用<strong>ngSwitch</strong>指令。</p>
</li>
</ul>
<ul>
<li>wy-layer-modal.component.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> [<span class="attr">ngSwitch</span>]=<span class="string">&quot;currentModalType&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngSwitchCase</span>=<span class="string">&quot;&#x27;loginByPhone&#x27;&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ng-content</span> <span class="attr">select</span>=<span class="string">&quot;[name=login]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-content</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngSwitchCase</span>=<span class="string">&quot;&#x27;register&#x27;&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ng-content</span> <span class="attr">select</span>=<span class="string">&quot;[name=register]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-content</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngSwitchDefault</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ng-content</span> &gt;</span><span class="tag">&lt;/<span class="name">ng-content</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<p><em>有关<a href="https://angular.cn/api/common/NgSwitch">ngSwitch</a>指令的使用可以点击浏览</em></p>
<hr>
<h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><ul>
<li>member.service.ts<br>登录后需要显示当前登录人的一些信息，所以也需要获取当前登录人的个别数据。</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/20210114201822368.png" alt="在这里插入图片描述"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 登录</span></span><br><span class="line"> login (formValue: LoginParams): Observable&lt;User&gt; &#123;</span><br><span class="line">     <span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line">     <span class="keyword">const</span> params = <span class="keyword">new</span> HttpParams(&#123; <span class="attr">fromString</span>: querystring.stringify(formValue) &#125;);</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;stringify:&#x27;</span>, params);</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="built_in">this</span>.uri + <span class="string">&#x27;login/cellphone&#x27;</span>, &#123; params &#125;).pipe(</span><br><span class="line">         map(<span class="function"><span class="params">res</span> =&gt;</span> res <span class="keyword">as</span> User)</span><br><span class="line">     )</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 获取用户信息</span></span><br><span class="line"> getUserInfo (uid: string): Observable&lt;User&gt; &#123;</span><br><span class="line">     <span class="keyword">const</span> params = <span class="keyword">new</span> HttpParams().set(<span class="string">&#x27;uid&#x27;</span>, uid);</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="built_in">this</span>.uri + <span class="string">&#x27;user/detail&#x27;</span>, &#123; params &#125;).pipe(</span><br><span class="line">         map(<span class="function"><span class="params">res</span> =&gt;</span> res <span class="keyword">as</span> User)</span><br><span class="line">     )</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 退出</span></span><br><span class="line"> logOut (): Observable&lt;SampleBack&gt; &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="built_in">this</span>.uri + <span class="string">&#x27;logout&#x27;</span>).pipe(</span><br><span class="line">         map(<span class="function"><span class="params">res</span> =&gt;</span> res <span class="keyword">as</span> SampleBack)</span><br><span class="line">     );</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里出了一点问题： 在格式化数据的时候，使用query-string类的时候一直报错，虽然使用了一些解决方案，但是都是不起效的。然后就用了最原始的require引用，这点还真是不明白为什么 </p>
</blockquote>
<hr>
<h2 id="响应式表单"><a href="#响应式表单" class="headerlink" title="响应式表单"></a>响应式表单</h2><ul>
<li>wy-layer-login.component.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-phone modal-content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-wrap&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">nz-form</span> <span class="attr">class</span>=<span class="string">&quot;login-form&quot;</span> [<span class="attr">formGroup</span>]=<span class="string">&quot;formModel&quot;</span> (<span class="attr">ngSubmit</span>)=<span class="string">&quot;onSubmit()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-control</span> <span class="attr">nzHasFeedback</span> <span class="attr">nzErrorTip</span>=<span class="string">&quot;请输入正确的手机号&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nz-input-group</span> <span class="attr">nzPrefixIcon</span>=<span class="string">&quot;mobile&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">nz-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入手机号&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;phone&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">nz-input-group</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-control</span> <span class="attr">nzHasFeedback</span> <span class="attr">nzErrorTip</span>=<span class="string">&quot;请输入正确的密码&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nz-input-group</span> <span class="attr">nzPrefixIcon</span>=<span class="string">&quot;lock&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">nz-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">nz-input-group</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tools&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">nz-checkbox</span> <span class="attr">class</span>=<span class="string">&quot;remember&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;remember&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>记住密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">nz-button</span> <span class="attr">class</span>=<span class="string">&quot;login-form-button&quot;</span> [<span class="attr">disabled</span>]=<span class="string">&quot;!formModel.valid&quot;</span> <span class="attr">nzType</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">nzBlock</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;m-footer clearfix&quot;</span>&gt;</span></span><br><span class="line">    &lt;a (click)=&quot;onChangeModalType.emit(&#x27;default&#x27;)&quot;&gt; &lt; 其它登陆方式&lt;/a&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> (<span class="attr">click</span>)=<span class="string">&quot;onChangeModalType.emit(&#x27;register&#x27;)&quot;</span>&gt;</span>没有账号？免费注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>wy-layer-login.component.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> type LoginParams = &#123;</span><br><span class="line">    phone: number,</span><br><span class="line">    password: string,</span><br><span class="line">    remember: boolean,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    formModel: FormGroup;</span><br><span class="line">    @Input() wyRememberLogin: LoginParams;</span><br><span class="line"></span><br><span class="line">    @Output() onChangeModalType = <span class="keyword">new</span> EventEmitter&lt;string | <span class="keyword">void</span>&gt;();</span><br><span class="line">    @Output() onLogin = <span class="keyword">new</span> EventEmitter&lt;LoginParams&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(private fb: FormBuilder) &#123; &#125;</span><br><span class="line">    ngOnInit (): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.formModel = <span class="built_in">this</span>.fb.group(&#123;</span><br><span class="line">            phone: [<span class="string">&#x27;&#x27;</span>, [Validators.required, Validators.pattern(<span class="regexp">/^1\d&#123;10&#125;$/</span>)]],</span><br><span class="line">            password: [<span class="string">&#x27;&#x27;</span>, [Validators.required, Validators.minLength(<span class="number">6</span>)]],</span><br><span class="line">            remember: [<span class="literal">false</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnChanges (changes: SimpleChanges): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> userLoginParams = changes.wyRememberLogin;</span><br><span class="line">        <span class="keyword">if</span> (userLoginParams) &#123;</span><br><span class="line">            <span class="keyword">let</span> phone = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">let</span> password = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">let</span> remember = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (userLoginParams.currentValue) &#123;</span><br><span class="line">                <span class="keyword">const</span> value = codeJson(userLoginParams.currentValue, <span class="string">&#x27;decode&#x27;</span>);</span><br><span class="line">                phone = value.phone;</span><br><span class="line">                password = value.password;</span><br><span class="line">                remember = value.remember;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.setModal(&#123; phone, password, remember &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private setModal (&#123; phone, password, remember &#125;) &#123;</span><br><span class="line">        <span class="built_in">this</span>.formModel = <span class="built_in">this</span>.fb.group(&#123;</span><br><span class="line">            phone: [phone, [Validators.required, Validators.pattern(<span class="regexp">/^1\d&#123;10&#125;$/</span>)]],</span><br><span class="line">            password: [password, [Validators.required, Validators.minLength(<span class="number">6</span>)]],</span><br><span class="line">            remember: [remember]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onSubmit () &#123;</span><br><span class="line">        <span class="keyword">const</span> modal = <span class="built_in">this</span>.formModel;</span><br><span class="line">        <span class="keyword">if</span> (modal.valid) &#123;</span><br><span class="line">            <span class="built_in">this</span>.onLogin.emit(modal.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
使用formbuilder模块能够快速的创建表单类，使用其来创建一个包含手机号，密码和复选框的一个组，然后再DOM中绑定其formname属性即可。<br><img data-src="https://img-blog.csdnimg.cn/20210114203021247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<pre><code>有一点不得不说，会用正则是真的可以方便很多——但是我不会</code></pre>
<p>此页面只是展示，所有的逻辑都放到了父组件中，所以当点击登录时将表单的值发射给父组件即可。</p>
<hr>
<p>当父组件接收到传来的值后，就会调用登录接口。</p>
<ul>
<li>app.component.ts</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">user: User;</span><br><span class="line">wyRememberLogin: LoginParams;</span><br><span class="line"><span class="keyword">constructor</span>(</span><br><span class="line">    private searchServe: SearchService,</span><br><span class="line">    private store$: Store&lt;AppModule&gt;,</span><br><span class="line">    private memberBatchActionsServer: MemberBatchActionsService,</span><br><span class="line">    private memberServe: MemberService,</span><br><span class="line">    private message: NzMessageService,</span><br><span class="line">    private storageServe: StorageService,</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">const</span> userId = <span class="built_in">this</span>.storageServe.getStorage(<span class="string">&#x27;wyUserId&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (userId) &#123;</span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetUserId(&#123; <span class="attr">id</span>: userId &#125;));</span><br><span class="line">        <span class="built_in">this</span>.memberServe.getUserInfo(userId).subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.user = res</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> wyRememberLogin = <span class="built_in">this</span>.storageServe.getStorage(<span class="string">&#x27;wyRememberLogin&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (wyRememberLogin) &#123;</span><br><span class="line">        <span class="built_in">this</span>.wyRememberLogin = <span class="built_in">JSON</span>.parse(wyRememberLogin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 登录</span></span><br><span class="line">onLogin (params: LoginParams) &#123;</span><br><span class="line">    <span class="built_in">this</span>.memberServe.login(params).subscribe((<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">        <span class="built_in">this</span>.memberBatchActionsServer.controlModal(<span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">this</span>.alertMessage(<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;登陆成功&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.storageServe.setStorage(&#123;</span><br><span class="line">            key: <span class="string">&#x27;wyUserId&#x27;</span>,</span><br><span class="line">            value: user.profile.userId</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetUserId(&#123; <span class="attr">id</span>: user.profile.userId.toString() &#125;));</span><br><span class="line">        <span class="keyword">if</span> (params.remember) &#123;</span><br><span class="line">            <span class="built_in">this</span>.storageServe.setStorage(&#123;</span><br><span class="line">                key: <span class="string">&#x27;wyRememberLogin&#x27;</span>,</span><br><span class="line">                value: <span class="built_in">JSON</span>.stringify(codeJson(params))</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.storageServe.removeStorage(<span class="string">&#x27;wyRememberLogin&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;), (<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.alertMessage(<span class="string">&#x27;error&#x27;</span>, error.message)</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登出</span></span><br><span class="line">onLogout () &#123;</span><br><span class="line">    <span class="built_in">this</span>.memberServe.logOut().subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.storageServe.removeStorage(<span class="string">&#x27;wyUserId&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetUserId(&#123; <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span> &#125;))</span><br><span class="line">        <span class="built_in">this</span>.alertMessage(<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;已退出&#x27;</span>);</span><br><span class="line">    &#125;, (<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.alertMessage(<span class="string">&#x27;error&#x27;</span>, error.message)</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示信息</span></span><br><span class="line">private alertMessage (type: string, <span class="attr">msg</span>: string) &#123;</span><br><span class="line">    <span class="built_in">this</span>.message.create(type, msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时会将登录信息作为参数调用登录API，将返回值存在全局，使用Store将弹框显隐的状态改为false。然后利用nzMessage弹出提示，最后使用封装的localstorage将登录人的ID存入内存。在使用Store将当前登录人的状态ID改写，如果登录时勾选记住密码，将会把表单的内容存入localstorage，如果没勾选将会删除。</p>
<ul>
<li>member.types.ts</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> type User = &#123;</span><br><span class="line">    level?: number; <span class="comment">// 等级</span></span><br><span class="line">    listenSongs?: number; <span class="comment">// 听歌记录</span></span><br><span class="line">    profile: &#123;</span><br><span class="line">        userId: number, <span class="comment">// ID</span></span><br><span class="line">        nickname: string, <span class="comment">// 昵称</span></span><br><span class="line">        avatarUrl: string, <span class="comment">// 头像</span></span><br><span class="line">        backgroundUrl: string, <span class="comment">// 背景图</span></span><br><span class="line">        signature: string, <span class="comment">// 简介</span></span><br><span class="line">        gender: number, <span class="comment">// 性别</span></span><br><span class="line">        followeds: number, <span class="comment">// 粉丝</span></span><br><span class="line">        follows: number, <span class="comment">// 关注</span></span><br><span class="line">        eventCount: number, <span class="comment">// 动态</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登出返回</span></span><br><span class="line"><span class="keyword">export</span> interface SampleBack <span class="keyword">extends</span> AnyJson &#123;</span><br><span class="line">    code: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加密数据</span></span><br><span class="line"><span class="keyword">export</span> interface AnyJson &#123;</span><br><span class="line">    [key: string]: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type Signin = &#123;</span><br><span class="line">    code: number;</span><br><span class="line">    point?: number;</span><br><span class="line">    msg?: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>storage.service.ts</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">getStorage (key: string, type = <span class="string">&#x27;local&#x27;</span>): string &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>[type + <span class="string">&#x27;Storage&#x27;</span>].getItem(key)</span><br><span class="line">&#125;</span><br><span class="line">setStorage (param: AnyJson | AnyJson[], type = <span class="string">&#x27;local&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> kv = <span class="built_in">Array</span>.isArray(param) ? param : [param];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> &#123; key, value &#125; <span class="keyword">of</span> kv) &#123;</span><br><span class="line">        <span class="built_in">window</span>[type + <span class="string">&#x27;Storage&#x27;</span>].setItem(key, value.toString())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">removeStorage (param: string | string[], type = <span class="string">&#x27;local&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> kv = <span class="built_in">Array</span>.isArray(param) ? param : [param];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> kv) &#123;</span><br><span class="line">        <span class="built_in">window</span>[type + <span class="string">&#x27;Storage&#x27;</span>].removeItem(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要是封装了set，能够同时将多组的键值对存储。</p>
<p>其实账密存在内存中本身就不对，应该是利用token来检验，所以就当是拓展学习，也利用了base64插件来对账密进行加密和解密。</p>
<ul>
<li>base64.ts</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Base64 &#125; <span class="keyword">from</span> <span class="string">&quot;js-base64&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密数据</span></span><br><span class="line"><span class="keyword">export</span> interface AnyJson &#123;</span><br><span class="line">    [key: string]: any;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">codeJson</span> (<span class="params">source: AnyJson, type = <span class="string">&#x27;encode&#x27;</span></span>): <span class="title">AnyJson</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> arr <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source.hasOwnProperty(arr)) &#123;</span><br><span class="line">            result[Base64[type](arr)] = Base64[type](source[arr])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>有关登录的安全验证还是有点迷惑的，对于token的理解还是不太明确，所以这个还是要好好的功课一下的。</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--25、登录弹框</title>
    <url>/posts/a7b09b4f/</url>
    <content><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>当点击首页的登录按钮时，需要有个弹框来满足会员登录的功能。但是考虑到会员功能有一些收藏和转发的功能也需要弹框，所以选择使用复用弹框组件，每次调用弹框组件的时候会传递当前的操作，根据操作的不同来选择渲染进弹框的页面。<br><img data-src="https://img-blog.csdnimg.cn/20210112212233995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h2><p>将弹窗的组件创建到wy-ui目录下<br><img data-src="https://img-blog.csdnimg.cn/20210112212456147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"></p>
<p>在会员登录组件中添加点击事件</p>
<ul>
<li>member-card.component.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">nz-button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;openModal.emit()&quot;</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>当点击按钮后，就会将点击事件发射出去</p>
<ul>
<li>member-card.component.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@Output() openModal = <span class="keyword">new</span> EventEmitter&lt;<span class="keyword">void</span>&gt;();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>home父组件添加接收回调</p>
<ul>
<li>home.component.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-member-card</span> (<span class="attr">openModal</span>)=<span class="string">&quot;openModal()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-member-card</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>根据之前的设计，因为弹框的内容不一样，但是想要复用弹框组件，所以在触发弹框时会传递参数来判断当前应该渲染哪个页面，所以可以选择ngrx来接受弹框的不同状态。</p>
<h2 id="初始化ngx"><a href="#初始化ngx" class="headerlink" title="初始化ngx"></a>初始化ngx</h2><ul>
<li>member.reducer.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> enum ModalTypes &#123;</span><br><span class="line">    Register = <span class="string">&#x27;register&#x27;</span>,</span><br><span class="line">    LoginByPhone = <span class="string">&#x27;loginByPhone&#x27;</span>,</span><br><span class="line">    Share = <span class="string">&#x27;share&#x27;</span>,</span><br><span class="line">    Like = <span class="string">&#x27;like&#x27;</span>,</span><br><span class="line">    Default = <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type MemberState = &#123;</span><br><span class="line">    modalVisible: boolean, <span class="comment">// 显隐状态</span></span><br><span class="line">    modalType: ModalTypes, <span class="comment">// 弹框方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始数据格式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initialState: MemberState = &#123;</span><br><span class="line">    modalVisible: <span class="literal">false</span>,</span><br><span class="line">    modalType: ModalTypes.Default,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注册动作</span></span><br><span class="line"><span class="keyword">const</span> reducer = createReducer(</span><br><span class="line">    initialState,</span><br><span class="line">    on(SetModalVisible, <span class="function">(<span class="params">state, &#123; modalVisible &#125;</span>) =&gt;</span> (&#123; ...state, modalVisible &#125;)),</span><br><span class="line">    on(SetModalType, <span class="function">(<span class="params">state, &#123; modalType &#125;</span>) =&gt;</span> (&#123; ...state, modalType &#125;)),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">memberReducer</span> (<span class="params">state: MemberState, action: Action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> reducer(state, action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>member.actions.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createAction, props &#125; <span class="keyword">from</span> <span class="string">&#x27;@ngrx/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ModalTypes &#125; <span class="keyword">from</span> <span class="string">&#x27;../reducers/member.reducer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置动作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SetModalVisible = createAction(<span class="string">&#x27;[member] set modal visible&#x27;</span>, props&lt;&#123; <span class="attr">modalVisible</span>: boolean &#125;&gt;());</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SetModalType = createAction(<span class="string">&#x27;[player] set modal type&#x27;</span>, props&lt;&#123; <span class="attr">modalType</span>: ModalTypes &#125;&gt;());</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>member.selector.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createFeatureSelector, createSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;@ngrx/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MemberState &#125; <span class="keyword">from</span> <span class="string">&quot;../reducers/member.reducer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> selectMemberStates = <span class="function">(<span class="params">state: MemberState</span>) =&gt;</span> state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getMember = createFeatureSelector&lt;MemberState&gt;(<span class="string">&#x27;member&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getModalVisible = createSelector(selectMemberStates, <span class="function">(<span class="params">state: MemberState</span>) =&gt;</span> state.modalVisible)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getModalType = createSelector(selectMemberStates, <span class="function">(<span class="params">state: MemberState</span>) =&gt;</span> state.modalType)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="封装action"><a href="#封装action" class="headerlink" title="封装action"></a>封装action</h2><p>为了和之前的播放面板区别，所以选择新建了服务</p>
<ul>
<li>member-batch-actions.service.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; select, Store &#125; <span class="keyword">from</span> <span class="string">&#x27;@ngrx/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppStoreModule &#125; <span class="keyword">from</span> <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SetModalType, SetModalVisible &#125; <span class="keyword">from</span> <span class="string">&#x27;./actions/member.actions&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MemberState, ModalTypes &#125; <span class="keyword">from</span> <span class="string">&#x27;./reducers/member.reducer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getMember &#125; <span class="keyword">from</span> <span class="string">&#x27;./selectors/member.selector&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@Injectable(&#123;</span><br><span class="line">    providedIn: AppStoreModule</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberBatchActionsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    private memberState: MemberState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        private store$: Store&lt;AppStoreModule&gt;,</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="built_in">this</span>.store$.pipe(select(getMember)).subscribe(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">this</span>.memberState = res)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  会员弹窗显隐/ 类型</span></span><br><span class="line">    controlModal (modalVisible = <span class="literal">true</span>, modalType = ModalTypes.Default) &#123;</span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetModalType(&#123; modalType &#125;));</span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetModalVisible(&#123; modalVisible &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>此时home回调中会向会员actions服务中调用弹框。</p>
<ul>
<li>home.component.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">private memberBatchActionsServer: MemberBatchActionsService,</span><br><span class="line"><span class="comment">// 会员弹窗</span></span><br><span class="line">openModal () &#123;</span><br><span class="line">    <span class="built_in">this</span>.memberBatchActionsServer.controlModal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>那怎么调用这个弹框组件呢？只需要在弹框组件中订阅弹框显隐状态和弹框类型就可以了。</p>
<ul>
<li>wy-layer-modal.component.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">&#x27;app-wy-layer-modal&#x27;</span>,</span><br><span class="line">    templateUrl: <span class="string">&#x27;./wy-layer-modal.component.html&#x27;</span>,</span><br><span class="line">    styleUrls: [<span class="string">&#x27;./wy-layer-modal.component.less&#x27;</span>],</span><br><span class="line">    changeDetection: ChangeDetectionStrategy.OnPush,</span><br><span class="line">    animations: [trigger(<span class="string">&#x27;showHide&#x27;</span>, [</span><br><span class="line">        state(<span class="string">&#x27;show&#x27;</span>, style(&#123; <span class="attr">transform</span>: <span class="string">&#x27;scale(1)&#x27;</span>, <span class="attr">opacity</span>: <span class="number">1</span> &#125;)),</span><br><span class="line">        state(<span class="string">&#x27;hide&#x27;</span>, style(&#123; <span class="attr">transform</span>: <span class="string">&#x27;scale(0)&#x27;</span>, <span class="attr">opacity</span>: <span class="number">0</span> &#125;)),</span><br><span class="line">        transition(<span class="string">&#x27;show&lt;=&gt;hide&#x27;</span>, animate(<span class="string">&#x27;0.1s&#x27;</span>))</span><br><span class="line">    ])]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">WyLayerModalComponent</span> <span class="title">implements</span> <span class="title">OnInit</span>, <span class="title">AfterViewInit</span> </span>&#123;</span><br><span class="line">    showModal = <span class="string">&#x27;hide&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    private visible = <span class="literal">false</span>;  <span class="comment">// 弹窗显隐</span></span><br><span class="line">    private currentModalType = ModalTypes.Default; <span class="comment">//  当前弹窗模式</span></span><br><span class="line"></span><br><span class="line">    private overlayRef: OverlayRef;</span><br><span class="line">    private scrollStrategy: BlockScrollStrategy;</span><br><span class="line"></span><br><span class="line">    private resizehandler: <span class="function">() =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">    private overlayContainerEl: HTMLElement;</span><br><span class="line"></span><br><span class="line">    @ViewChild(<span class="string">&#x27;modalContainer&#x27;</span>, &#123; <span class="attr">static</span>: <span class="literal">false</span> &#125;) private modalRef: ElementRef;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        @Inject(DOCUMENT) private doc: Document,</span><br><span class="line">        private store$: Store&lt;AppStoreModule&gt;,</span><br><span class="line">        private overlay: Overlay,</span><br><span class="line">        private elementRef: ElementRef,</span><br><span class="line">        private overlayKeyboardDispatcher: OverlayKeyboardDispatcher,</span><br><span class="line">        private cdr: ChangeDetectorRef,</span><br><span class="line">        private memberBatchActionsServer: MemberBatchActionsService,</span><br><span class="line">        private rd: Renderer2,</span><br><span class="line">        private overlayContainerServe: OverlayContainer,</span><br><span class="line">    ) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    ngOnInit (): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> appStore$ = <span class="built_in">this</span>.store$.pipe(select(getMember));</span><br><span class="line">        appStore$.pipe(select(getModalVisible)).subscribe(<span class="function"><span class="params">visible</span> =&gt;</span> <span class="built_in">this</span>.watchModalVisible(visible));</span><br><span class="line">        appStore$.pipe(select(getModalType)).subscribe(<span class="function"><span class="params">modalType</span> =&gt;</span> <span class="built_in">this</span>.watchModalType(modalType));</span><br><span class="line">        <span class="built_in">this</span>.createOverlay();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngAfterViewInit (): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.overlayContainerEl = <span class="built_in">this</span>.overlayContainerServe.getContainerElement();</span><br><span class="line">        <span class="built_in">this</span>.listenResizeToCenter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private createOverlay () &#123;</span><br><span class="line">        <span class="built_in">this</span>.overlayRef = <span class="built_in">this</span>.overlay.create(&#123; <span class="attr">hasBackdrop</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        <span class="built_in">this</span>.overlayRef.overlayElement.appendChild(<span class="built_in">this</span>.elementRef.nativeElement);</span><br><span class="line">        <span class="built_in">this</span>.overlayRef.keydownEvents().subscribe(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">this</span>.keydownListener(e));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听弹窗内的点击</span></span><br><span class="line">    private keydownListener (eve: KeyboardEvent) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;keydown&#x27;</span>, eve);</span><br><span class="line">        <span class="keyword">if</span> (eve.key === <span class="string">&#x27;Escape&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.hide()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听弹窗显隐</span></span><br><span class="line">    private watchModalVisible (visible: boolean) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.visible !== visible) &#123;</span><br><span class="line">            <span class="built_in">this</span>.visible = visible;</span><br><span class="line">            <span class="built_in">this</span>.handleVisibleChange(visible);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听弹窗模式 </span></span><br><span class="line">    private watchModalType (type: ModalTypes) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.currentModalType !== type) &#123;</span><br><span class="line">            <span class="built_in">this</span>.currentModalType = type;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理弹窗回调</span></span><br><span class="line">    private handleVisibleChange (visible: boolean) &#123;</span><br><span class="line">        <span class="keyword">if</span> (visible) &#123;</span><br><span class="line">            <span class="built_in">this</span>.showModal = <span class="string">&#x27;show&#x27;</span>;</span><br><span class="line">            <span class="built_in">this</span>.scrollStrategy.enable();</span><br><span class="line">            <span class="built_in">this</span>.overlayKeyboardDispatcher.add(<span class="built_in">this</span>.overlayRef);</span><br><span class="line">            <span class="built_in">this</span>.listenResizeToCenter();</span><br><span class="line">            <span class="built_in">this</span>.changePointerEvents(<span class="string">&#x27;auto&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.showModal = <span class="string">&#x27;hide&#x27;</span>;</span><br><span class="line">            <span class="built_in">this</span>.scrollStrategy.disable();</span><br><span class="line">            <span class="built_in">this</span>.overlayKeyboardDispatcher.remove(<span class="built_in">this</span>.overlayRef);</span><br><span class="line">            <span class="built_in">this</span>.resizehandler();</span><br><span class="line">            <span class="built_in">this</span>.changePointerEvents(<span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.cdr.markForCheck();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private changePointerEvents (type: <span class="string">&#x27;none&#x27;</span> | <span class="string">&#x27;auto&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.overlayContainerEl) &#123;</span><br><span class="line">            <span class="built_in">this</span>.overlayContainerEl.style.pointerEvents = type</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭弹框</span></span><br><span class="line">    hide () &#123;</span><br><span class="line">        <span class="built_in">this</span>.memberBatchActionsServer.controlModal(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弹窗动态居中</span></span><br><span class="line">    private listenResizeToCenter () &#123;</span><br><span class="line">        <span class="keyword">const</span> modal = <span class="built_in">this</span>.modalRef.nativeElement;</span><br><span class="line">        <span class="keyword">const</span> modalSize = <span class="built_in">this</span>.getHideDomSize(modal);</span><br><span class="line">        <span class="built_in">this</span>.keepCenter(modal, modalSize);</span><br><span class="line">        <span class="built_in">this</span>.resizehandler = <span class="built_in">this</span>.rd.listen(<span class="string">&#x27;window&#x27;</span>, <span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.keepCenter(modal, modalSize);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 居中</span></span><br><span class="line">    private keepCenter (modal: HTMLElement, <span class="attr">size</span>: &#123; <span class="attr">w</span>: number, <span class="attr">h</span>: number &#125;) &#123;</span><br><span class="line">        <span class="keyword">const</span> left = (<span class="built_in">this</span>.getWindowSize().w - size.w) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">const</span> top = (<span class="built_in">this</span>.getWindowSize().h - size.h) / <span class="number">2</span>;</span><br><span class="line">        modal.style.left = left + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        modal.style.top = top + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取弹框长宽</span></span><br><span class="line">    private getHideDomSize (dom: HTMLElement) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            w: dom.offsetWidth,</span><br><span class="line">            h: dom.offsetHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取窗口的宽高</span></span><br><span class="line">    private getWindowSize () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            w: <span class="built_in">window</span>.innerWidth || <span class="built_in">this</span>.doc.documentElement.clientWidth || <span class="built_in">this</span>.doc.body.offsetWidth,</span><br><span class="line">            h: <span class="built_in">window</span>.innerHeight || <span class="built_in">this</span>.doc.documentElement.clientHeight || <span class="built_in">this</span>.doc.body.offsetHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>在组件初始化时，先订阅弹框显隐和弹框的类型，在监听弹窗模式 回调中会修改当前的弹窗模式；在监听弹窗显隐时如果是显示就会修改当前的显隐，并且触发回调，弹框弹起时就会进入if，此时会触发动画，动画转场向着‘show’，然后会阻止滚动条的作用。为了防止浮层下的其他点击事件，在添加一个蒙层，之后调用弹框居中的回调，根据窗口和浮层的长宽来计算浮层的位置，并为窗口添加一个重新计算大小的事件。然后禁用浮层穿透，防止触发下面的事件。</strong></p>
<p><strong>然后就可以添加浮层和门户了。这个和搜索组件的浮层还不一样，因为搜索组件的浮层是要和搜索框一起存在的，并没有嵌套关系，所以使用了浮层的attach方法。但是弹框的渲染页是变化的，所以需要有嵌套关系，因此要使用appendchild的方法。要使浮层显示之后可以使用ESC来关闭，就可以监听键盘，当其输入的KEY是’Escape’就再次调用action服务，将弹框显隐设置为false。</strong></p>
<p><strong>当其订阅到弹框显隐变化为false时，就会触发动画转场为hide，并且显示滚动条，移除蒙层，解绑弹窗动态居中。</strong></p>
<ul>
<li>wy-layer-modal.component.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;m-layer&quot;</span>    </span></span><br><span class="line"><span class="tag">#<span class="attr">modalContainer</span></span></span><br><span class="line"><span class="tag">[@<span class="attr">showHide</span>]=<span class="string">&quot;showModal&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">cdkDrag</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;zbar&quot;</span> <span class="attr">cdkDragHandle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;zttl f-thide&quot;</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-content</span> #<span class="attr">name</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-content</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;zcls&quot;</span> <span class="attr">title</span>=<span class="string">&quot;关闭&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;hide()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="浮层拖拽"><a href="#浮层拖拽" class="headerlink" title="浮层拖拽"></a>浮层拖拽</h2><p>可以使用material的拖放指令，只需要导入需要的包就可以。</p>
<ul>
<li>wy-layer.module.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    declarations: [WyLayerModalComponent, WyLayerDefaultComponent],</span><br><span class="line">    imports: [</span><br><span class="line">        CommonModule,</span><br><span class="line">        NzButtonModule,</span><br><span class="line">        DragDropModule,</span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">exports</span>: [WyLayerModalComponent, WyLayerDefaultComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">WyLayerModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>在允许拖拽的元素上添加 ==cdkDrag==与==cdkDragHandle==即可</p>
<blockquote>
<p><strong>注意：cdkDrag不可以放在cdkDragHandle里边</strong></p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于ngrx的使用确实是很方便，但是始终是不太明白运行的原理，官方文档也不是很理解，而且有关功能的实现有很多是组件库的作用，其实拖拽完全可以手写，但是尝试了一次之后失败了，关于这个原理还是有点模糊。将angular升级到最新后导包总是会出现报错，但大多数重启服务就可以了，不知道是不是配置的问题，之前就能够实时更新文件的，，，加油吧，坚持到底</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--24、动画</title>
    <url>/posts/a98f20ea/</url>
    <content><![CDATA[<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p>在基本实现了底部播放面板的显示之后就可以为面板做一层动画，来实现底部面板的显隐。底部就只会显示一个小按钮<br><img data-src="https://img-blog.csdnimg.cn/20210111162832873.png" alt="在这里插入图片描述"></p>
<hr>
<h1 id="angular动画"><a href="#angular动画" class="headerlink" title="angular动画"></a>angular动画</h1><p>这里就要提到强大的<a href="https://angular.cn/guide/animations">angular动画</a>了，关于更详细的教程可以去angular官网去搜索动画教程。</p>
<blockquote>
<p>动画用于提供运动的幻觉：HTML 元素随着时间改变样式。精心设计的动画可以让你的应用更有趣，更易用，但它们不仅仅是装饰性的。动画可以通过几种方式改善你的应用和用户体验：</p>
<ul>
<li>没有动画，Web 页面的转场就会显得突兀、不协调。</li>
<li>运动能极大地提升用户体验，因此动画可以让用户察觉到应用对他们的操作做出了响应。</li>
<li>良好的动画可以直观的把用户的注意力吸引到要留意的地方。</li>
</ul>
</blockquote>
<blockquote>
<p>典型的动画会涉及多种随时间变化的转换。HTML 元素可以移动、变换颜色、增加或缩小、隐藏或从页面中滑出。 这些变化可以同时发生或顺序发生。你可以控制每次转换的持续时间。</p>
</blockquote>
<blockquote>
<p>Angular 的动画系统是基于 CSS 功能构建的，这意味着你可以 “动” 浏览器认为可动的任何属性。包括位置、大小、变形、颜色、边框等。W3C 在它的 CSS Transitions（转场） 页中维护了一个可动属性的列表。</p>
</blockquote>
<hr>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>当我们将鼠标悬浮到底部时，面板自下而上显示，当离开面板区域时，面板自上而下隐藏。同时也要为小按钮添加锁定面板的功能。</p>
<h3 id="定义动画"><a href="#定义动画" class="headerlink" title="定义动画"></a>定义动画</h3><ul>
<li>wy-player.component.html<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">&#x27;app-wy-player&#x27;</span>,</span><br><span class="line">    templateUrl: <span class="string">&#x27;./wy-player.component.html&#x27;</span>,</span><br><span class="line">    styleUrls: [<span class="string">&#x27;./wy-player.component.less&#x27;</span>],</span><br><span class="line">    animations: [trigger(<span class="string">&#x27;showHide&#x27;</span>, [</span><br><span class="line">        state(<span class="string">&#x27;show&#x27;</span>, style(&#123; <span class="attr">bottom</span>: <span class="number">0</span> &#125;)),</span><br><span class="line">        state(<span class="string">&#x27;hide&#x27;</span>, style(&#123; <span class="attr">bottom</span>: <span class="number">-71</span> &#125;)),</span><br><span class="line">        transition(<span class="string">&#x27;show=&gt;hide&#x27;</span>, [animate(<span class="string">&#x27;0.3s&#x27;</span>)]),</span><br><span class="line">        transition(<span class="string">&#x27;hide=&gt;show&#x27;</span>, [animate(<span class="string">&#x27;0.1s&#x27;</span>)])</span><br><span class="line">    ])]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    showPlayer = <span class="string">&#x27;hide&#x27;</span>; <span class="comment">// 动画初始状态</span></span><br><span class="line">    isLocked = <span class="literal">false</span>; <span class="comment">// 面板是否被锁</span></span><br><span class="line">    animating = <span class="literal">false</span>; <span class="comment">// 是否正在动画</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 面板动画</span></span><br><span class="line">    togglePlayer (type: string) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.isLocked &amp;&amp; !<span class="built_in">this</span>.animating) &#123;</span><br><span class="line">            <span class="built_in">this</span>.showPlayer = type;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>angular 要求在组件的 @Component() 装饰器中，添加一个名叫 animations: 的元数据属性。 你可以把用来定义动画的触发器放进 animations 元数据属性中。</strong></p>
<p><strong>使用trigger来为当前动画添加触发器，第一个参数为触发器的名称，第二个参数用数组来包装所用的状态和转场。state声明状态，第一个参数是状态名称，第二个参数是样式对象。transition表示转场动画，其中第一个参数表示状态指向变化，第二个参数表示动画元数据animate</strong></p>
<blockquote>
<p><strong>动画元数据</strong><br>animate() 函数（作为转场函数的第二个参数）可以接受 timings 和 styles 参数。timings 参数接受一个由三部分组成的字符串。</p>
<ul>
<li>animate (‘duration delay easing’)</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>第一部分 duration（持续时间）是必须的。这个持续时间可以表示成一个不带引号的纯数字（表示毫秒），或一个带引号的有单位的时间（表示秒数）。比如，0.1 秒的持续时间有如下表示方式：<blockquote>
<ul>
<li>作为纯数字，毫秒为单位：100</li>
<li>作为字符串，毫秒为单位：’100ms’</li>
<li>作为字符串，秒为单位：’0.1s’</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<blockquote>
<p>第二个参数 delay 的语法和 duration 一样。比如：</p>
<blockquote>
<ul>
<li>等待 100 毫秒，然后运行 200 毫秒表示为：’0.2s 100ms’</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>第三个参数 easing 控制动画在运行期间如何进行加速和减速。比如 ease-in 表示动画开始时很慢，然后逐渐加速。</p>
<blockquote>
<ul>
<li>等待 100 毫秒，运行 200 毫秒。按照减速曲线运动，快速启动并逐渐减速，直到静止：’0.2s 100ms ease-out’</li>
<li>运行 200 毫秒，不等待。按照标准曲线运动，开始很慢，中间加速，最后逐渐减速：’0.2s ease-in-out’</li>
<li>立即开始，运行 200 毫秒。按照加速曲线运动，开始很慢，最后达到全速：’0.2s ease-in’</li>
</ul>
</blockquote>
</blockquote>
<hr>
<h3 id="使用动画"><a href="#使用动画" class="headerlink" title="使用动画"></a>使用动画</h3><p>为组件定义好这些动画触发器之后，你可以给触发器名称加上 @ 前缀并包在方括号里，来把它附加到组件模板中的元素上。然后，你可以使用 Angular 的标准属性绑定语法，来把这个触发器绑定到模板表达式上。这里的 showHide就是触发器的名称，而 showPlayer的求值结果是前面定义过的动画状态之一。</p>
<ul>
<li>wy-player.component.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;m-player&quot;</span> </span></span><br><span class="line"><span class="tag">    [@<span class="attr">showHide</span>]=<span class="string">&quot;showPlayer&quot;</span></span></span><br><span class="line"><span class="tag">     (<span class="attr">mouseenter</span>)=<span class="string">&quot;togglePlayer(&#x27;show&#x27;)&quot;</span></span></span><br><span class="line"><span class="tag">     (<span class="attr">mouseleave</span>)=<span class="string">&quot;togglePlayer(&#x27;hide&#x27;)&quot;</span></span></span><br><span class="line"><span class="tag">     (@<span class="attr">showHide.start</span>)=<span class="string">&quot;animating = true&quot;</span></span></span><br><span class="line"><span class="tag">     (@<span class="attr">showHide.done</span>)=<span class="string">&quot;animating = false&quot;</span></span></span><br><span class="line"><span class="tag">     &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img data-src="https://img-blog.csdnimg.cn/20210111165513502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<p>当鼠标滑过时就会触发mouseenter，此时就会改变面板的默认状态，触发器就会执行 <strong>‘hide =&gt; show’</strong> 的动画。关于动画的改变是根据底部面板的高度来决定的，改变元素底边缘的值实现显隐。</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--23、搜索组件</title>
    <url>/posts/8dec73e7/</url>
    <content><![CDATA[<h1 id="搜索组件"><a href="#搜索组件" class="headerlink" title="搜索组件"></a>搜索组件</h1><p>首页顶部的搜索框要开始实现了。使用场景很明确，就是去根据关键字去调用专用的接口拿到返回值后渲染到组件中。<br><img data-src="https://img-blog.csdnimg.cn/20210110205531383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<p>为了方便维护，将搜索框封装成单独的模块</p>
<h2 id="创建search模块"><a href="#创建search模块" class="headerlink" title="创建search模块"></a>创建search模块</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在wy-ui下执行</span></span><br><span class="line">	ng g m wy-search</span><br><span class="line">	ng g c wy-search</span><br></pre></td></tr></table></figure>
<p><strong>为了避免循环引用shareModule，所以要在WySearchModule中逐个引用。</strong></p>
<hr>
<h2 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2><p>使用ng-container和ng-template标签灵活创建组件渲染的内容</p>
<ul>
<li>wy-search.component.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">default</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span> #<span class="attr">search</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nz-input-group</span> <span class="attr">nzSuffixIcon</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> #<span class="attr">nzInput</span> <span class="attr">placeholder</span>=<span class="string">&quot;歌单/歌手&quot;</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nz-input-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngTemplateOutlet</span>=<span class="string">&quot;default&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>app.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-wy-search</span>  (<span class="attr">onSearch</span>)=<span class="string">&quot;onSearch($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-wy-search</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>wy-search.component.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@ViewChild(<span class="string">&#x27;nzInput&#x27;</span>, &#123; <span class="attr">static</span>: <span class="literal">false</span> &#125;) private nzInput: ElementRef;</span><br><span class="line">@Output() onSearch = <span class="keyword">new</span> EventEmitter&lt;string&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  发射输入框的值</span></span><br><span class="line">  ngAfterViewInit (): <span class="keyword">void</span> &#123;</span><br><span class="line">       fromEvent(<span class="built_in">this</span>.nzInput.nativeElement, <span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">           .pipe(</span><br><span class="line">               debounceTime(<span class="number">300</span>), <span class="comment">// 防抖</span></span><br><span class="line">               distinctUntilChanged(), <span class="comment">// 去重</span></span><br><span class="line">               pluck(<span class="string">&#x27;target&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">           ).subscribe(<span class="function">(<span class="params">input: string</span>) =&gt;</span> &#123;</span><br><span class="line">               <span class="built_in">this</span>.onSearch.emit(input);</span><br><span class="line">           &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>当试图渲染完成之后就去绑定输入框，将每次的输入值经过防抖和去重后发射给父组件。</p>
</li>
</ul>
<p>这里的自定义体现在app模块可以自己定义一个templateref类型的内容，然后通过引用类型将值传给子组件。</p>
<hr>
<h2 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h2><ul>
<li><p>search.service.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取关键字搜索内容</span></span><br><span class="line"> search (keywords: string): Observable&lt;SearchResult&gt; &#123;</span><br><span class="line">       <span class="keyword">const</span> params = <span class="keyword">new</span> HttpParams().set(<span class="string">&#x27;keywords&#x27;</span>, keywords);</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="built_in">this</span>.uri + <span class="string">&#x27;search/suggest&#x27;</span>, &#123; params &#125;).pipe(</span><br><span class="line">           map(<span class="function">(<span class="params">res: &#123; result: SearchResult &#125;</span>) =&gt;</span> res.result)</span><br><span class="line">       )</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>因为目前只做了歌手，歌单和歌曲模块，所以searchResult类型的属性就只定义这三个。</p>
</li>
<li><p>common.type.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关键字返回值</span></span><br><span class="line"><span class="keyword">export</span> type SearchResult = &#123;</span><br><span class="line">    artists?: Singer[],</span><br><span class="line">    playlists?: SongSheet[],</span><br><span class="line">    songs?: Song[],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><ul>
<li>app.component.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(private searchServe: SearchService ) &#123; &#125;</span><br><span class="line"></span><br><span class="line">onSearch (keywords: string) &#123;</span><br><span class="line">    <span class="keyword">if</span> (keywords) &#123;</span><br><span class="line">        <span class="built_in">this</span>.searchServe.search(keywords).subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.searchResult = <span class="built_in">this</span>.highlightKeyWords(keywords, res);;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.searchResult = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字高亮</span></span><br><span class="line">private highlightKeyWords (kewwords: string, <span class="attr">result</span>: SearchResult): SearchResult &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEmptyObject(result)) &#123;</span><br><span class="line">        <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(kewwords, <span class="string">&#x27;ig&#x27;</span>);</span><br><span class="line">        [<span class="string">&#x27;artists&#x27;</span>, <span class="string">&#x27;playlists&#x27;</span>, <span class="string">&#x27;songs&#x27;</span>].forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (result[type]) &#123;</span><br><span class="line">                result[type].forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    item.name = item.name.replace(reg, <span class="string">&#x27;&lt;span class=&quot;highlight&quot;&gt;$&amp;&lt;/span&gt;&#x27;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
页面中接到子组件传来的关键字后经过searchServer后拿到数据的返回值，额外的需求是将返回值中含有的参数高亮，所以在经过一个回调即可。回调高亮的逻辑也很清晰，通过传来的关键字和返回值，通过对关键字进行正则匹配后，将匹配到的关键字加上特有的类就可以在页面上使用 <strong>innerHtml</strong>来渲染。</li>
</ul>
<hr>
<h2 id="实现浮层"><a href="#实现浮层" class="headerlink" title="实现浮层"></a>实现浮层</h2><p>浮层的使用是<a href="https://material.angular.cn/cdk/overlay/overview">Material</a>组件库下的<strong>overlay（浮层）</strong>。</p>
<blockquote>
<p>是用的逻辑很简单，主要分为三步：<br>   1、创建浮层<br>2、创建门户<br>3、为浮层添加门户</p>
</blockquote>
<p>创建之后就可以为浮层添加配置，从而就可以实现最终效果。</p>
<h3 id="创建浮层组件"><a href="#创建浮层组件" class="headerlink" title="创建浮层组件"></a>创建浮层组件</h3><p>在wy-search目录下创建wy-search-panel组件，这个组件仅是展示内容，关于浮层和门户的创建都是在search下实现的。</p>
<ul>
<li><p>wy-search-panel.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-panel&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-wrap&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item clearfix&quot;</span> [<span class="attr">hidden</span>]=<span class="string">&quot;!searchResult?.songs&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hd&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ico ico-song&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>单曲<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;ellipsis&quot;</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of searchResult?.songs&quot;</span> (<span class="attr">mousedown</span>)=<span class="string">&quot;toInfo([&#x27;/songInfo&#x27;, item.id])&quot;</span> [<span class="attr">innerHTML</span>]=<span class="string">&quot;item.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item clearfix&quot;</span> [<span class="attr">hidden</span>]=<span class="string">&quot;!searchResult?.artists&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hd&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ico ico-singer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>歌手<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;ellipsis&quot;</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of searchResult?.artists&quot;</span> (<span class="attr">mousedown</span>)=<span class="string">&quot;toInfo([&#x27;/singer&#x27;, item.id])&quot;</span> [<span class="attr">innerHTML</span>]=<span class="string">&quot;item.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item clearfix&quot;</span> [<span class="attr">hidden</span>]=<span class="string">&quot;!searchResult?.playlists&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hd&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ico ico-sheet&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>歌单<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;ellipsis&quot;</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of searchResult?.playlists&quot;</span> (<span class="attr">mousedown</span>)=<span class="string">&quot;toInfo([&#x27;/sheetInfo&#x27;, item.id])&quot;</span> [<span class="attr">innerHTML</span>]=<span class="string">&quot;item.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>wy-search-panel.component.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">searchResult: SearchResult;</span><br><span class="line">  <span class="keyword">constructor</span>(private router: Router) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 跳转</span></span><br><span class="line">  toInfo (path: [string, number]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (path[<span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="built_in">this</span>.router.navigate(path);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>当浮层拿到返回值后，就可以渲染当前值，通过点击渲染的值将路由和ID传给回调，实现跳转页面。</p>
</li>
</ul>
<h3 id="浮层实现"><a href="#浮层实现" class="headerlink" title="浮层实现"></a>浮层实现</h3><p>当点击输入框并输入值后，app模块会将带着高亮的返回值传给search组件。search组件将会实时监听返回值的变化，不为空时就会显示浮层，否则就会关上。在打开浮层的回调中实现组件库的引用。</p>
<ul>
<li>wy-search.component.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   @Input() searchResult: SearchResult; <span class="comment">// 关键字返回值</span></span><br><span class="line">   @Input() connectedRef: ElementRef;</span><br><span class="line"></span><br><span class="line">   @ViewChild(<span class="string">&#x27;search&#x27;</span>, &#123; <span class="attr">static</span>: <span class="literal">false</span> &#125;) private defaultRef: ElementRef;</span><br><span class="line">   private overlayRef: OverlayRef;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">constructor</span>(</span><br><span class="line">       private overlay: Overlay,</span><br><span class="line">       private viewContainerRef: ViewContainerRef,</span><br><span class="line">   ) &#123; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 搜索值监听</span></span><br><span class="line">   ngOnChanges (changes: SimpleChanges): <span class="keyword">void</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (changes.searchResult &amp;&amp; !changes.searchResult.firstChange) &#123;</span><br><span class="line">           <span class="keyword">if</span> (!isEmptyObject(<span class="built_in">this</span>.searchResult)) &#123;</span><br><span class="line">               <span class="built_in">this</span>.showOverlayPanel();</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="built_in">this</span>.hideOverlayPanel();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚焦</span></span><br><span class="line">   onFocus () &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.searchResult &amp;&amp; !isEmptyObject(<span class="built_in">this</span>.searchResult)) &#123;</span><br><span class="line">           <span class="built_in">this</span>.showOverlayPanel();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 失焦</span></span><br><span class="line">   onBlur () &#123;</span><br><span class="line">       <span class="built_in">this</span>.hideOverlayPanel();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 添加浮层</span></span><br><span class="line">   showOverlayPanel () &#123;</span><br><span class="line">       <span class="built_in">this</span>.hideOverlayPanel();</span><br><span class="line">       <span class="keyword">const</span> positionStrategy = <span class="built_in">this</span>.overlay.position()</span><br><span class="line">           .flexibleConnectedTo(<span class="built_in">this</span>.connectedRef || <span class="built_in">this</span>.defaultRef)</span><br><span class="line">           .withPositions([&#123;</span><br><span class="line">               originX: <span class="string">&#x27;start&#x27;</span>,</span><br><span class="line">               originY: <span class="string">&#x27;bottom&#x27;</span>,</span><br><span class="line">               overlayX: <span class="string">&#x27;start&#x27;</span>,</span><br><span class="line">               overlayY: <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">           &#125;]).withLockedPosition(<span class="literal">true</span>);</span><br><span class="line">       <span class="built_in">this</span>.overlayRef = <span class="built_in">this</span>.overlay.create(&#123;</span><br><span class="line">           <span class="comment">// hasBackdrop: true,</span></span><br><span class="line">           positionStrategy,</span><br><span class="line">           scrollStrategy: <span class="built_in">this</span>.overlay.scrollStrategies.reposition(),</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">const</span> panelPortal = <span class="keyword">new</span> ComponentPortal(WySearchPanelComponent, <span class="built_in">this</span>.viewContainerRef);</span><br><span class="line">       <span class="keyword">const</span> panelRef = <span class="built_in">this</span>.overlayRef.attach(panelPortal);</span><br><span class="line">       panelRef.instance.searchResult = <span class="built_in">this</span>.searchResult;</span><br><span class="line">       <span class="built_in">this</span>.overlayRef.backdropClick().subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.hideOverlayPanel();</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 移除浮层</span></span><br><span class="line">   hideOverlayPanel () &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.overlayRef &amp;&amp; <span class="built_in">this</span>.overlayRef.hasAttached) &#123;</span><br><span class="line">           <span class="built_in">this</span>.overlayRef.dispose();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
先声明浮层操作类和浮层，然后使用overlay去create一个浮层，而create里边的参数都是配置。之后实例化的是门户，传了两个参数，一个是要显示的组件类，另一个是作为位置参照的ref类型。然后就可以用overlay的attach方法将门户添加到浮层上了，去除浮层可以用dispose方法。</li>
</ul>
<p>其中参数的选择上使用了定位策略和滚动策略。第一个参数是定位。</p>
<blockquote>
<p>定位策略<br>positionStrategy 配置项决定了浮层在屏幕上的定位方式。本库内置了两种定位策略： GlobalPositionStrategy 和 ConnectedPositionStrategy。</p>
</blockquote>
<blockquote>
<p>GlobalPositionStrategy 用于需要定位在视口中特定位置的浮层，位置与别的元素无关。这通常用于模态对话框和应用级通知。</p>
</blockquote>
<blockquote>
<p>ConnectedPositionStrategy 用于相对于页面中其它 “origin”（原点）元素进行定位的浮层。这通常用于菜单、选择器和工具提示。当使用这种连接策略时，会提供一组首选位置，然后根据浮层在视口中的适合程度来选出一个“最佳”位置。</p>
</blockquote>
<blockquote>
<p>FlexibleConnectedPositionStrategy 扩展了 ConnectedPositionStrategy 的功能，增加了更高级的功能，它还能相对于页面上的另一个元素定位一个浮层。其特性包括能让浮层在其内容到达视口边缘时变得可滚动；能够在浮层和视口边缘之间配置一个边距；如果浮层不适合任何一个首选位置，还能把它推入到视口中；还可以配置在打开浮层时，其大小是否会增长。这种灵活的定位策略还允许使用 withTransformOriginOn 来基于当前位置设置浮层内元素的 transform-origin。当浮层中有动画，且动画开始于其原点元素的位置时，这很有用。</p>
</blockquote>
<p>查阅文档时有一层逻辑一直很绕，如果使用 <strong>FlexibleConnectedPositionStrategy</strong>定位策略就要使用<strong>flexibleConnectedTo</strong>方法，因为该方法返回值是这个类型，而这个方法属于<strong>OverlayPositionBuilder</strong>类型，所以要使用<strong>Overlay</strong>类型下的<strong>position</strong>方法，因为该方法返回builder类型，所以定义参数时就会有很长的一个函数流。</p>
<p>为了解决滚动时浮层不固定参照模板的问题，之后的参数便是滚动策略</p>
<blockquote>
<p>滚动策略<br>scrollStrategy 配置项决定了浮层如何响应浮层元素外部的滚动。本库内置了四种可用的滚动策略。</p>
</blockquote>
<blockquote>
<p>NoopScrollStrategy 是默认选项。该策略什么都不做。</p>
</blockquote>
<blockquote>
<p>CloseScrollStrategy 会在滚动时自动关闭浮层。</p>
</blockquote>
<blockquote>
<p>当浮层打开时，BlockScrollStrategy 会阻止页面滚动。注意，某些应用可能会实现特殊或自定义的页面滚动；如果BlockScrollStrategy 与这种情况冲突，可以通过重新提供带有自定义实现的 BlockScrollStrategy 来覆盖它。</p>
</blockquote>
<blockquote>
<p>RepositionScrollStrategy 会在滚动时重新定位浮层元素。注意，这会对滚动带来一些性能影响 - 用户应该在每个具体应用的上下文中权衡这种代价。</p>
</blockquote>
<p>当位置重新定位时为了能够固定浮层，可以使用withLockedPosition方法，因此前提是使用RepositionScrollStrategy 滚动策略。</p>
<p>关于search向浮层页传值，因为这个关键词返回值是动态的，而且也没有父子组件嵌套关系,在打印了componentRef类型的门户中可以发现其中的instance属性是wySearchPanelcomponent类型，因此可以直接调用其中的searchResult变量来赋值。<br><img data-src="https://img-blog.csdnimg.cn/20210110232302393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于使用material组件库，其中的难点在于api的不熟悉以及对angular指令化的不理解，关于这个浮层的实现，除了使用这个组件库，关于ngrx插件中的一些方法也不熟悉，但是用了之后是真香！还有就是关于angular的升级，当时导入组件库的时候怎么都报错，根据提示升级后整个项目就炸了，，先是一些引用的报错其次就是一些方法的弃用，到目前为止，项目能跑起来，但总觉得有些数据是不对的，包括方法的使用也是不合适的，等后期总结修改吧！！！</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--22、歌曲详情</title>
    <url>/posts/72e17053/</url>
    <content><![CDATA[<h1 id="歌曲详情"><a href="#歌曲详情" class="headerlink" title="歌曲详情"></a>歌曲详情</h1><p>歌曲的详情页面只是个展示页面，唯一的功能就是即时播放按钮。功能和逻辑都与之前的歌单详情一致。</p>
<ul>
<li><p>创建song-info组件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ng g m song-info --routing</span><br><span class="line">ngng c song-info</span><br></pre></td></tr></table></figure>
</li>
<li><p>song-info-routing.moduel.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;songInfo/:id&#x27;</span>, <span class="attr">component</span>: SongInfoComponent, <span class="attr">data</span>: &#123; <span class="attr">titel</span>: <span class="string">&#x27;歌曲详情&#x27;</span> &#125;, <span class="attr">resolve</span>: &#123; <span class="attr">songInfo</span>: SongInfoResolverService &#125; &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [RouterModule.forChild(routes)],</span><br><span class="line">    <span class="built_in">exports</span>: [RouterModule],</span><br><span class="line">    providers: [SongInfoResolverService]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>在路由守卫中就有些不一样了，因为获取歌曲详情的API中并没有歌曲的歌词，所以守卫中就需要同时获得选中歌曲的信息以及选中歌曲的歌词</p>
<ul>
<li><p>song-info-resolver.service.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>( private songeServe: SongService ) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  resolve (route: ActivatedRouteSnapshot): Observable&lt;SongDataModel&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> id = route.paramMap.get(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> forkJoin([</span><br><span class="line">          <span class="built_in">this</span>.songeServe.getSongDetail(id),</span><br><span class="line">          <span class="built_in">this</span>.songeServe.getLyric(<span class="built_in">Number</span>(id))</span><br><span class="line">      ]).pipe(first())</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>sing-info.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;song-info wrap feature-wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;g-wrap6&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;m-info clearfix&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> [<span class="attr">src</span>]=<span class="string">&quot;song.al.picUrl&quot;</span> [<span class="attr">alt</span>]=<span class="string">&quot;song.name&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cnt&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cntc&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hd clearfix&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;f-pr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tit&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;f-ff2 f-brk&quot;</span>&gt;</span>&#123;&#123;song.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user f-cb&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;singers clearfix&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>歌手：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let singer of song.ar; last as isLast&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#x27;/singer&#x27;, singer.id]&quot;</span>&gt;</span>&#123;&#123;singer.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> [<span class="attr">hidden</span>]=<span class="string">&quot;isLast&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;al&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>所属专辑：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;al-name&quot;</span>&gt;</span>&#123;&#123;song.al.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btns&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">nz-button-group</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;play&quot;</span> <span class="attr">nz-button</span> <span class="attr">nzType</span>=<span class="string">&quot;primary&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;onAddSong(song,true)&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">nz-icon</span> <span class="attr">nzType</span>=<span class="string">&quot;play-circle&quot;</span> <span class="attr">nzTheme</span>=<span class="string">&quot;outline&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>播放</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;add&quot;</span> <span class="attr">nz-button</span> <span class="attr">nzType</span>=<span class="string">&quot;primary&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;onAddSong(song)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">nz-button-group</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn like&quot;</span> <span class="attr">nz-button</span> <span class="attr">nzType</span>=<span class="string">&quot;primary&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>收藏<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn share&quot;</span> <span class="attr">nz-button</span> <span class="attr">nzType</span>=<span class="string">&quot;primary&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>分享<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lyric-info f-brk&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lyric-content&quot;</span> [<span class="attr">class.expand</span>]=<span class="string">&quot;controlLyric.isExpand&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lyric-line&quot;</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of lyric&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;item.txt&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;item.txtCn&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle-expand&quot;</span>  (<span class="attr">click</span>)=<span class="string">&quot;toggleLyric()&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;controlLyric.label&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">i</span> <span class="attr">nz-icon</span> [<span class="attr">nzType</span>]=<span class="string">&quot;controlLyric.iconCls&quot;</span> <span class="attr">nzTheme</span>=<span class="string">&quot;outline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>sing-info.component.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 动态展开</span></span><br><span class="line">   controlLyric = &#123;</span><br><span class="line">       isExpand: <span class="literal">false</span>,</span><br><span class="line">       label: <span class="string">&#x27;展开&#x27;</span>,</span><br><span class="line">       iconCls: <span class="string">&#x27;down&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   song: Song;</span><br><span class="line">   lyric: BaseLyricLine[];</span><br><span class="line"></span><br><span class="line">   currentSong: Song;</span><br><span class="line"></span><br><span class="line">   private destroy$ = <span class="keyword">new</span> Subject&lt;<span class="keyword">void</span>&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">constructor</span>(</span><br><span class="line">       private route: ActivatedRoute,</span><br><span class="line">       private store$: Store&lt;AppStoreModule&gt;,</span><br><span class="line">       private songServe: SongService,</span><br><span class="line">       private message: NzMessageService,</span><br><span class="line">       private batchActionServe: BatchActionsService,</span><br><span class="line">   ) &#123; &#125;</span><br><span class="line"></span><br><span class="line">   ngOnInit () &#123;</span><br><span class="line">       <span class="built_in">this</span>.route.data.pipe(map(<span class="function"><span class="params">res</span> =&gt;</span> res.songInfo)).subscribe(<span class="function">(<span class="params">[song, lyric]</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.song = song;</span><br><span class="line">           <span class="built_in">this</span>.lyric = <span class="keyword">new</span> WyLyric(lyric).lines;</span><br><span class="line">           <span class="built_in">this</span>.listenCurrent();</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听当前歌曲变化，当页面销毁时解绑</span></span><br><span class="line">   listenCurrent () &#123;</span><br><span class="line">       <span class="built_in">this</span>.store$.pipe(select(getPlayer), select(getCurrentSong), takeUntil(<span class="built_in">this</span>.destroy$)).subscribe(<span class="function"><span class="params">song</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.currentSong = song;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展开/折叠</span></span><br><span class="line">   toggleLyric () &#123;</span><br><span class="line">       <span class="built_in">this</span>.controlLyric.isExpand = !<span class="built_in">this</span>.controlLyric.isExpand;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.controlLyric.isExpand) &#123;</span><br><span class="line">           <span class="built_in">this</span>.controlLyric.label = <span class="string">&#x27;收起&#x27;</span>;</span><br><span class="line">           <span class="built_in">this</span>.controlLyric.iconCls = <span class="string">&#x27;up&#x27;</span></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.controlLyric.label = <span class="string">&#x27;展开&#x27;</span>;</span><br><span class="line">           <span class="built_in">this</span>.controlLyric.iconCls = <span class="string">&#x27;down&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加/播放歌曲</span></span><br><span class="line">   onAddSong (song: Song, isPlay = <span class="literal">false</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (!<span class="built_in">this</span>.currentSong || <span class="built_in">this</span>.currentSong.id !== song.id) &#123;</span><br><span class="line">           <span class="built_in">this</span>.songServe.getSongList(song).subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (res.length) &#123;</span><br><span class="line">                   <span class="built_in">this</span>.batchActionServe.insertSong(res[<span class="number">0</span>], isPlay);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="built_in">this</span>.message.error(<span class="string">&#x27;NO URL&#x27;</span>)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ngOnDestroy (): <span class="keyword">void</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.destroy$.next();</span><br><span class="line">       <span class="built_in">this</span>.destroy$.complete();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>逻辑几乎与歌单列表一致，所以这个模块的难度在css样式上！</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--21、歌单列表功能</title>
    <url>/posts/b2759e10/</url>
    <content><![CDATA[<h1 id="歌单"><a href="#歌单" class="headerlink" title="歌单"></a>歌单</h1><p>歌单的主要功能在列表中直接播放和添加歌曲到当前播放列表中以及收藏和分享，但收藏和分享目前是着手于会员功能，暂放，其余都是展示信息。<br><img data-src="https://img-blog.csdnimg.cn/2021010816363365.png"><br><img data-src="https://img-blog.csdnimg.cn/20210108163650641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"></p>
<p>添加歌单时存在不同的功能，歌单信息中的 ==+== 是添加整个歌单，歌曲列表中的则是仅添加当前选中的。而且歌单信息中的播放不仅要添加还要播放当前歌单，歌曲列表中的播放图标仅播放当前选中的歌曲。</p>
<hr>
<h2 id="歌曲列表"><a href="#歌曲列表" class="headerlink" title="歌曲列表"></a>歌曲列表</h2><ul>
<li><p>sheet-info.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of basicTable.data; index as i&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;first-col&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;i + 1&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ico play-song&quot;</span> [<span class="attr">class.current</span>]=<span class="string">&quot;currentIndex === i&quot;</span> <span class="attr">title</span>=<span class="string">&quot;播放&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;onAddSong(item,true)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;song-name&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">a</span>&gt;</span> &#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;time-col&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.dt / 1000 | formatTime&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;icons&quot;</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ico add&quot;</span> <span class="attr">title</span>=<span class="string">&quot;添加&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;onAddSong(item)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ico like&quot;</span> <span class="attr">title</span>=<span class="string">&quot;收藏&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ico share&quot;</span> <span class="attr">title</span>=<span class="string">&quot;分享&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let singer of item.ar; last as isLast&quot;</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123;&#123;singer.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span> [<span class="attr">hidden</span>]=<span class="string">&quot;isLast&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.al.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看出，添加和播放用同样的回调，根据传参的不通来决定后续的流程，这样可以增加方法的复用性。</p>
</li>
<li><p>sheet-info.component.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   sheetInfo: SongSheet; <span class="comment">// 歌单列表</span></span><br><span class="line">   currentSong: Song; <span class="comment">// 当前歌曲</span></span><br><span class="line">   currentIndex = <span class="number">-1</span>; <span class="comment">// 当前歌曲索引</span></span><br><span class="line">   private destroy$ = <span class="keyword">new</span> Subject&lt;<span class="keyword">void</span>&gt;(); <span class="comment">// 发射流</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">constructor</span>(</span><br><span class="line">       private route: ActivatedRoute,</span><br><span class="line">       private store$: Store&lt;AppStoreModule&gt;,</span><br><span class="line">       private barchActionServe: BatchActionsService</span><br><span class="line">   ) &#123; &#125;</span><br><span class="line"></span><br><span class="line">   ngOnInit () &#123;</span><br><span class="line">       <span class="built_in">this</span>.route.data.pipe(map(<span class="function"><span class="params">res</span> =&gt;</span> res.sheetInfo)).subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.sheetInfo = res;</span><br><span class="line">           <span class="keyword">if</span> (res.description) &#123;</span><br><span class="line">               <span class="built_in">this</span>.changeDesc(res.description)</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="built_in">this</span>.listenCurrent();</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 监听当前歌曲</span></span><br><span class="line">   private listenCurrent () &#123;</span><br><span class="line">       <span class="built_in">this</span>.store$.pipe(select(getPlayer), select(getCurrentSong), takeUntil(<span class="built_in">this</span>.destroy$)).subscribe(<span class="function"><span class="params">song</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.currentSong = song;</span><br><span class="line">           <span class="keyword">if</span> (song) &#123;</span><br><span class="line">               <span class="built_in">this</span>.currentIndex = findIndex(<span class="built_in">this</span>.sheetInfo.tracks, song);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="built_in">this</span>.currentIndex = <span class="number">-1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 添加一首歌曲</span></span><br><span class="line">   onAddSong (song: Song, isPlay = <span class="literal">false</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (!<span class="built_in">this</span>.currentSong || <span class="built_in">this</span>.currentSong.id !== song.id) &#123;</span><br><span class="line">           <span class="built_in">this</span>.barchActionServe.insertSong(song, isPlay);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加歌单</span></span><br><span class="line">   onAddSongs (songs: Song[], isPlay = <span class="literal">false</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (songs.length) &#123;</span><br><span class="line">           <span class="keyword">if</span> (isPlay) &#123;</span><br><span class="line">               <span class="built_in">this</span>.barchActionServe.selectPlayList(&#123; <span class="attr">list</span>: songs, <span class="attr">index</span>: <span class="number">0</span> &#125;)</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="built_in">this</span>.barchActionServe.insertSongs(<span class="built_in">this</span>.sheetInfo.tracks);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ngOnDestroy (): <span class="keyword">void</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.destroy$.next();</span><br><span class="line">       <span class="built_in">this</span>.destroy$.complete();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在初始化页面处理歌单信息后会使用Store来监听当前歌曲的变化直到页面销毁时解绑。当点击了添加时，首先判断当前歌曲是否存在或者当前歌曲的ID与选中歌曲的ID是否相同，不相同则会将选中的歌曲封装的批量处理歌曲类来向当前播放列表和歌单列表中添加选中的歌曲。</p>
</li>
<li><p>batch-actions.service.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加歌曲</span></span><br><span class="line">insertSong (song: Song, <span class="attr">isPlay</span>: boolean) &#123;</span><br><span class="line">    <span class="keyword">const</span> songList = <span class="built_in">this</span>.playState.songList.slice();</span><br><span class="line">    <span class="keyword">const</span> playList = <span class="built_in">this</span>.playState.playList.slice();</span><br><span class="line">    <span class="keyword">let</span> insertIndex = <span class="built_in">this</span>.playState.currentIndex;</span><br><span class="line">    <span class="keyword">const</span> pIndex = findIndex(playList, song);</span><br><span class="line">    <span class="keyword">if</span> (pIndex &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">// 歌曲已经存在</span></span><br><span class="line">        <span class="keyword">if</span> (isPlay) &#123;</span><br><span class="line">            insertIndex = pIndex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        songList.push(song);</span><br><span class="line">        playList.push(song);</span><br><span class="line">        <span class="keyword">if</span> (isPlay) &#123;</span><br><span class="line">            insertIndex = songList.length - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetSongList(&#123; songList &#125;));</span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetPlayList(&#123; playList &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (insertIndex !== <span class="built_in">this</span>.playState.currentIndex) &#123;</span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetCurrentIndex(&#123; <span class="attr">currentIndex</span>: insertIndex &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果点了列表中播放图标，则会多传递一个isPlay来判断当前选中的歌曲是否播放。如果选中的歌曲不在当前列表中，则会更新当前歌曲索引并将索引值传递过去，从而直接播放选中歌曲。</p>
</li>
</ul>
<hr>
<h2 id="歌单详情"><a href="#歌单详情" class="headerlink" title="歌单详情"></a>歌单详情</h2><p>歌单详情部分的播放和添加就是以歌单为单位进行处理。</p>
<ul>
<li>sheet-info.component.html<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;nz-button-group <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn&quot;</span>&gt;</span><br><span class="line">	&lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;play&quot;</span> nz-button nzType=<span class="string">&quot;primary&quot;</span> (click)=<span class="string">&quot;onAddSongs(sheetInfo.tracks, true)&quot;</span>&gt;</span><br><span class="line">    	&lt;i nz-icon nzType=<span class="string">&quot;play-circle&quot;</span> nzTheme=<span class="string">&quot;outline&quot;</span>&gt;&lt;/i&gt;播放</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;add&quot;</span> nz-button nzType=<span class="string">&quot;primary&quot;</span> (click)=<span class="string">&quot;onAddSongs(sheetInfo.tracks)&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">&lt;/nz-button-group&gt;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>sheet-info.component.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加歌单</span></span><br><span class="line"> onAddSongs (songs: Song[], isPlay = <span class="literal">false</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (songs.length) &#123;</span><br><span class="line">           <span class="keyword">if</span> (isPlay) &#123;</span><br><span class="line">               <span class="built_in">this</span>.barchActionServe.selectPlayList(&#123; <span class="attr">list</span>: songs, <span class="attr">index</span>: <span class="number">0</span> &#125;)</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="built_in">this</span>.barchActionServe.insertSongs(<span class="built_in">this</span>.sheetInfo.tracks);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>batch-action.service.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  添加歌单</span></span><br><span class="line"> insertSongs (songs: Song[]) &#123;</span><br><span class="line">       <span class="keyword">const</span> songList = <span class="built_in">this</span>.playState.songList.slice();</span><br><span class="line">       <span class="keyword">const</span> playList = <span class="built_in">this</span>.playState.playList.slice();</span><br><span class="line">       songs.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">const</span> pIndex = findIndex(playList, item);</span><br><span class="line">           <span class="keyword">if</span> (pIndex === <span class="number">-1</span>) &#123;</span><br><span class="line">               songList.push(item)</span><br><span class="line">               playList.push(item)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="built_in">this</span>.store$.dispatch(SetSongList(&#123; songList &#125;));</span><br><span class="line">       <span class="built_in">this</span>.store$.dispatch(SetPlayList(&#123; playList &#125;));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>同歌单列表中的处理一样，都是选择复用回调，而实参的变化也仅是歌单和歌曲。</p>
</li>
</ul>
<hr>
<p>关于之前修改的获取完整信息的API，总是出现实际的歌单列表与获取渲染的歌曲列表不相符的问题，我想应该找到了。在拼接URL这一环节中，会将ID相对应的歌曲进行拼接，而有的歌曲是没有URL的，估计是和版权受限有关，所以在迭代列表的时候就会将一些没有URL的歌曲给筛选掉了。这个歌曲列表的数据能够完成目前的调试，为了追进度，所以现在选择暂时不去理会这个bug，再挖一个坑！！！！！！！！！！！！</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--20、歌单详情</title>
    <url>/posts/7c02564b/</url>
    <content><![CDATA[<h1 id="歌单详情"><a href="#歌单详情" class="headerlink" title="歌单详情"></a>歌单详情</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>在首页和歌单列表页，点击歌单图片能够查看当前歌单的详细信息，包括歌单内的歌曲</p>
<h2 id="创建新模块"><a href="#创建新模块" class="headerlink" title="创建新模块"></a>创建新模块</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ng g m sheet-info --routing</span><br><span class="line">ng g c sheet-info</span><br></pre></td></tr></table></figure>
<p>api接口是之前就写好的，所以api不会有什么变化，但是需要使用路由守卫来拦截数据。</p>
<ul>
<li><p>sheet.service.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取歌单详情</span></span><br><span class="line">   getSongSheetDetail (id: number): Observable&lt;SongSheet&gt; &#123;</span><br><span class="line">       <span class="keyword">const</span> params = <span class="keyword">new</span> HttpParams().set(<span class="string">&#x27;id&#x27;</span>, id.toString());</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="built_in">this</span>.url + <span class="string">&quot;playlist/detail&quot;</span>, &#123; params &#125;)</span><br><span class="line">           .pipe(map(<span class="function">(<span class="params">res: &#123; playlist: SongSheet &#125;</span>) =&gt;</span> res.playlist));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>sheet-info-resolver.service.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SheetInfoResolverService <span class="keyword">implements</span> Resolve&lt;SongSheet&gt;&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> sheetServer: SheetService</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    resolve (route: ActivatedRouteSnapshot): Observable&lt;SongSheet&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.sheetServer.getSongSheetDetail(<span class="built_in">Number</span>(route.paramMap.get(<span class="string">&#x27;id&#x27;</span>)))</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在跳转到歌单详情页面时会先通过路由守卫，守卫此时会调取api获得歌单的信息，组件就能直接使用守卫的返回值，所以在路由配置的时候就要把守卫配进去</p>
</li>
</ul>
<hr>
<ul>
<li><p>sheet-info-routing.moduel.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;sheetInfo/:id&#x27;</span>, <span class="attr">component</span>: SheetInfoComponent, <span class="attr">data</span>: &#123; <span class="attr">titel</span>: <span class="string">&#x27;歌单详情&#x27;</span> &#125;, <span class="attr">resolve</span>: &#123; <span class="attr">sheetInfo</span>: SheetInfoResolverService &#125; &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<hr>
</li>
<li><p>sheet-info.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sheet-info wrap feature-wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;g-wrap6&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 头部歌单信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;m-info clearfix&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> [<span class="attr">src</span>]=<span class="string">&quot;sheetInfo.coverImgUrl&quot;</span> [<span class="attr">alt</span>]=<span class="string">&quot;sheetInfo.name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cnt&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cntc&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hd clearfix&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;f-pr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tit&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;f-ff2&quot;</span>&gt;</span>&#123;&#123;sheetInfo.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user f-cb&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;face&quot;</span> [<span class="attr">hidden</span>]=<span class="string">&quot;!sheetInfo.creator&quot;</span> [<span class="attr">href</span>]=<span class="string">&quot;&#x27;//music.163.com/artist?id=&#x27; + sheetInfo.userId&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">img</span> [<span class="attr">src</span>]=<span class="string">&quot;sheetInfo.creator?.avatarUrl&quot;</span> [<span class="attr">alt</span>]=<span class="string">&quot;sheetInfo.creator?.nickname&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> [<span class="attr">href</span>]=<span class="string">&quot;&#x27;//music.163.com/artist?id=&#x27; + sheetInfo.userId&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;s-fc7&quot;</span>&gt;</span>&#123;&#123;sheetInfo.creator?.nickname&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;time s-fc4&quot;</span>&gt;</span>&#123;&#123;sheetInfo.createTime | date: &#x27;yyyy-MM-dd&#x27;&#125;&#125;创建<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btns&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nz-button-group</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;play&quot;</span> <span class="attr">nz-button</span> <span class="attr">nzType</span>=<span class="string">&quot;primary&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">nz-icon</span> <span class="attr">nzType</span>=<span class="string">&quot;play-circle&quot;</span> <span class="attr">nzTheme</span>=<span class="string">&quot;outline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>播放</span><br><span class="line">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;add&quot;</span> <span class="attr">nz-button</span> <span class="attr">nzType</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">nz-button-group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn like&quot;</span> <span class="attr">nz-button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>收藏<span class="tag">&lt;/<span class="name">span</span>&gt;</span>(&#123;&#123;sheetInfo.subscribedCount&#125;&#125;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn share&quot;</span> <span class="attr">nz-button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>分享<span class="tag">&lt;/<span class="name">span</span>&gt;</span>(&#123;&#123;sheetInfo.shareCount&#125;&#125;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tags clearfix&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tag-wrap&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">nz-tag</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of sheetInfo.tags&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">nz-tag</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;intr f-brk&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngIf</span>=<span class="string">&quot;controlDesc.isExpand&quot;</span> [<span class="attr">innerHTML</span>]=<span class="string">&quot;description.long&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngIf</span>=<span class="string">&quot;!controlDesc.isExpand&quot;</span> [<span class="attr">innerHTML</span>]=<span class="string">&quot;description.short&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;expand&quot;</span> *<span class="attr">ngIf</span>=<span class="string">&quot;description.long&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;toggleDesc()&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;controlDesc.label&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">nz-icon</span> [<span class="attr">nzType</span>]=<span class="string">&quot;controlDesc.iconCls&quot;</span> <span class="attr">nzTheme</span>=<span class="string">&quot;outline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 歌单列表信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wy-sec&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;u-title wy-sec-wrap clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;wy-sec-tit&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;f-ff2&quot;</span>&gt;</span>歌曲列表<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sub s-fc3&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123;sheetInfo.tracks.length&#125;&#125;首歌</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;more s-fc3&quot;</span>&gt;</span></span><br><span class="line">          播放：</span><br><span class="line">          <span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">&quot;s-fc6&quot;</span>&gt;</span>&#123;&#123;sheetInfo.playCount&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">          次</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 表格信息 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nz-table</span> <span class="attr">class</span>=<span class="string">&quot;wy-table&quot;</span> #<span class="attr">basicTable</span> [<span class="attr">nzData</span>]=<span class="string">&quot;sheetInfo.tracks&quot;</span> [<span class="attr">nzFrontPagination</span>]=<span class="string">&quot;false&quot;</span> <span class="attr">nzBordered</span></span></span><br><span class="line"><span class="tag">        <span class="attr">nzNoResult</span>=<span class="string">&quot;暂无音乐!&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span> <span class="attr">nzWidth</span>=<span class="string">&quot;80px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span> <span class="attr">nzWidth</span>=<span class="string">&quot;120px&quot;</span>&gt;</span>时长<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span> <span class="attr">nzWidth</span>=<span class="string">&quot;80px&quot;</span>&gt;</span>歌手<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span>专辑<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of basicTable.data; index as i&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;first-col&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;i + 1&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ico play-song&quot;</span> <span class="attr">title</span>=<span class="string">&quot;播放&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;song-name&quot;</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">a</span>&gt;</span> &#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;time-col&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.dt / 1000 | formatTime&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;icons&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ico add&quot;</span> <span class="attr">title</span>=<span class="string">&quot;添加&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ico like&quot;</span> <span class="attr">title</span>=<span class="string">&quot;收藏&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ico share&quot;</span> <span class="attr">title</span>=<span class="string">&quot;分享&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let singer of item.ar; last as isLast&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123;&#123;singer.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">em</span> [<span class="attr">hidden</span>]=<span class="string">&quot;isLast&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                  &#123;&#123;item.al.name&#125;&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">nz-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>sheet-info.component.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sheetInfo: SongSheet; <span class="comment">// 歌单列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 歌单描述</span></span><br><span class="line">description = &#123;</span><br><span class="line">    short: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    long: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态展开</span></span><br><span class="line">controlDesc = &#123;</span><br><span class="line">    isExpand: <span class="literal">false</span>,</span><br><span class="line">    label: <span class="string">&#x27;展开&#x27;</span>,</span><br><span class="line">    iconCls: <span class="string">&#x27;down&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constructor</span>( private route: ActivatedRoute) &#123; &#125;</span><br><span class="line"></span><br><span class="line">ngOnInit () &#123;</span><br><span class="line">    <span class="built_in">this</span>.route.data.pipe(map(<span class="function"><span class="params">res</span> =&gt;</span> res.sheetInfo)).subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sheetInfo = res;</span><br><span class="line">        <span class="keyword">if</span> (res.description) &#123;</span><br><span class="line">            <span class="built_in">this</span>.changeDesc(res.description)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理歌单描述</span></span><br><span class="line">private changeDesc (desc: string) &#123;</span><br><span class="line">    <span class="keyword">if</span> (desc.length &lt; <span class="number">99</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = &#123;</span><br><span class="line">            short: <span class="built_in">this</span>.replaceBr(<span class="string">&#x27;&lt;b&gt;介绍： &lt;/b&gt;&#x27;</span> + desc),</span><br><span class="line">            long: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = &#123;</span><br><span class="line">            short: <span class="built_in">this</span>.replaceBr(<span class="string">&#x27;&lt;b&gt;介绍： &lt;/b&gt;&#x27;</span> + desc.slice(<span class="number">0</span>, <span class="number">99</span>)) + <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">            long: <span class="built_in">this</span>.replaceBr(<span class="string">&#x27;&lt;b&gt;介绍： &lt;/b&gt;&#x27;</span> + desc)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换换行符</span></span><br><span class="line">private replaceBr (str: string): string &#123;</span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/\n/g</span>, <span class="string">&#x27;&lt;br /&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展开折叠</span></span><br><span class="line">toggleDesc () &#123;</span><br><span class="line">    <span class="built_in">this</span>.controlDesc.isExpand = !<span class="built_in">this</span>.controlDesc.isExpand;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.controlDesc.isExpand) &#123;</span><br><span class="line">        <span class="built_in">this</span>.controlDesc.label = <span class="string">&#x27;收起&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.controlDesc.iconCls = <span class="string">&#x27;up&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.controlDesc.label = <span class="string">&#x27;展开&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.controlDesc.iconCls = <span class="string">&#x27;down&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
点击列表图片，将会获取到歌单的ID，此时在跳向详情页之前通过路由守卫得到当前歌单的信息，之后再将直观的信息渲染到页面。</li>
</ul>
<p>在歌单描述的字段上，关于展开折叠的数据显示并是使用ngIf指令来动态显示。</p>
<hr>
<p>我以为获取歌单信息不用改，看了返回数据后才发现之前用的也是改后的，所以使用视频里边的数据是不行的，tracks是不够的，仅有三条，所以还是要用trackIDs来获取所有的数据然后在用。</p>
<ul>
<li><p>sheet,service.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 临时更改数据源（获取歌单详情）</span></span><br><span class="line">  <span class="keyword">async</span> getSongSheetDetail2 (id: number) &#123;</span><br><span class="line">      <span class="keyword">const</span> tempSheet = <span class="built_in">this</span>.getSongSheetDetail(id).toPromise();</span><br><span class="line">      <span class="keyword">const</span> tempTracks = <span class="built_in">this</span>.playSheet(id).toPromise();</span><br><span class="line">      (<span class="keyword">await</span> tempSheet).tracks = (<span class="keyword">await</span> tempTracks);</span><br><span class="line">      <span class="keyword">return</span> tempSheet;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>sheet-info-resolver.server.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(</span><br><span class="line">       private sheetServer: SheetService,</span><br><span class="line">   ) &#123; &#125;</span><br><span class="line"></span><br><span class="line">   resolve (route: ActivatedRouteSnapshot) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.sheetServer.getSongSheetDetail2(<span class="built_in">Number</span>(route.paramMap.get(<span class="string">&#x27;id&#x27;</span>)))</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p><img data-src="https://img-blog.csdnimg.cn/20210107171000374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"></p>
<p>写的有问题，数据还是拿不全，trackids内的数据和渲染的数据是不对的，这个问题之前就有，一直搞不明白为什么，这个promise的用法估计也是错的，但是照目前的接口来用的话，数据是可以达到正常的分页量的，这个坑我能挖穿！！</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--19、歌单列表</title>
    <url>/posts/9df84b40/</url>
    <content><![CDATA[<h1 id="系列文章目录"><a href="#系列文章目录" class="headerlink" title="系列文章目录"></a>系列文章目录</h1><p>点击热门推荐部分，根据歌单标签去进入相应的歌单列表页。<br><img data-src="https://img-blog.csdnimg.cn/20210106185507464.png"><br>在pages目录下新建歌单列表模块</p>
<blockquote>
<p>ng g m sheet-list –routing<br>ng g c sheet-list</p>
</blockquote>
<ul>
<li>sheet.service.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 歌单参数类型</span></span><br><span class="line"><span class="keyword">export</span> type SheetParams = &#123;</span><br><span class="line">    offset: number, <span class="comment">// 偏移数量 , 用于分页 , 如 :( 评论页数 -1)*50, 其中 50 为 limit 的值</span></span><br><span class="line">    limit: number, <span class="comment">// 取出歌单数量 </span></span><br><span class="line">    order: <span class="string">&#x27;new&#x27;</span> | <span class="string">&#x27;hot&#x27;</span>, <span class="comment">// 最新和最热</span></span><br><span class="line">    cat: string, <span class="comment">// 歌单标签</span></span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">// 获取歌单列表</span></span><br><span class="line">    getSheets (args: SheetParams): Observable&lt;SheetList&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> params = <span class="keyword">new</span> HttpParams(&#123; <span class="attr">fromString</span>: queryString.stringify(args) &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="built_in">this</span>.url + <span class="string">&#x27;top/playList&#x27;</span>, &#123; params &#125;).pipe(map(<span class="function"><span class="params">res</span> =&gt;</span> res <span class="keyword">as</span> SheetList))</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>common.types.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 歌单列表</span></span><br><span class="line"><span class="keyword">export</span> type SheetList = &#123;</span><br><span class="line">    playlists: SongSheet[],</span><br><span class="line">    total: number,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>sheet-list.component.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sheet warp feature-warp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-r&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cat&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;listParams.cat&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nz-radio-group</span> <span class="attr">nzButtonStyle</span>=<span class="string">&quot;solid&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;orderValue&quot;</span> (<span class="attr">ngModelChange</span>)=<span class="string">&quot;onOrderChange($event)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">nz-radio-button</span> <span class="attr">nzValue</span>=<span class="string">&quot;hot&quot;</span>&gt;</span>热门<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">nz-radio-button</span> <span class="attr">nzValue</span>=<span class="string">&quot;new&quot;</span>&gt;</span>最新<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">nz-radio-group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">app-single-sheet</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;sheet-item&quot;</span></span></span><br><span class="line"><span class="tag">                *<span class="attr">ngFor</span>=<span class="string">&quot;let item of sheets?.playlists&quot;</span></span></span><br><span class="line"><span class="tag">                [<span class="attr">sheet</span>]=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">                (<span class="attr">onPlay</span>)=<span class="string">&quot;onPlaySheet($event);&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">app-single-sheet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 分页 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-pagination</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span></span></span><br><span class="line"><span class="tag">            [<span class="attr">nzPageIndex</span>]=<span class="string">&quot;listParams.offset&quot;</span></span></span><br><span class="line"><span class="tag">            [<span class="attr">nzPageSize</span>]=<span class="string">&quot;listParams.limit&quot;</span></span></span><br><span class="line"><span class="tag">            [<span class="attr">nzTotal</span>]=<span class="string">&quot;sheets?.total&quot;</span></span></span><br><span class="line"><span class="tag">            (<span class="attr">nzPageIndexChange</span>)=<span class="string">&quot;onPageChange($event)&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-pagination</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
其中使用了 <strong><a href="https://ng-zorro.gitee.io/components/overview/zh">ng-zorro</a></strong> 组件库中的单选按钮组和分页器。</li>
</ul>
<hr>
<ul>
<li>sheet-list.component.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取歌单的参数</span></span><br><span class="line">   listParams: SheetParams = &#123;</span><br><span class="line">       cat: <span class="string">&#x27;全部&#x27;</span>,</span><br><span class="line">       order: <span class="string">&#x27;hot&#x27;</span>,</span><br><span class="line">       offset: <span class="number">1</span>,</span><br><span class="line">       limit: <span class="number">15</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   sheets: SheetList; <span class="comment">// 歌单列表</span></span><br><span class="line">   orderValue = <span class="string">&#x27;hot&#x27;</span>; <span class="comment">// 歌单标签</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">constructor</span>(</span><br><span class="line">       private route: ActivatedRoute,</span><br><span class="line">       private SheetServe: SheetService,</span><br><span class="line">       private batchActionsServe: BatchActionsService</span><br><span class="line">   ) &#123; &#125;</span><br><span class="line"></span><br><span class="line">   ngOnInit () &#123;</span><br><span class="line">   	<span class="comment">// 通过路由获取参数</span></span><br><span class="line">       <span class="built_in">this</span>.listParams.cat = <span class="built_in">this</span>.route.snapshot.queryParamMap.get(<span class="string">&#x27;cat&#x27;</span>) || <span class="string">&#x27;全部&#x27;</span>;</span><br><span class="line">       <span class="built_in">this</span>.getList();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取歌单列表</span></span><br><span class="line">   private getList () &#123;</span><br><span class="line">       <span class="built_in">this</span>.SheetServe.getSheets(<span class="built_in">this</span>.listParams).subscribe(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">this</span>.sheets = res);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 播放</span></span><br><span class="line">   onPlaySheet (id: number) &#123;</span><br><span class="line">       <span class="built_in">this</span>.SheetServe.playSheet(id).subscribe(<span class="function"><span class="params">list</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.batchActionsServe.selectPlayList(&#123; list, <span class="attr">index</span>: <span class="number">0</span> &#125;)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 更改最新和最热</span></span><br><span class="line">   onOrderChange (order: <span class="string">&#x27;new&#x27;</span> | <span class="string">&#x27;hot&#x27;</span>) &#123;</span><br><span class="line">       <span class="built_in">this</span>.listParams.order = order;</span><br><span class="line">       <span class="built_in">this</span>.listParams.offset = <span class="number">1</span>;</span><br><span class="line">       <span class="built_in">this</span>.getList();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 分页</span></span><br><span class="line">   onPageChange (offset: number) &#123;</span><br><span class="line">       <span class="built_in">this</span>.listParams.offset = offset;</span><br><span class="line">       <span class="built_in">this</span>.getList();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<img data-src="https://img-blog.csdnimg.cn/20210106191507571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"></li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这一部分倒是很简单，使用了组件库就可以用组件库中的各个API，倒是很方便。这一节也涉及到了传参的知识点，也是总结一下比较好。</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--18、面板优化</title>
    <url>/posts/380c5f41/</url>
    <content><![CDATA[<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="封装Actions"><a href="#封装Actions" class="headerlink" title="封装Actions"></a>封装Actions</h2><blockquote>
<p>将重复使用到的功能封装成单独的类来降低系统的耦合性</p>
</blockquote>
<h3 id="在Store目录下新增服务类"><a href="#在Store目录下新增服务类" class="headerlink" title="在Store目录下新增服务类"></a>在Store目录下新增服务类</h3><ul>
<li>batch-actions.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ng g s batch-actions</span><br></pre></td></tr></table></figure>
<h3 id="注入Store并且订阅动作"><a href="#注入Store并且订阅动作" class="headerlink" title="注入Store并且订阅动作"></a>注入Store并且订阅动作</h3></li>
<li>batch-actions.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">private playState: PlayState;</span><br><span class="line">  <span class="keyword">constructor</span>(</span><br><span class="line">      private store$: Store&lt;AppStoreModule&gt;,</span><br><span class="line">  ) &#123;</span><br><span class="line">      <span class="built_in">this</span>.store$.pipe(select(getPlayer)).subscribe(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">this</span>.playState = res)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="添加回调"><a href="#添加回调" class="headerlink" title="添加回调"></a>添加回调</h3><ul>
<li>batch-actions.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 播放列表</span></span><br><span class="line">   selectPlayList (&#123; list, index &#125;: &#123; <span class="attr">list</span>: Song[], <span class="attr">index</span>: number &#125;) &#123;</span><br><span class="line">       <span class="built_in">this</span>.store$.dispatch(SetSongList(&#123; <span class="attr">songList</span>: list &#125;));</span><br><span class="line">       <span class="keyword">let</span> trueIndex = index;</span><br><span class="line">       <span class="keyword">let</span> trueList = list.slice();</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.playState.playMode.type === <span class="string">&quot;random&quot;</span>) &#123;</span><br><span class="line">           trueList = shuffle(list || []);</span><br><span class="line">           trueIndex = findIndex(trueList, list[trueIndex]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">this</span>.store$.dispatch(SetPlayList(&#123; <span class="attr">playList</span>: trueList &#125;));</span><br><span class="line">       <span class="built_in">this</span>.store$.dispatch(SetCurrentIndex(&#123; <span class="attr">currentIndex</span>: trueIndex &#125;));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 删除当前歌曲</span></span><br><span class="line">   deleteSong (song: Song) &#123;</span><br><span class="line">       <span class="keyword">const</span> songList = <span class="built_in">this</span>.playState.songList.slice();</span><br><span class="line">       <span class="keyword">const</span> playList = <span class="built_in">this</span>.playState.playList.slice();</span><br><span class="line">       <span class="keyword">let</span> currentIndex = <span class="built_in">this</span>.playState.currentIndex;</span><br><span class="line">       <span class="keyword">const</span> sIndex = findIndex(songList, song);</span><br><span class="line">       songList.splice(sIndex, <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">const</span> pIndex = findIndex(playList, song);</span><br><span class="line">       playList.splice(pIndex, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (currentIndex &gt; pIndex || currentIndex === playList.length) &#123;</span><br><span class="line">           currentIndex--;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">this</span>.store$.dispatch(SetSongList(&#123; songList &#125;));</span><br><span class="line">       <span class="built_in">this</span>.store$.dispatch(SetPlayList(&#123; playList &#125;));</span><br><span class="line">       <span class="built_in">this</span>.store$.dispatch(SetCurrentIndex(&#123; currentIndex &#125;));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 清空歌曲</span></span><br><span class="line">   clearSong () &#123;</span><br><span class="line">       <span class="built_in">this</span>.store$.dispatch(SetSongList(&#123; <span class="attr">songList</span>: [] &#125;));</span><br><span class="line">       <span class="built_in">this</span>.store$.dispatch(SetPlayList(&#123; <span class="attr">playList</span>: [] &#125;));</span><br><span class="line">       <span class="built_in">this</span>.store$.dispatch(SetCurrentIndex(&#123; <span class="attr">currentIndex</span>: <span class="number">-1</span> &#125;));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="在原来的调用上更改调用方法"><a href="#在原来的调用上更改调用方法" class="headerlink" title="在原来的调用上更改调用方法"></a>在原来的调用上更改调用方法</h3><ul>
<li>home.component.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点击歌单，获取歌单信息</span></span><br><span class="line"> onPlaySheet (id: number) &#123;</span><br><span class="line">     <span class="built_in">this</span>.sheetServe.playSheet(id).subscribe(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.batchActionsServer.selectPlayList(&#123; list, <span class="attr">index</span>: <span class="number">0</span> &#125;);</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li>wy-player.component.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除当前歌曲</span></span><br><span class="line"> onDeleteSong (song: Song) &#123;</span><br><span class="line">     <span class="built_in">this</span>.batchActionsServer.deleteSong(song);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 清空歌曲</span></span><br><span class="line"> onClearSong () &#123;</span><br><span class="line">     <span class="built_in">this</span>.nzModalServer.confirm(&#123;</span><br><span class="line">         nzTitle: <span class="string">&quot;确认清空列表？&quot;</span>,</span><br><span class="line">         nzOnOk: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">             <span class="built_in">this</span>.batchActionsServer.clearSong();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="使用指令更改面板绑定"><a href="#使用指令更改面板绑定" class="headerlink" title="使用指令更改面板绑定"></a>使用指令更改面板绑定</h2><p>将绑定与解绑封装为单独的指令文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ng g d clickoutside</span><br></pre></td></tr></table></figure>

<ul>
<li>wy-player.component.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;m-player&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">appClickoutside</span></span></span><br><span class="line"><span class="tag">     (<span class="attr">onClickOutSide</span>)=<span class="string">&quot;onClickOutSide()&quot;</span></span></span><br><span class="line"><span class="tag">     [<span class="attr">bindFlag</span>]=<span class="string">&quot;bindFlag&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>wy-player.component.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> bindFlag = <span class="literal">false</span>; <span class="comment">//  是否绑定 document click事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击面板外部</span></span><br><span class="line"> onClickOutSide () &#123;</span><br><span class="line">     <span class="built_in">this</span>.showVolumePanel = <span class="literal">false</span>;</span><br><span class="line">     <span class="built_in">this</span>.showPanel = <span class="literal">false</span>;</span><br><span class="line">     <span class="built_in">this</span>.bindFlag = <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 控制音量面板</span></span><br><span class="line"> toggleVolPanel () &#123;</span><br><span class="line">     <span class="built_in">this</span>.togglePanel(<span class="string">&#x27;showVolumePanel&#x27;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 控制列表面板</span></span><br><span class="line"> toggleListPanel () &#123;</span><br><span class="line">     <span class="built_in">this</span>.togglePanel(<span class="string">&#x27;showPanel&#x27;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 面板回调</span></span><br><span class="line"> togglePanel (<span class="keyword">type</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line">     <span class="built_in">this</span>[<span class="keyword">type</span>] = !<span class="built_in">this</span>[<span class="keyword">type</span>];</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">this</span>.showVolumePanel || <span class="built_in">this</span>.showPanel) &#123;</span><br><span class="line">         <span class="built_in">this</span>.bindFlag = <span class="literal">true</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.bindFlag = <span class="literal">false</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<ul>
<li>clickoutside.directive.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DOCUMENT &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output, Renderer2, SimpleChanges &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">    selector: <span class="string">&#x27;[appClickoutside]&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ClickoutsideDirective</span> <span class="title">implements</span> <span class="title">OnChanges</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    private handleClick: <span class="function">() =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">    @Output() onClickOutSide = <span class="keyword">new</span> EventEmitter&lt;<span class="keyword">void</span>&gt;(); <span class="comment">// 发射解绑</span></span><br><span class="line">    @Input() bindFlag = <span class="literal">false</span>; <span class="comment">// 是否需要绑定</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        private el: ElementRef, // dom</span><br><span class="line">        private rd: Renderer2, // DOM渲染器，用来操作DOM</span><br><span class="line">        @Inject(DOCUMENT) private doc: Document</span><br><span class="line">    ) &#123;&#125;</span><br><span class="line">    <span class="comment">// 监听钩子</span></span><br><span class="line">    ngOnChanges (changes: SimpleChanges): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (changes.bindFlag &amp;&amp; !changes.bindFlag.firstChange) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.bindFlag) &#123;</span><br><span class="line">                <span class="built_in">this</span>.handleClick = <span class="built_in">this</span>.rd.listen(<span class="built_in">this</span>.doc, <span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">fun</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> isContain = <span class="built_in">this</span>.el.nativeElement.contains(fun.target)</span><br><span class="line">                    <span class="keyword">if</span> (!isContain) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.onClickOutSide.emit();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.handleClick();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
第一次进入首页之后，点击面板和面板之外的地方不会有任何操作，当点击歌单列表面板和音量面板，此时会触发回调，根据歌单面板和音量面板的显隐来给bindFlag赋值，然后将bindFlag传给指令文件。</li>
</ul>
<p><strong>点击面板按钮触发面板显示之后，bindFlag此时为true，此时使用angular渲染器将为面板DOM添加click事件，判断当前点击的节点是否被面板节点包含，从而决定是否关闭面板并解绑。</strong></p>
<hr>
<blockquote>
<p><a href="https://segmentfault.com/a/1190000010326100">《Angular Renderer (渲染器)》</a></p>
</blockquote>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--17、删除和清空歌曲</title>
    <url>/posts/ad82e9e3/</url>
    <content><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>完善列表面板上的其他功能，实现单条歌曲的删除以及整个列表歌曲的清空。<br><img data-src="https://img-blog.csdnimg.cn/20210104135903254.png"></p>
<hr>
<h2 id="删除列表歌曲"><a href="#删除列表歌曲" class="headerlink" title="删除列表歌曲"></a>删除列表歌曲</h2><p>在点击删除图标时，传递当前点击歌曲，在播放列表中查找并删除，同时有关索引的变化也要考虑进去。</p>
<ul>
<li><p>wy-player-panel.componet.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ico trush&quot;</span> <span class="attr">title</span>=<span class="string">&quot;删除&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;onDeleteSong.emit(item)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>wy-player-panel.componet.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Output</span>() onDeleteSong = <span class="keyword">new</span> EventEmitter&lt;Song&gt;();  <span class="comment">// 删除选中歌曲</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ngOnChanges (changes: SimpleChanges): <span class="built_in">void</span> &#123;</span><br><span class="line">	 <span class="comment">// 监听歌单列表</span></span><br><span class="line">        <span class="keyword">if</span> (changes.songList) &#123;</span><br><span class="line">        	<span class="comment">// 更新当前歌曲索引</span></span><br><span class="line">            <span class="built_in">this</span>.updateCurrentIndex();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 更新当前歌曲索引</span></span><br><span class="line">    <span class="keyword">private</span> updateCurrentIndex () &#123;</span><br><span class="line">        <span class="built_in">this</span>.currentIndex = findIndex(<span class="built_in">this</span>.songList, <span class="built_in">this</span>.currentSong);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>wy-player.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 播放面板 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">app-wy-player-panel</span> </span></span><br><span class="line"><span class="tag">           (<span class="attr">onDeleteSong</span>)=<span class="string">&quot;onDeleteSong($event)&quot;</span></span></span><br><span class="line"><span class="tag">         &gt;</span><span class="tag">&lt;/<span class="name">app-wy-player-panel</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>wy-player.component.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除当前歌曲</span></span><br><span class="line">  onDeleteSong (song: Song) &#123;</span><br><span class="line">      <span class="keyword">const</span> songList = <span class="built_in">this</span>.songList.slice();</span><br><span class="line">      <span class="keyword">const</span> playList = <span class="built_in">this</span>.playList.slice();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> currentIndex = <span class="built_in">this</span>.currentIndex;</span><br><span class="line">      <span class="keyword">const</span> sIndex = findIndex(songList, song);</span><br><span class="line">      songList.splice(sIndex, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">const</span> pIndex = findIndex(playList, song);</span><br><span class="line">      playList.splice(pIndex, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 判断当前索引是否需要改变</span></span><br><span class="line">      <span class="keyword">if</span> (currentIndex &gt; pIndex || currentIndex === playList.length) &#123;</span><br><span class="line">          currentIndex--;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 重新赋值</span></span><br><span class="line">      <span class="built_in">this</span>.store$.dispatch(SetSongList(&#123; songList &#125;));</span><br><span class="line">      <span class="built_in">this</span>.store$.dispatch(SetPlayList(&#123; playList &#125;));</span><br><span class="line">      <span class="built_in">this</span>.store$.dispatch(SetCurrentIndex(&#123; currentIndex &#125;));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>当选中当前歌曲后，面板便会将当前歌曲发送给父组件，父组件通过回调，先寻找当前歌曲在播放列表和歌曲列表中寻找其索引，然后删掉。再删掉之后便会有一个索引值改变的情况： <strong>当删除的歌曲的索引小于当前播放歌曲的索引以及删除最后一首歌的时候便会更新当前歌曲索引减一</strong></p>
<hr>
<h2 id="清空列表"><a href="#清空列表" class="headerlink" title="清空列表"></a>清空列表</h2><p>清空列表操作动作比较大，借助nz模态框做一个再次确认的动作<br><img data-src="https://img-blog.csdnimg.cn/20210104141514247.png"></p>
<ul>
<li><p>wy-player-panel.componet.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear-all&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon trush&quot;</span> <span class="attr">title</span>=<span class="string">&quot;清除全部&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;onClearSong.emit()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>清除全部</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>wy-player-panel.component.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Output</span>() onClearSong = <span class="keyword">new</span> EventEmitter&lt;<span class="built_in">void</span>&gt;()  <span class="comment">// 清空歌曲列表</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>wy-player.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 播放面板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-wy-player-panel</span> </span></span><br><span class="line"><span class="tag">	(<span class="attr">onClearSong</span>)=<span class="string">&quot;onClearSong()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-wy-player-panel</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>wy-player.component.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> nzModalServer: NzModalService;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空歌曲</span></span><br><span class="line">   onClearSong () &#123;</span><br><span class="line">       <span class="built_in">this</span>.nzModalServer.confirm(&#123;</span><br><span class="line">           nzTitle: <span class="string">&quot;确认清空列表？&quot;</span>,</span><br><span class="line">           nzOnOk: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">               <span class="built_in">this</span>.store$.dispatch(SetSongList(&#123; songList: [] &#125;));</span><br><span class="line">               <span class="built_in">this</span>.store$.dispatch(SetPlayList(&#123; playList: [] &#125;));</span><br><span class="line">               <span class="built_in">this</span>.store$.dispatch(SetCurrentIndex(&#123; currentIndex: <span class="number">-1</span> &#125;));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/2021010414241327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"></p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>目前的代码中有很多重复的提交项，可以提取成单独的类，可优化的空间还是很大的。</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--16、歌词滚动</title>
    <url>/posts/e1e87ab0/</url>
    <content><![CDATA[<h1 id="歌词滚动"><a href="#歌词滚动" class="headerlink" title="歌词滚动"></a>歌词滚动</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>在获取到歌词并渲染到面板之后，就要实现歌词和歌曲相对应，在实现歌词的高亮的同时还要实现歌词的滚动状态。</p>
<blockquote>
<ul>
<li>监听当前歌曲的值变化的时候就要实现歌词的变化</li>
<li>拿到歌词之后通过歌词前面的时间戳来判断当前应该显示哪一条歌词</li>
<li>在显示的歌词上加上高亮的效果</li>
</ul>
</blockquote>
<ul>
<li>wy-player-panel.component.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Input</span>() playing: <span class="built_in">boolean</span>; <span class="comment">// 歌曲播放状态</span></span><br><span class="line">   <span class="meta">@ViewChildren</span>(WyScrollComponent) <span class="keyword">private</span> wyScroll: QueryList&lt;WyScrollComponent&gt;  <span class="comment">// 滚动条</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> startLine = <span class="number">2</span>; <span class="comment">// 需要滚动的行数</span></span><br><span class="line"></span><br><span class="line">   currentLyric: BaseLyricLine[]; <span class="comment">// 当前歌词</span></span><br><span class="line">   currentLineNum: <span class="built_in">number</span>; <span class="comment">// 当前歌词行数</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> lyric: WyLyric; <span class="comment">// 更改的歌词</span></span><br><span class="line">   <span class="keyword">private</span> lyricRefs: NodeList; <span class="comment">// 歌词节点集合</span></span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">       <span class="keyword">private</span> songServe: SongService,</span></span><br><span class="line"><span class="params">   </span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 数据监听</span></span><br><span class="line">   ngOnChanges (changes: SimpleChanges): <span class="built_in">void</span> &#123;</span><br><span class="line">       <span class="comment">// 根据播放状态监听歌词变化</span></span><br><span class="line">       <span class="keyword">if</span> (changes.playing) &#123;</span><br><span class="line">           <span class="keyword">if</span> (!changes.playing.firstChange) &#123;</span><br><span class="line">               <span class="built_in">this</span>.lyric &amp;&amp; <span class="built_in">this</span>.lyric.togglePlay(<span class="built_in">this</span>.playing);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 监听当前歌曲变化</span></span><br><span class="line">       <span class="keyword">if</span> (changes.currentSong) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">this</span>.currentSong) &#123;</span><br><span class="line">               <span class="built_in">this</span>.currentIndex = findIndex(<span class="built_in">this</span>.songList, <span class="built_in">this</span>.currentSong);</span><br><span class="line">               <span class="built_in">this</span>.updateLyric();</span><br><span class="line">               <span class="keyword">if</span> (<span class="built_in">this</span>.show) &#123;</span><br><span class="line">                   <span class="built_in">this</span>.scrollToCurrent();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="built_in">this</span>.resetLyric();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 监听面板显隐</span></span><br><span class="line">       <span class="keyword">if</span> (changes.show) &#123;</span><br><span class="line">           <span class="keyword">if</span> (!changes.show.firstChange &amp;&amp; <span class="built_in">this</span>.show) &#123;</span><br><span class="line">               <span class="built_in">this</span>.wyScroll.first.refreshScroll()</span><br><span class="line">               <span class="built_in">this</span>.wyScroll.last.refreshScroll()</span><br><span class="line">               timer(<span class="number">80</span>).subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (<span class="built_in">this</span>.currentSong) &#123;</span><br><span class="line">                       <span class="built_in">this</span>.scrollToCurrent();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 更新歌词</span></span><br><span class="line">   <span class="keyword">private</span> updateLyric () &#123;</span><br><span class="line">       <span class="built_in">this</span>.resetLyric();</span><br><span class="line">       <span class="built_in">this</span>.songServe.getLyric(<span class="built_in">this</span>.currentSong.id).subscribe(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.lyric = <span class="keyword">new</span> WyLyric(res);</span><br><span class="line">           <span class="built_in">this</span>.currentLyric = <span class="built_in">this</span>.lyric.lines;</span><br><span class="line">           <span class="built_in">this</span>.startLine = res.tlyric ? <span class="number">1</span> : <span class="number">3</span>;</span><br><span class="line">           <span class="built_in">this</span>.handlerLyric();</span><br><span class="line">           <span class="comment">// 歌词重置到顶部</span></span><br><span class="line">           <span class="built_in">this</span>.wyScroll.last.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">this</span>.playing) &#123;</span><br><span class="line">               <span class="built_in">this</span>.lyric.play();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滚动歌词</span></span><br><span class="line">   <span class="keyword">private</span> handlerLyric () &#123;</span><br><span class="line">       <span class="built_in">this</span>.lyric.handler.subscribe(<span class="function">(<span class="params">&#123; lineNum &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (!<span class="built_in">this</span>.lyricRefs) &#123;</span><br><span class="line">               <span class="built_in">this</span>.lyricRefs = <span class="built_in">this</span>.wyScroll.last.el.nativeElement.querySelectorAll(<span class="string">&#x27;ul li&#x27;</span>)</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&#x27;li&#x27;</span>, <span class="built_in">this</span>.lyricRefs)</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">this</span>.lyricRefs.length) &#123;</span><br><span class="line">               <span class="built_in">this</span>.currentLineNum = lineNum;</span><br><span class="line">               <span class="keyword">if</span> (lineNum &gt; <span class="built_in">this</span>.startLine) &#123;</span><br><span class="line">                   <span class="keyword">const</span> targetLine = <span class="built_in">this</span>.lyricRefs[lineNum - <span class="built_in">this</span>.startLine];</span><br><span class="line">                   <span class="keyword">if</span> (targetLine) &#123;</span><br><span class="line">                       <span class="built_in">this</span>.wyScroll.last.scrollToElement(targetLine, <span class="number">300</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="built_in">this</span>.wyScroll.last.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 重置歌词</span></span><br><span class="line">   <span class="keyword">private</span> resetLyric () &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.lyric) &#123;</span><br><span class="line">           <span class="built_in">this</span>.lyric.stop();</span><br><span class="line">           <span class="built_in">this</span>.lyric = <span class="literal">null</span>;</span><br><span class="line">           <span class="built_in">this</span>.currentLyric = [];</span><br><span class="line">           <span class="built_in">this</span>.currentLineNum = <span class="number">0</span>;</span><br><span class="line">           <span class="built_in">this</span>.lyricRefs = <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 移动滚动条</span></span><br><span class="line">   <span class="keyword">private</span> scrollToCurrent () &#123;</span><br><span class="line">       <span class="keyword">const</span> songListRefs = <span class="built_in">this</span>.wyScroll.first.el.nativeElement.querySelectorAll(<span class="string">&#x27;ul li&#x27;</span>);</span><br><span class="line">       <span class="keyword">if</span> (songListRefs.length) &#123;</span><br><span class="line">           <span class="keyword">const</span> currentLi = songListRefs[<span class="built_in">this</span>.currentIndex || <span class="number">0</span>] <span class="keyword">as</span> HTMLElement;</span><br><span class="line">           <span class="keyword">const</span> offsetTop = currentLi.offsetTop;</span><br><span class="line">           <span class="keyword">const</span> offsetHeight = currentLi.offsetHeight;</span><br><span class="line">           <span class="keyword">if</span> (offsetTop - <span class="built_in">Math</span>.abs(<span class="built_in">this</span>.scrollY) &gt; offsetHeight * <span class="number">5</span> || offsetTop &lt; <span class="built_in">Math</span>.abs(<span class="built_in">this</span>.scrollY)) &#123;</span><br><span class="line">               <span class="built_in">this</span>.wyScroll.first.scrollToElement(currentLi, <span class="number">300</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>当数据监听到当前歌曲有变化时，会通过api查找到当前歌曲的歌词，通过实例化wy-lyric类得到包含原译文和时间的数组数据。</p>
<ul>
<li>wy-lyric.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> BaseLyricLine &#123;</span><br><span class="line">    txt: <span class="built_in">string</span>;</span><br><span class="line">    txtCn: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> LyricLine <span class="keyword">extends</span> BaseLyricLine &#123;</span><br><span class="line">    time: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Handler <span class="keyword">extends</span> BaseLyricLine &#123;</span><br><span class="line">    lineNum: <span class="built_in">number</span> <span class="comment">// 当前歌词索引</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> timeExp = <span class="regexp">/\[(\d&#123;1,2&#125;):(\d&#123;2&#125;)(?:\.(\d&#123;2,3&#125;))?\]/</span>; <span class="comment">//正值-匹配 [00:34.910] 类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> playing = <span class="literal">false</span>; <span class="comment">// 播放状态</span></span><br><span class="line">    <span class="keyword">private</span> curNum: <span class="built_in">number</span>; <span class="comment">// 当前第几行歌词</span></span><br><span class="line">    <span class="keyword">private</span> startStamp: <span class="built_in">number</span>; <span class="comment">// 歌词时间戳</span></span><br><span class="line">    <span class="keyword">private</span> pauseStamp: <span class="built_in">number</span>; <span class="comment">// 歌曲暂停时的时间戳</span></span><br><span class="line">    <span class="keyword">private</span> timer: <span class="built_in">any</span>;</span><br><span class="line">    handler = <span class="keyword">new</span> Subject&lt;Handler&gt;();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 歌词播放回调</span></span><br><span class="line">   play (startTime = <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (!<span class="built_in">this</span>.lines.length) &#123; <span class="keyword">return</span> &#125;;</span><br><span class="line">       <span class="keyword">if</span> (!<span class="built_in">this</span>.playing) &#123;</span><br><span class="line">           <span class="built_in">this</span>.playing = <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">this</span>.curNum = <span class="built_in">this</span>.findCurNum(startTime);</span><br><span class="line">       <span class="built_in">this</span>.startStamp = <span class="built_in">Date</span>.now() - startTime;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.curNum &lt; <span class="built_in">this</span>.lines.length) &#123;</span><br><span class="line">           <span class="built_in">clearTimeout</span>(<span class="built_in">this</span>.timer);</span><br><span class="line">           <span class="built_in">this</span>.playReset();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 持续播放歌词</span></span><br><span class="line">   <span class="keyword">private</span> playReset () &#123;</span><br><span class="line">       <span class="keyword">let</span> line = <span class="built_in">this</span>.lines[<span class="built_in">this</span>.curNum];</span><br><span class="line">       <span class="keyword">const</span> delay = line.time - (<span class="built_in">Date</span>.now() - <span class="built_in">this</span>.startStamp);</span><br><span class="line">       <span class="comment">// const temp = this.lines[this.curNum + 1].time - this.lines[this.curNum].time;</span></span><br><span class="line">       <span class="comment">// console.log(&#x27;delay&#x27;, temp);</span></span><br><span class="line">       <span class="built_in">this</span>.timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.callHandler(<span class="built_in">this</span>.curNum++);</span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">this</span>.curNum &lt; <span class="built_in">this</span>.lines.length &amp;&amp; <span class="built_in">this</span>.playing) &#123;</span><br><span class="line">               <span class="built_in">this</span>.playReset();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, delay)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 发送当前歌词</span></span><br><span class="line">   <span class="keyword">private</span> callHandler (i: <span class="built_in">number</span>) &#123;</span><br><span class="line">       <span class="built_in">this</span>.handler.next(&#123;</span><br><span class="line">           txt: <span class="built_in">this</span>.lines[i].txt,</span><br><span class="line">           txtCn: <span class="built_in">this</span>.lines[i].txtCn,</span><br><span class="line">           lineNum: i,</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 根据时间戳查找当亲歌词所在行数</span></span><br><span class="line">   <span class="keyword">private</span> findCurNum (time: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">       <span class="keyword">const</span> index = <span class="built_in">this</span>.lines.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> time &lt;= item.time);</span><br><span class="line">       <span class="keyword">return</span> index === <span class="number">-1</span> ? <span class="built_in">this</span>.lines.length - <span class="number">1</span> : index;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 歌词播放</span></span><br><span class="line">   togglePlay (playing: <span class="built_in">boolean</span>) &#123;</span><br><span class="line">       <span class="keyword">const</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">       <span class="built_in">this</span>.playing = playing;</span><br><span class="line">       <span class="keyword">if</span> (playing) &#123;</span><br><span class="line">           <span class="keyword">const</span> startTime = (<span class="built_in">this</span>.pauseStamp || now) - (<span class="built_in">this</span>.startStamp || now)</span><br><span class="line">           <span class="built_in">this</span>.play(startTime);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.stop();</span><br><span class="line">           <span class="built_in">this</span>.pauseStamp = now;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 暂停</span></span><br><span class="line">   stop () &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.playing) &#123;</span><br><span class="line">           <span class="built_in">this</span>.playing = <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">clearTimeout</span>(<span class="built_in">this</span>.timer);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>父组件在获取歌词后就要将当前相对应的歌词部分通过插件滚动到合适的地方，所以通过subject多播的方式拿到当前歌词节点并通过scrollToElement滚动。</p>
<p>在处理歌词停留时间处，也可以用当前行+1歌词的时间减去当前行歌词的时间来获取停留的时间戳。</p>
<h2 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h2><p>点击进度条时也要实现定位到当前歌词。在点击进度条时拿到点击的时间戳，通过面板组件，将新的时间传给歌词子组件，然后重新寻找当前时间所在的歌词行数。</p>
<ul>
<li><p>wy-player.component.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@ViewChild</span>(WyPlayerPanelComponent, &#123; <span class="keyword">static</span>: <span class="literal">false</span> &#125;) <span class="keyword">private</span> playPanel: WyPlayerPanelComponent;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 滑动播放条</span></span><br><span class="line"> onPercentChange (e: <span class="built_in">number</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">this</span>.currentSong) &#123;</span><br><span class="line">         <span class="keyword">const</span> currentTime = <span class="built_in">this</span>.duration * (e / <span class="number">100</span>);</span><br><span class="line">         <span class="built_in">this</span>.audioEl.currentTime = currentTime;</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.playPanel) &#123;</span><br><span class="line">             <span class="built_in">this</span>.playPanel.seekLyric(currentTime * <span class="number">1000</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// 单曲循环</span></span><br><span class="line"> <span class="keyword">private</span> loop () &#123;</span><br><span class="line">     <span class="built_in">this</span>.audioEl.currentTime = <span class="number">0</span>;</span><br><span class="line">     <span class="built_in">this</span>.play()</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">this</span>.playPanel) &#123;</span><br><span class="line">         <span class="built_in">this</span>.playPanel.seekLyric(<span class="number">0</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>wy-player-panel.component.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">seekLyric (time: <span class="built_in">number</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.lyric) &#123;</span><br><span class="line">          <span class="built_in">this</span>.lyric.seek(time);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>wy-lyric.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 歌词播放</span></span><br><span class="line"> play (startTime = <span class="number">0</span>, skip = <span class="literal">false</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (!<span class="built_in">this</span>.lines.length) &#123; <span class="keyword">return</span> &#125;;</span><br><span class="line">     <span class="keyword">if</span> (!<span class="built_in">this</span>.playing) &#123;</span><br><span class="line">         <span class="built_in">this</span>.playing = <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">this</span>.curNum = <span class="built_in">this</span>.findCurNum(startTime);</span><br><span class="line">     <span class="built_in">this</span>.startStamp = <span class="built_in">Date</span>.now() - startTime;</span><br><span class="line">     <span class="keyword">if</span> (!skip) &#123;</span><br><span class="line">         <span class="built_in">this</span>.callHandler(<span class="built_in">this</span>.curNum - <span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">this</span>.curNum &lt; <span class="built_in">this</span>.lines.length) &#123;</span><br><span class="line">         <span class="built_in">clearTimeout</span>(<span class="built_in">this</span>.timer);</span><br><span class="line">         <span class="built_in">this</span>.playReset();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">seek (time: <span class="built_in">number</span>) &#123;</span><br><span class="line">     <span class="built_in">this</span>.play(time);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>同时在单曲模式下也要对歌词重置为起始位置。</p>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里的逻辑有些绕，关于组件间传值仍然不是很熟练，还有angular的一些依赖项都也是不明白其含义，导致使用的时候不知道具体怎么用。这些视频一遍一遍的看，资料也是一点点的查，也崩溃过几次，压力之下总是能收货一些的，撑下去！</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【你不知道的JS--上】——1、作用域</title>
    <url>/posts/8f3a274f/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><font color=#999AAA >
这个分栏用于记录最近在看的《你不知道的JavaScript》系列的笔记内容，更接近于理论篇，所以为了加深记忆，会摘抄书上我认为重要的部分，也会尽可能的用自己的理解去重载内容
</font>

<hr>
<h1 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h1><h2 id="分词-词法分析（Tokenizing-Lexing）"><a href="#分词-词法分析（Tokenizing-Lexing）" class="headerlink" title="分词/词法分析（Tokenizing/Lexing）"></a>分词/词法分析（Tokenizing/Lexing）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stateDiagram-v2</span><br><span class="line">   字符串 --&gt; 代码块: 分解</span><br><span class="line">   代码块 --&gt; 词法单元: 解析</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="解析-语法分析-Parsing"><a href="#解析-语法分析-Parsing" class="headerlink" title="解析/语法分析(Parsing)"></a>解析/语法分析(Parsing)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stateDiagram-v2</span><br><span class="line">词法单元--&gt; 抽象语法树（元素逐级嵌套所组成的代表程序与法结构的树）:转换</span><br></pre></td></tr></table></figure>

<h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stateDiagram-v2</span><br><span class="line">   抽象语法树(AST) --&gt; 可执行代码: 转换</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><blockquote>
<ul>
<li>引擎： 从头到尾负责整个js程序的编译及执行</li>
<li>编译器： 语法分析及代码生成</li>
<li>作用域： 收集并维护所有生命的标识符组成的一系列查询，并实施严格的规则，确定当前执行的代码对这些标识符的访问权限</li>
</ul>
</blockquote>
<blockquote>
<p>var a = 2;<br>代码生成过程是:<br>1、先执行 var a ，编译器向作用域询问是否有重名变量，有则无操作，<strong>没有则在当前作用域的集合中声明新变量，并命名为a</strong><br>2、编译器为引擎生成执行代码，首先询问当前作用域是否存在叫a的变量，存在则使用这个变量，不存在则向上级作用域寻找，如果找到则赋值，否则抛出异常</p>
</blockquote>
<hr>
<h1 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h1><ul>
<li>LHS：查找赋值左侧的变量，找到变量的容器本身，即赋值操作的目标是谁</li>
<li>RHS：非左侧的变量，查找变量的值，即谁是赋值操作的源头</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p><strong>形参a=2的赋值为隐式</strong></p>
]]></content>
      <categories>
        <category>JS小黄书</category>
      </categories>
      <tags>
        <tag>JS小黄书</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--15、歌词渲染</title>
    <url>/posts/6efe822a/</url>
    <content><![CDATA[<h1 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h1><h2 id="歌词初始化"><a href="#歌词初始化" class="headerlink" title="歌词初始化"></a>歌词初始化</h2><p>播放面板左侧展示歌单歌曲，右侧展示当前歌曲歌词，并且实现和左侧相通的滚动条。因此要根据ID获取当前歌曲歌词。<br><img data-src="https://img-blog.csdnimg.cn/20201221221351484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70" alt="歌词API"></p>
<ul>
<li>song.service.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据ID获取歌曲歌词</span></span><br><span class="line"> getLyric (id: <span class="built_in">number</span>): Observable&lt;Lyric&gt; &#123;</span><br><span class="line">     <span class="keyword">const</span> params = <span class="keyword">new</span> HttpParams().set(<span class="string">&#x27;id&#x27;</span>, id.toString());</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="built_in">this</span>.uri + <span class="string">&#x27;lyric&#x27;</span>, &#123; params &#125;)</span><br><span class="line">         .pipe(map((res: &#123;</span><br><span class="line">             [key: <span class="built_in">string</span>]: &#123; lyric: <span class="built_in">string</span>; &#125;</span><br><span class="line">         &#125;) =&gt; &#123;</span><br><span class="line">             <span class="keyword">return</span> &#123;</span><br><span class="line">                 lyric: res.lrc.lyric,</span><br><span class="line">                 tlyric: res.tlyric.lyric,</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;))</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li>common.types.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 歌词</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Lyric = &#123;</span><br><span class="line">    lyric: <span class="built_in">string</span>, <span class="comment">// 原文</span></span><br><span class="line">    tlyric: <span class="built_in">string</span> <span class="comment">// 译文</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
根据api获取当前歌曲需要的部分，并且在common.types.ts中声明Lyric类型，将返回值res处理成需要的键值对格式。</li>
</ul>
<h2 id="处理歌词"><a href="#处理歌词" class="headerlink" title="处理歌词"></a>处理歌词</h2><h3 id="单语歌词"><a href="#单语歌词" class="headerlink" title="单语歌词"></a>单语歌词</h3><p>当监听当前歌曲值发生变化时，不仅要重新获取当前歌曲索引还有获取当前歌曲歌词。</p>
<ul>
<li>wy-player-panel.component.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">  currentLyric: BaseLyricLine[]; <span class="comment">// 歌词</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据监听</span></span><br><span class="line">  ngOnChanges (changes: SimpleChanges): <span class="built_in">void</span> &#123;</span><br><span class="line">      <span class="comment">// 监听当前歌曲变化</span></span><br><span class="line">      <span class="keyword">if</span> (changes[<span class="string">&#x27;currentSong&#x27;</span>]) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.currentSong) &#123;</span><br><span class="line">              <span class="built_in">this</span>.currentIndex = findIndex(<span class="built_in">this</span>.songList, <span class="built_in">this</span>.currentSong);</span><br><span class="line">              <span class="built_in">this</span>.updateLyric();</span><br><span class="line">              <span class="keyword">if</span> (<span class="built_in">this</span>.show) &#123;</span><br><span class="line">                  <span class="built_in">this</span>.scrollToCurrent();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据ID获取歌词</span></span><br><span class="line">  <span class="keyword">private</span> updateLyric () &#123;</span><br><span class="line">      <span class="built_in">this</span>.songServe.getLyric(<span class="built_in">this</span>.currentSong.id).subscribe(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> lyric = <span class="keyword">new</span> WyLyric(res);</span><br><span class="line">          <span class="built_in">this</span>.currentLyric = lyric.lines;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>wy-lyric.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Lyric &#125; <span class="keyword">from</span> <span class="string">&quot;src/app/services/data-types/common.types&quot;</span>;</span><br><span class="line"><span class="comment">// 歌词基类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> BaseLyricLine &#123;</span><br><span class="line">    txt: <span class="built_in">string</span>;</span><br><span class="line">    txtCn: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 歌词派生类</span></span><br><span class="line"><span class="keyword">interface</span> LyricLine <span class="keyword">extends</span> BaseLyricLine &#123;</span><br><span class="line">    time: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timeExp = <span class="regexp">/\[(\d&#123;2&#125;):(\d&#123;2&#125;)\.(\d&#123;2,3&#125;)\]/</span>;  <span class="comment">//正值-匹配 [00:34.910] 类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> WyLyric &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> lrc: Lyric; <span class="comment">// 暂存传来的歌词</span></span><br><span class="line">    lines: LyricLine[] = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">lrc: Lyric</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.lrc = lrc;</span><br><span class="line">        <span class="built_in">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> init () &#123;</span><br><span class="line">        <span class="comment">// 判断是否是外语歌曲</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.lrc.tlyric) &#123;</span><br><span class="line">            <span class="built_in">this</span>.generTLyric();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.generLyric();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析单语歌词</span></span><br><span class="line">    <span class="keyword">private</span> generLyric () &#123;</span><br><span class="line">        <span class="keyword">const</span> lines = <span class="built_in">this</span>.lrc.lyric.split(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        lines.forEach(<span class="function"><span class="params">line</span> =&gt;</span> <span class="built_in">this</span>.makeLine(line))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析双语歌词</span></span><br><span class="line">    <span class="keyword">private</span> generTLyric () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理单行歌词</span></span><br><span class="line">    <span class="keyword">private</span> makeLine (line: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> result = timeExp.exec(line);</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            <span class="keyword">const</span> txt = line.replace(timeExp, <span class="string">&#x27;&#x27;</span>).trim();</span><br><span class="line">            <span class="keyword">const</span> txtCn = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (txt) &#123;</span><br><span class="line">                <span class="keyword">const</span> thirdResult = result[<span class="number">3</span>] || <span class="string">&#x27;00&#x27;</span>;</span><br><span class="line">                <span class="keyword">const</span> len = thirdResult.length;</span><br><span class="line">                <span class="keyword">const</span> _thirdResult = len &gt; <span class="number">2</span> ? <span class="built_in">parseInt</span>(thirdResult) : <span class="built_in">parseInt</span>(thirdResult) * <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">const</span> time = <span class="built_in">Number</span>(result[<span class="number">1</span>]) * <span class="number">60</span> * <span class="number">1000</span> + <span class="built_in">Number</span>(result[<span class="number">2</span>]) * <span class="number">60</span> + _thirdResult;</span><br><span class="line">                <span class="built_in">this</span>.lines.push(&#123; txt, txtCn, time &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
当实例化歌词类的时候先暂存传来的歌词，然后判断当前歌词是否是双语，当仅为单语时会将歌词中string类型的原文转为数组，因为每一行歌词前都会有时间提示，所以要通过makeLine方法单独处理每一行。<br><img data-src="https://img-blog.csdnimg.cn/20201221223504617.png"><br>在处理单行歌词时使用了正则表达式来匹配字符串格式的参数。</li>
</ul>
<blockquote>
<p>RegExpObject.exec(string)<br>返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">string</td>
<td align="center">必需。要检索的字符串。</td>
</tr>
</tbody></table>
<blockquote>
<p>如果 exec() 找到了匹配的文本，则返回一个结果数组。否则，返回 null。此数组的第 0 个元素是与正则表达式相匹配的文本，第 1 个元素是与 RegExpObject 的第 1 个子表达式相匹配的文本（如果有的话），第 2 个元素是与 RegExpObject 的第 2 个子表达式相匹配的文本（如果有的话），以此类推。除了数组元素和 length 属性之外，exec() 方法还返回两个属性。index 属性声明的是匹配文本的第一个字符的位置。input 属性则存放的是被检索的字符串 string。我们可以看得出，在调用非全局的 RegExp 对象的 exec() 方法时，返回的数组与调用方法 String.match() 返回的数组是相同的。</p>
</blockquote>
<p>在单行歌词中匹配”[分钟:秒.毫秒]”类型的字符串<br><img data-src="https://img-blog.csdnimg.cn/20201221225451752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"><br>如果能匹配到，就在当前单行歌词中将匹配到的字符串置空并去空格，这样就能拿到实际渲染的歌词了。而在时间上是将分钟，秒转换为毫秒并存下来。</p>
<ul>
<li>wy-player-panel.component.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 歌词列表 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">app-wy-scroll</span> <span class="attr">class</span>=<span class="string">&quot; list-lyric&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let line of currentLyric&quot;</span>&gt;</span></span><br><span class="line">                   &#123;&#123;line.txt&#125;&#125; </span><br><span class="line">                   <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                   &#123;&#123;line?.txtCn&#125;&#125;   </span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">app-wy-scroll</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img data-src="https://img-blog.csdnimg.cn/20201221225815556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"></li>
</ul>
<hr>
<h3 id="双语歌词"><a href="#双语歌词" class="headerlink" title="双语歌词"></a>双语歌词</h3><p>在拿到国外歌曲的歌词时，会有翻译的文本，这时候就要将原文和译文一句句的对应起来。在WyLyric类中通过对传送进来的歌词类判断，来决定歌词处理的通道是走单语还是双语。</p>
<ul>
<li>wy-lyriv.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析双语歌词</span></span><br><span class="line">   <span class="keyword">private</span> generTLyric () &#123;</span><br><span class="line">   	<span class="comment">// 获取原文数组</span></span><br><span class="line">       <span class="keyword">const</span> lines = <span class="built_in">this</span>.lrc.lyric.split(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">       <span class="comment">// 获取译文数组</span></span><br><span class="line">       <span class="keyword">const</span> tLines = <span class="built_in">this</span>.lrc.tlyric.split(<span class="string">&#x27;\n&#x27;</span>).filter(<span class="function"><span class="params">item</span> =&gt;</span> timeExp.exec(item) != <span class="literal">null</span>);</span><br><span class="line">       <span class="comment">// 判断原文与译文的长度关系</span></span><br><span class="line">       <span class="keyword">const</span> moreLine = lines.length - tLines.length;</span><br><span class="line">       <span class="keyword">let</span> tempArr = [];</span><br><span class="line">       <span class="keyword">if</span> (moreLine &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">           tempArr = [lines, tLines];</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           tempArr = [tLines, lines];</span><br><span class="line">       &#125;</span><br><span class="line">	<span class="comment">// 获取短的歌词数组中的第一个时间部分</span></span><br><span class="line">       <span class="keyword">const</span> first = timeExp.exec(tempArr[<span class="number">1</span>][<span class="number">0</span>])[<span class="number">0</span>];</span><br><span class="line">	<span class="comment">// 获取长的歌词数组需要跳过的索引</span></span><br><span class="line">       <span class="keyword">const</span> skipIndex = tempArr[<span class="number">0</span>].findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">const</span> exec = timeExp.exec(item);</span><br><span class="line">           <span class="keyword">if</span> (exec) &#123;</span><br><span class="line">               <span class="keyword">return</span> exec[<span class="number">0</span>] === first;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">	</span><br><span class="line">       <span class="keyword">const</span> _skip = skipIndex === <span class="number">-1</span> ? <span class="number">0</span> : skipIndex;</span><br><span class="line">       <span class="keyword">const</span> skipItems = tempArr[<span class="number">0</span>].slice(<span class="number">0</span>, _skip);</span><br><span class="line">       <span class="keyword">if</span> (skipItems.length) &#123;</span><br><span class="line">           skipItems.forEach(<span class="function"><span class="params">line</span> =&gt;</span> <span class="built_in">this</span>.makeLine(line));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">let</span> zipLines$;</span><br><span class="line">       <span class="keyword">if</span> (moreLine &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           zipLines$ = zip(<span class="keyword">from</span>(lines).pipe(skip(_skip)), <span class="keyword">from</span>(tLines));</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           zipLines$ = zip(<span class="keyword">from</span>(lines), <span class="keyword">from</span>(tLines).pipe(skip(_skip)));</span><br><span class="line">       &#125;</span><br><span class="line">       zipLines$.subscribe(<span class="function">(<span class="params">[line, tLine]</span>) =&gt;</span> <span class="built_in">this</span>.makeLine(line, tLine))</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 处理单行歌词</span></span><br><span class="line">   <span class="keyword">private</span> makeLine (line: <span class="built_in">string</span>, tLine = <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">       <span class="keyword">const</span> result = timeExp.exec(line);</span><br><span class="line">       <span class="keyword">if</span> (result) &#123;</span><br><span class="line">           <span class="keyword">const</span> txt = line.replace(timeExp, <span class="string">&#x27;&#x27;</span>).trim();</span><br><span class="line">           <span class="keyword">const</span> txtCn = tLine ? tLine.replace(timeExp, <span class="string">&#x27;&#x27;</span>).trim() : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">           <span class="keyword">if</span> (txt) &#123;</span><br><span class="line">               <span class="keyword">const</span> thirdResult = result[<span class="number">3</span>] || <span class="string">&#x27;00&#x27;</span>;</span><br><span class="line">               <span class="keyword">const</span> len = thirdResult.length;</span><br><span class="line">               <span class="keyword">const</span> _thirdResult = len &gt; <span class="number">2</span> ? <span class="built_in">parseInt</span>(thirdResult) : <span class="built_in">parseInt</span>(thirdResult) * <span class="number">10</span>;</span><br><span class="line">               <span class="keyword">const</span> time = <span class="built_in">Number</span>(result[<span class="number">1</span>]) * <span class="number">60</span> * <span class="number">1000</span> + <span class="built_in">Number</span>(result[<span class="number">2</span>]) * <span class="number">60</span> + _thirdResult;</span><br><span class="line">               <span class="built_in">this</span>.lines.push(&#123; txt, txtCn, time &#125;)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
在通过获取双语歌词回调中，声明局部变量lines和tLines来保存传递过来的歌词的原文和译文部分，api数据中观察到原文和译文可能不对应，因此译文部分要经过一个空值筛选。因为二者不一 一对应，但是在渲染的时候要达到一句原文一句译文，所以需要判断。为了方便取值，声明一个装有原文译文数组的数组，当原文的长度大于等于译文，将原文放在索引0，反之放在索引1。<blockquote>
<p>原文和译文长度可能不同，原文中可能含有一些版权声明和作词作曲介绍，这时候译文可能没有翻译，所以长度不同，这时的逻辑就是一是要全部显示原文歌词，但是还要将原文译文相对应。</p>
</blockquote>
</li>
</ul>
<p>此时用正则获取短的歌词数组中第一条数据的时间部分，然后用findIndex在长的歌词数组中寻找该时间部分等于短的歌词数组中的一条的时间部分，拿到索引。</p>
<blockquote>
<p>findIndex()</p>
<ul>
<li>返回传入一个测试条件（函数）符合条件的数组第一个元素位置。</li>
<li>为数组中的每个元素都调用一次函数执行：当数组中的元素在测试条件时返回 true 时, 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。<strong>如果没有符合条件的元素返回 -1</strong></li>
</ul>
<p><strong>注意: findIndex() 对于空数组，函数是不会执行的。其并没有改变数组的原始值。</strong> </p>
</blockquote>
<p>所以此时要将返回-1的时候转为0，即原文和译文长度相等，此时不用截取任何数据。截取数据不为空时，在将截取的数据单独提前push到渲染的歌词中。之后便是要处理一一对应的歌词了。</p>
<p>此时判断原文和译文的长度关系，如果原文长，就将原文跳过获取的索引，然后通过zip()来得到一个 <strong>[ 原文， 译文 ]observable类型的数组</strong>。译文长就将译文跳过获取的索引。然后在将得到的数据订阅处理单行歌词的回调。<strong>此时要将之前写死的单条译文写一个判断</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/20210101222126661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其中使用了正则表达式，很显然是一块短板，而且在使用zip()时提示方法不再支持，而是建议使用map来操作，目前为了理解没有修改，后续来调整这一方面！</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--14、底部信息与功能（二）</title>
    <url>/posts/2ac17ac2/</url>
    <content><![CDATA[<h1 id="播放面板"><a href="#播放面板" class="headerlink" title="播放面板"></a>播放面板</h1><p>底部除了播放歌曲时的显示信息，还要显示当前的播放列表，对于播放列表选择提取成单独的子组件，这也涉及到父子组件的通信。</p>
<hr>
<h2 id="歌曲列表"><a href="#歌曲列表" class="headerlink" title="歌曲列表"></a>歌曲列表</h2><ul>
<li><p>wy-player.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--歌曲面板图标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;open&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;toggleListPanel()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 播放面板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-wy-player-panel</span> </span></span><br><span class="line"><span class="tag">  [<span class="attr">songList</span>]=<span class="string">&quot;songList&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">currentSong</span>]=<span class="string">&quot;currentSong&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">currentIndex</span>]=<span class="string">&quot;currentIndex&quot;</span> </span></span><br><span class="line"><span class="tag">  [<span class="attr">show</span>]=<span class="string">&quot;showPanel&quot;</span></span></span><br><span class="line"><span class="tag">  (<span class="attr">onClose</span>)=<span class="string">&quot;showPanel = false&quot;</span></span></span><br><span class="line"><span class="tag">  (<span class="attr">onChangeSong</span>)=<span class="string">&quot;onChangeSong($event)&quot;</span></span></span><br><span class="line"><span class="tag"> &gt;</span><span class="tag">&lt;/<span class="name">app-wy-player-panel</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当打开该面板的时候，左侧需要显示当前的歌曲列表以及当前的歌曲，所以会像子组件传songList 与 currentSong，而在当前歌曲前要显示小图标，所以将当前歌曲的索引也传给子组件。</p>
</li>
<li><p>wy-player.component.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">  songList: Song[]; <span class="comment">// 歌曲列表</span></span><br><span class="line">  currentIndex: <span class="built_in">number</span>; <span class="comment">// 当前歌曲下标</span></span><br><span class="line">  currentSong: Song; <span class="comment">// 当前歌曲</span></span><br><span class="line">  showVolumePanel = <span class="literal">false</span>; <span class="comment">// 是否显示音量面板</span></span><br><span class="line">  showPanel = <span class="literal">false</span>; <span class="comment">// 是否显示列表面板</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制音量面板</span></span><br><span class="line">  toggleVolPanel () &#123;</span><br><span class="line">      <span class="built_in">this</span>.togglePanel(<span class="string">&#x27;showVolumePanel&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 控制列表面板</span></span><br><span class="line">  toggleListPanel () &#123;</span><br><span class="line">      <span class="built_in">this</span>.togglePanel(<span class="string">&#x27;showPanel&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 面板回调</span></span><br><span class="line">  togglePanel (<span class="keyword">type</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>[<span class="keyword">type</span>] = !<span class="built_in">this</span>[<span class="keyword">type</span>];</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.showVolumePanel || <span class="built_in">this</span>.showPanel) &#123;</span><br><span class="line">          <span class="built_in">this</span>.bindDocumentClickListener();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.unbindDocumentClickListener();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">  <span class="comment">// 绑定音量事件</span></span><br><span class="line">  <span class="keyword">private</span> bindDocumentClickListener () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;win&#x27;</span>, <span class="built_in">this</span>.winClick);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.winClick) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;self&#x27;</span>, <span class="built_in">this</span>.selfClick);</span><br><span class="line">          <span class="built_in">this</span>.winClick = fromEvent(<span class="built_in">this</span>.doc, <span class="string">&#x27;click&#x27;</span>).subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (!<span class="built_in">this</span>.selfClick) &#123; <span class="comment">// 说明点击了播放器以外的地方</span></span><br><span class="line">                  <span class="built_in">console</span>.log(<span class="string">&#x27;self&#x27;</span>, <span class="built_in">this</span>.selfClick);</span><br><span class="line">                  <span class="built_in">this</span>.showVolumePanel = <span class="literal">false</span>;</span><br><span class="line">                  <span class="built_in">this</span>.showPanel = <span class="literal">false</span>;</span><br><span class="line">                  <span class="built_in">this</span>.unbindDocumentClickListener();</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="built_in">this</span>.selfClick = <span class="literal">false</span>;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解绑音量事件</span></span><br><span class="line">  <span class="keyword">private</span> unbindDocumentClickListener () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;win&#x27;</span>, <span class="built_in">this</span>.winClick);</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.winClick) &#123;</span><br><span class="line">          <span class="built_in">this</span>.winClick.unsubscribe();</span><br><span class="line">          <span class="built_in">this</span>.winClick = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>当点击图标时，触发toggleListPanel（）,此时将会触发回调，将 ‘showPanel’ 传给togglePanel（）回调。回调中根据type的类型来更改面板的显隐。当两个面板其中一个为true时，将会绑定下一次的点击事件，否则解绑事件。</p>
</li>
<li><p>wy-player-panel.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 歌曲列表面板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;play-panel &quot;</span> [<span class="attr">class.show</span>]=<span class="string">&quot;show&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hdc&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>播放列表(<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;songList?.length&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;add-all&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">title</span>=<span class="string">&quot;收藏全部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>收藏全部</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear-all&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon trush&quot;</span> <span class="attr">title</span>=<span class="string">&quot;清除全部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>清除全部</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;playing-name&quot;</span>&gt;</span>&#123;&#123;currentSong?.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon close&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;onClose.emit()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msk&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-wrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of songList; index as i&quot;</span> [<span class="attr">class.current</span>]=<span class="string">&quot;currentIndex === i&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;onChangeSong.emit(item)&quot;</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;col arrow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col name ellipsis&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col icons&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ico like&quot;</span> <span class="attr">title</span>=<span class="string">&quot;收藏&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ico share&quot;</span> <span class="attr">title</span>=<span class="string">&quot;分享&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ico trush&quot;</span> <span class="attr">title</span>=<span class="string">&quot;删除&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;singers clearfix ellipsis&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;singer-item&quot;</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let singer of item.ar last as isLast&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span>  <span class="attr">class</span>=<span class="string">&quot;col ellipsis&quot;</span>&gt;</span>&#123;&#123;singer.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> [<span class="attr">hidden</span>]=<span class="string">&quot;isLast&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col duration&quot;</span>&gt;</span>&#123;&#123;item.dt / 1000 | formatTime&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col link&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>wy-player-panel.component.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Input</span>() songList: Song[];</span><br><span class="line"><span class="meta">@Input</span>() currentSong: Song;</span><br><span class="line"><span class="meta">@Input</span>() currentIndex: <span class="built_in">number</span>;</span><br><span class="line"><span class="meta">@Input</span>() show: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Output</span>() onClose = <span class="keyword">new</span> EventEmitter</span><br><span class="line"><span class="meta">@Output</span>() onChangeSong = <span class="keyword">new</span> EventEmitter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ngOnChanges (changes: SimpleChanges): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (changes[<span class="string">&#x27;songList&#x27;</span>]) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;songList&#x27;</span>, <span class="built_in">this</span>.songList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (changes[<span class="string">&#x27;currentSong&#x27;</span>]) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;currentSong&#x27;</span>, <span class="built_in">this</span>.currentSong);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当列表面板开启时，接受父组件传来的歌曲列表songList，当前歌曲currentSong，当前歌曲索引currentIndex。将歌曲列表渲染到DOM中，当点击列表中其他歌曲的时候，将歌曲广播给父组件，父组件接收到后将会更新当前歌曲，实现选择切歌的效果</p>
</li>
<li><p>wy-player.componetn.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 改变当前歌曲</span></span><br><span class="line"> onChangeSong (song: Song) &#123;</span><br><span class="line">     <span class="built_in">this</span>.updateCurrentIndex(<span class="built_in">this</span>.playList, song);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="列表滚动"><a href="#列表滚动" class="headerlink" title="列表滚动"></a>列表滚动</h2><p>歌曲渲染之后但无法滑动，歌单内的歌曲也无法全部展示出来，因此需要添加滚动条，此时借助<a href="https://better-scroll.github.io/docs/zh-CN/guide/">betterScroll</a>插件来实现这个功能。</p>
<blockquote>
<p>BetterScroll 是一款重点解决移动端（已支持 PC）各种滚动场景需求的插件。它的核心是借鉴的 iscroll 的实现，它的 API 设计基本兼容 <a href="https://github.com/cubiq/iscroll">iscroll</a>，在 iscroll 的基础上又扩展了一些 feature 以及做了一些性能优化。BetterScroll 是使用纯 JavaScript 实现的，这意味着它是无依赖的。</p>
</blockquote>
<p> <img data-src="https://img-blog.csdnimg.cn/20201219160731841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70" alt="核心滚动"></p>
<p>主要步骤是先安装插件，在需要使用的地方导入包，然后声明一下插件即可。 创建新组建wy-scroll增加插件复用性</p>
<ul>
<li>wy-scroll.compoent.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild, ViewEncapsulation &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">&#x27;@better-scroll/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ScrollBar <span class="keyword">from</span> <span class="string">&#x27;@better-scroll/scroll-bar&#x27;</span></span><br><span class="line"><span class="keyword">import</span> MouseWheel <span class="keyword">from</span> <span class="string">&#x27;@better-scroll/mouse-wheel&#x27;</span></span><br><span class="line">BScroll.use(ScrollBar);</span><br><span class="line">BScroll.use(MouseWheel);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    selector: <span class="string">&#x27;app-wy-scroll&#x27;</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;wy-scroll&quot; #wrap&gt;</span></span><br><span class="line"><span class="string">      &lt;ng-content&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">    styles: [<span class="string">`.wy-scroll&#123; width: 100%; height: 100%; overflow: hidden &#125;`</span>],</span><br><span class="line">    encapsulation: ViewEncapsulation.None,</span><br><span class="line">    changeDetection: ChangeDetectionStrategy.OnPush</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> WyScrollComponent <span class="keyword">implements</span> AfterViewInit, OnChanges &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>() refreshDelay = <span class="number">50</span>; <span class="comment">// 刷新插件延迟时间</span></span><br><span class="line">    <span class="meta">@Input</span>() data: <span class="built_in">any</span>[];	<span class="comment">// 父组件传递列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> bs: BScroll; <span class="comment">// 声明插件</span></span><br><span class="line">    <span class="meta">@ViewChild</span>(<span class="string">&#x27;wrap&#x27;</span>, &#123; <span class="keyword">static</span>: <span class="literal">true</span> &#125;) <span class="keyword">private</span> wrapRef: ElementRef</span><br><span class="line"></span><br><span class="line">	<span class="comment">// </span></span><br><span class="line">    ngOnChanges (changes: SimpleChanges): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (changes[<span class="string">&#x27;data&#x27;</span>]) &#123;</span><br><span class="line">            <span class="built_in">this</span>.refreshScroll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngAfterViewInit (): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bs = <span class="keyword">new</span> BScroll(<span class="built_in">this</span>.wrapRef.nativeElement, &#123;</span><br><span class="line">            <span class="comment">// 滚动条</span></span><br><span class="line">            scrollbar: &#123;</span><br><span class="line">                interactive: <span class="literal">true</span> <span class="comment">// 滚动条可以交互</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 鼠标滚轮</span></span><br><span class="line">            mouseWheel: &#123;</span><br><span class="line">                speed: <span class="number">20</span>, <span class="comment">// 滚轮速度</span></span><br><span class="line">                invert: <span class="literal">false</span>, <span class="comment">// 滚轮方向</span></span><br><span class="line">                easeTime: <span class="number">300</span> <span class="comment">// 动画缓动时长</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 刷新插件回调</span></span><br><span class="line">    <span class="keyword">private</span> refresh () &#123;</span><br><span class="line">        <span class="built_in">this</span>.bs.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 刷新插件</span></span><br><span class="line">    refreshScroll () &#123;</span><br><span class="line">    	<span class="comment">// 设置定时器，等待DOM渲染后执行</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.refresh()</span><br><span class="line">        &#125;, <span class="built_in">this</span>.refreshDelay);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
在陆续安装完Scroll（滚动条）和MouseWheel（鼠标滚轮）之后使用use完成引用。按照文档属性设置相应的参数。<br><img data-src="https://img-blog.csdnimg.cn/20201219184251248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70" alt="效果图"></li>
</ul>
<hr>
<p>在实现滚动条之后，要实现切歌时高亮图标能跟着切歌的当前歌曲，在点击上一曲和下一曲的时候能实时切换，并且在播放歌曲的时候，打开歌曲列表面板能够及时滚动到当前歌曲。</p>
<blockquote>
<p>点击上一曲或者下一曲的时候，会改变当前的歌曲，此时在ngOnChanges钩子处监听当前歌曲的变化和歌曲列表面板的显隐变化，如果当前歌曲有变化或者面板变为显示就将滚动条滑向当前歌曲处</p>
</blockquote>
<ul>
<li>wy-player-panel.component.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  @Input() songList: Song[]; <span class="comment">// 歌曲列表</span></span><br><span class="line">  @Input() currentSong: Song; <span class="comment">// 当前歌曲</span></span><br><span class="line">  @Input() currentIndex: number; <span class="comment">// 当前歌曲索引</span></span><br><span class="line">  @Input() show: boolean; <span class="comment">// 面板显隐</span></span><br><span class="line"></span><br><span class="line">  @Output() onClose = <span class="keyword">new</span> EventEmitter <span class="comment">// 面板是否关闭</span></span><br><span class="line">  @Output() onChangeSong = <span class="keyword">new</span> EventEmitter  <span class="comment">// 改变当前歌曲为选中的列表歌曲</span></span><br><span class="line"></span><br><span class="line">  @ViewChildren(WyScrollComponent) private wyScroll: QueryList&lt;WyScrollComponent&gt;  <span class="comment">// 滚动条</span></span><br><span class="line"></span><br><span class="line">  scrollY = <span class="number">0</span>;  <span class="comment">// 滚动条Y轴偏移量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据监听</span></span><br><span class="line">  ngOnChanges (changes: SimpleChanges): <span class="keyword">void</span> &#123;</span><br><span class="line">  	 <span class="comment">// 监听歌单列表</span></span><br><span class="line">      <span class="keyword">if</span> (changes[<span class="string">&#x27;songList&#x27;</span>]) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;songList&#x27;</span>, <span class="built_in">this</span>.songList);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">// 监听当前歌曲变化</span></span><br><span class="line">      <span class="keyword">if</span> (changes[<span class="string">&#x27;currentSong&#x27;</span>]) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.currentSong) &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="built_in">this</span>.show) &#123;</span><br><span class="line">                  <span class="built_in">this</span>.scrollToCurrent();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">// 监听面板显隐</span></span><br><span class="line">      <span class="keyword">if</span> (changes[<span class="string">&#x27;show&#x27;</span>]) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;refresh&#x27;</span>);</span><br><span class="line">          <span class="keyword">if</span> (!changes[<span class="string">&#x27;show&#x27;</span>].firstChange &amp;&amp; <span class="built_in">this</span>.show) &#123;</span><br><span class="line">              <span class="built_in">this</span>.wyScroll.first.refreshScroll()</span><br><span class="line">              <span class="keyword">if</span> (<span class="built_in">this</span>.currentSong) &#123;</span><br><span class="line">                  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                      <span class="keyword">if</span> (<span class="built_in">this</span>.currentSong) &#123;</span><br><span class="line">                          <span class="built_in">this</span>.scrollToCurrent();</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;, <span class="number">80</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 移动滚动条</span></span><br><span class="line">  private scrollToCurrent () &#123;</span><br><span class="line">      <span class="keyword">const</span> songListRefs = <span class="built_in">this</span>.wyScroll.first.el.nativeElement.querySelectorAll(<span class="string">&#x27;ul li&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (songListRefs.length) &#123;</span><br><span class="line">          <span class="keyword">const</span> currentLi = songListRefs[<span class="built_in">this</span>.currentIndex || <span class="number">0</span>] <span class="keyword">as</span> HTMLElement;</span><br><span class="line">          <span class="keyword">const</span> offsetTop = currentLi.offsetTop;</span><br><span class="line">          <span class="keyword">const</span> offsetHeight = currentLi.offsetHeight;</span><br><span class="line">          <span class="keyword">if</span> (offsetTop - <span class="built_in">Math</span>.abs(<span class="built_in">this</span>.scrollY) &gt; offsetHeight * <span class="number">5</span> || offsetTop &lt; <span class="built_in">Math</span>.abs(<span class="built_in">this</span>.scrollY)) &#123;</span><br><span class="line">              <span class="built_in">this</span>.wyScroll.first.scrollToElement(currentLi, <span class="number">300</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>wy-scroll.component.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(readonly el: ElementRef) &#123; &#125;</span><br><span class="line">	</span><br><span class="line">ngAfterViewInit (): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.bs = <span class="keyword">new</span> BScroll(<span class="built_in">this</span>.wrapRef.nativeElement, &#123;</span><br><span class="line">        scrollbar: &#123;</span><br><span class="line">            interactive: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        mouseWheel: &#123;</span><br><span class="line">            speed: <span class="number">20</span>,</span><br><span class="line">            invert: <span class="literal">false</span>,</span><br><span class="line">            easeTime: <span class="number">300</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.bs.on(<span class="string">&#x27;scrollEnd&#x27;</span>, <span class="function">(<span class="params">&#123; y &#125;</span>) =&gt;</span> <span class="built_in">this</span>.onScrollEnd.emit(y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
先获取滚动条插件节点中所有的li，如果长度不为0即表示存在当前歌曲，此时根据当前歌曲索引拿到当前歌曲的节点，并且声明当前节点距离顶部的偏移量以及每个节点的高度。并且在初始化视图之后添加对滚动条插件的滚动结束触发机制，来将当前以滚动的距离广播给父组件。</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/2020121922330566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"><br>此时要判断当前歌曲是否在可视范围内，如果在就不需要调整滚动条。当歌曲节点距离顶部的偏移量大于滚动条的Y轴偏移量以及当前节点距离顶部的偏移量小于滚动条的Y轴偏移量即表示脱离可视范围，此时就要调用插件的scrollToElement方法，将会滚动到指定的目标元素处。</p>
<p><img data-src="https://img-blog.csdnimg.cn/2020121922423385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"></p>
<hr>
<p>当点击歌单播放歌曲时，此时点击播放模式为随机后切换歌曲并打开面板将会出现当前歌曲与列表歌曲不匹配的问题。原因是播放歌曲后调整为随机模式并切换歌曲时，此时的当前歌曲索引为父组件传来的值，并没有进行更新索引。</p>
<ul>
<li>wy-player-panel.component.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> currentIndex: <span class="built_in">number</span>; <span class="comment">// 取消传入，计算当前歌曲索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据监听</span></span><br><span class="line"> ngOnChanges (changes: SimpleChanges): <span class="built_in">void</span> &#123;</span><br><span class="line">     <span class="comment">// 监听当前歌曲变化</span></span><br><span class="line">    <span class="keyword">if</span> (changes[<span class="string">&#x27;currentSong&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.currentSong) &#123;</span><br><span class="line">            <span class="built_in">this</span>.currentIndex =  findIndex(<span class="built_in">this</span>.songList, <span class="built_in">this</span>.currentSong);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.show) &#123;</span><br><span class="line">                <span class="built_in">this</span>.scrollToCurrent();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>array.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查找当前歌曲在列表中的索引</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">findIndex</span>(<span class="params">list: Song[], currentSong: Song</span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.id === currentSong.id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
当前歌曲发生变化后，将会重新查找当前歌曲在歌曲列表中的索引。</li>
</ul>
<hr>
<p>更改完成后，刷新页面，先将模式调整为随机，此时播放歌单并点击下一曲，将会发现依然是顺序播放。原因是在首页渲染之后，点击歌单的回调中并没有判断当前播放模式。</p>
<ul>
<li>home-component.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">private</span> playState: PlayState; <span class="comment">// 当前播放模式</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.store$.pipe(select(getPlayer)).subscribe(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">this</span>.playState = res)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 点击歌单，获取歌单信息</span></span><br><span class="line">   onPlaySheet (id: <span class="built_in">number</span>) &#123;</span><br><span class="line">       <span class="built_in">this</span>.sheetServe.playSheet(id).subscribe(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.store$.dispatch(SetSongList(&#123; songList: list &#125;));</span><br><span class="line"></span><br><span class="line">           <span class="keyword">let</span> trueIndex = <span class="number">0</span>, trueList = list.slice();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">this</span>.playState.playMode.type === <span class="string">&quot;random&quot;</span>) &#123;</span><br><span class="line">               trueList = shuffle(list || []);</span><br><span class="line">               trueIndex = findIndex(trueList, list[trueIndex]);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="built_in">this</span>.store$.dispatch(SetPlayList(&#123; playList: trueList &#125;));</span><br><span class="line">           <span class="built_in">this</span>.store$.dispatch(SetCurrentIndex(&#123; currentIndex: trueIndex &#125;));</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
首页初始化时先订阅当前播放信息，在点击播放歌单时判断当前播放模式是否为随机，是则打乱歌单数组，重新计算当前歌曲的索引。 </li>
</ul>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--13、底部信息与功能（一）</title>
    <url>/posts/e9e95ea6/</url>
    <content><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>在点击播放音乐之后，歌曲的信息也要渲染到DOM中，其中关于歌曲的时长以及播放的时长也要添加上去。在信息渲染之后还要增加底部的功能，上/下一曲，播放/暂停，以及音量调节和播放模式等</p>
<hr>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="歌曲显示"><a href="#歌曲显示" class="headerlink" title="歌曲显示"></a>歌曲显示</h2><ul>
<li>wy-player.component.ts – 部分<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">    duration: <span class="built_in">number</span>; <span class="comment">// 总时长</span></span><br><span class="line">    currentTime: <span class="built_in">number</span>; <span class="comment">// 当前已听时间</span></span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 监听当前歌曲</span></span><br><span class="line">    <span class="keyword">private</span> watchCurrentSong (song: Song) &#123;</span><br><span class="line">        <span class="keyword">if</span> (song) &#123;</span><br><span class="line">            <span class="built_in">this</span>.currentSong = song;</span><br><span class="line">            <span class="comment">// 返回值中的dt为毫秒，处理为秒</span></span><br><span class="line">            <span class="built_in">this</span>.duration = song.dt / <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 点击播放</span></span><br><span class="line">    onCanPlay () &#123;</span><br><span class="line">        <span class="built_in">this</span>.play();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 更新已播放时长</span></span><br><span class="line">    onTimeUpdate (e: Event) &#123;</span><br><span class="line">        <span class="built_in">this</span>.currentTime = (&lt;HTMLAudioElement&gt;e.target).currentTime;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 播放回调</span></span><br><span class="line">    <span class="keyword">private</span> play () &#123;</span><br><span class="line">        <span class="built_in">this</span>.audioEl.play();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 取值器-获取当前歌曲的小图标URL</span></span><br><span class="line">    get picUrl (): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.currentSong ? <span class="built_in">this</span>.currentSong.al.picUrl : <span class="string">&#x27;http://s4.music.126.net/style/web2/img/default/default_album.jpg&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>wy-player.component.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;m-player&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> [<span class="attr">src</span>]=<span class="string">&quot;picUrl&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;play&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;words clearfix  &quot;</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;ellipsis margin-bottom-none&quot;</span>&gt;</span>&#123;&#123;currentSong?.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>  <span class="attr">class</span>=<span class="string">&quot;songs clearfix margin-bottom-none &quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of currentSong?.ar; last as isLast&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> [<span class="attr">hidden</span>]=<span class="string">&quot;isLast&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;time&quot;</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">em</span>&gt;</span>&#123;&#123;currentTime | formatTime&#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span> / &#123;&#123;duration |  formatTime&#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> #<span class="attr">audio</span> [<span class="attr">src</span>]=<span class="string">&quot;currentSong?.url&quot;</span> (<span class="attr">canplay</span>)=<span class="string">&quot;onCanPlay()&quot;</span> (<span class="attr">timeupdate</span>)=<span class="string">&quot;onTimeUpdate($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
将src和歌名等信息使用插值的方式渲染进去，其中有做处理的是时间的显示，用管道做了格式化。</li>
</ul>
<hr>
<ul>
<li>format-time.pipe.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">transform (time: <span class="built_in">number</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (time) &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = time | <span class="number">0</span>; <span class="comment">// 创建临时变量存取参数，并向下取整</span></span><br><span class="line">        <span class="keyword">const</span> minute = temp / <span class="number">60</span> | <span class="number">0</span>; <span class="comment">// 计算分钟</span></span><br><span class="line">        <span class="keyword">const</span> second = (temp % <span class="number">60</span>).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>); <span class="comment">// 计算秒,转为字符是为了如果秒为个位，可在前边补0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;minute&#125;</span>:<span class="subst">$&#123;second&#125;</span>`</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;00:00&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>padStart():<br>用另一个字符串填充当前字符串(如果需要的话，会重复多次)，以便产生的字符串达到给定的长度。从当前字符串的左侧开始填充。<br><img data-src="https://img-blog.csdnimg.cn/20201212182828446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"><br>与之成对的是padEnd()，用法类似，后置填补。</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="切歌"><a href="#切歌" class="headerlink" title="切歌"></a>切歌</h2><p><img data-src="https://img-blog.csdnimg.cn/20201213160115124.png" alt="在这里插入图片描述"><br>在按钮上添加点击事件</p>
<ul>
<li><p>wy-player,componentn.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;btns&quot;</span>&gt;</span><br><span class="line">         &lt;i <span class="keyword">class</span>=<span class="string">&quot;prev&quot;</span> (click)=<span class="string">&quot;onPrev(currentIndex - 1)&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">         &lt;i <span class="keyword">class</span>=<span class="string">&quot;toggle&quot;</span> [<span class="keyword">class</span>.playing]=<span class="string">&quot;playing&quot;</span> (click)=<span class="string">&quot;onToggle()&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">         &lt;i <span class="keyword">class</span>=<span class="string">&quot;next&quot;</span> (click)=<span class="string">&quot;onNext(currentIndex + 1)&quot;</span>&gt;&lt;/i&gt;  </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>wy-player.component.html</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 播放-暂停</span></span><br><span class="line">onToggle () &#123;</span><br><span class="line">    <span class="comment">// 刚初始化的时候，有播放列表，但是当前播放歌曲不存在</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.currentSong) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.playList.length) &#123;</span><br><span class="line">            <span class="comment">// 刚切换歌曲，songReady未准备好</span></span><br><span class="line">            <span class="built_in">this</span>.updateIndex(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.songReady) &#123;</span><br><span class="line">            <span class="built_in">this</span>.playing = !<span class="built_in">this</span>.playing;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.playing) &#123;</span><br><span class="line">                <span class="built_in">this</span>.audioEl.play()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.audioEl.pause()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上一曲</span></span><br><span class="line">onPrev (index: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.songReady) &#123; <span class="keyword">return</span> &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.playList.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.loop();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> newIndex = index &lt; <span class="number">0</span> ? <span class="built_in">this</span>.songList.length - <span class="number">1</span> : index;</span><br><span class="line">        <span class="built_in">this</span>.updateIndex(newIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下一曲</span></span><br><span class="line">onNext (index: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.songReady) &#123; <span class="keyword">return</span> &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.playList.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.loop();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;palyList&#x27;</span>, <span class="built_in">this</span>.playList, index);</span><br><span class="line">        <span class="keyword">const</span> newIndex = index &gt;= <span class="built_in">this</span>.playList.length ? <span class="number">0</span> : index;</span><br><span class="line">        <span class="built_in">this</span>.updateIndex(newIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单曲循环</span></span><br><span class="line"><span class="keyword">private</span> loop () &#123;</span><br><span class="line">	<span class="comment">// 设置当前播放位置为初始值</span></span><br><span class="line">    <span class="built_in">this</span>.audioEl.currentTime = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.play()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切歌回调</span></span><br><span class="line"><span class="keyword">private</span> updateIndex (index: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.store$.dispatch(SetCurrentIndex(&#123; currentIndex: index &#125;));</span><br><span class="line">    <span class="built_in">this</span>.songReady = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 播放事件</span></span><br><span class="line">onCanPlay () &#123;</span><br><span class="line">    <span class="built_in">this</span>.songReady = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">this</span>.play();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新已听时间</span></span><br><span class="line">onTimeUpdate (e: Event) &#123;</span><br><span class="line">    <span class="built_in">this</span>.currentTime = (&lt;HTMLAudioElement&gt;e.target).currentTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 播放回调</span></span><br><span class="line"><span class="keyword">private</span> play () &#123;</span><br><span class="line">    <span class="built_in">this</span>.audioEl.play();</span><br><span class="line">    <span class="built_in">this</span>.playing = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击图标，触发onNext(index： number)下一曲事件，方法中先判断歌曲是否能听，能则判断当前歌曲列表是否只有一首歌，是则循环播放，否则更改歌曲下标，播放下一首歌曲。而暂停与播放则是调用audio的原生属性。</p>
</li>
</ul>
<hr>
<h2 id="缓冲条与进度条"><a href="#缓冲条与进度条" class="headerlink" title="缓冲条与进度条"></a>缓冲条与进度条</h2><ul>
<li><p>wy-player.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-wy-slider</span> [<span class="attr">bufferOffset</span>]=<span class="string">&quot;bufferPercent&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;percent&quot;</span> (<span class="attr">wyOnAfterChange</span>)=<span class="string">&quot;onPercentChange($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-wy-slider</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> #<span class="attr">audio</span> [<span class="attr">src</span>]=<span class="string">&quot;currentSong?.url&quot;</span> (<span class="attr">canplay</span>)=<span class="string">&quot;onCanPlay()&quot;</span> (<span class="attr">timeupdate</span>)=<span class="string">&quot;onTimeUpdate($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>wy-player.component.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新进度条</span></span><br><span class="line">  onTimeUpdate (e: Event) &#123;</span><br><span class="line">  	<span class="comment">// 当前已听时间</span></span><br><span class="line">      <span class="built_in">this</span>.currentTime = (&lt;HTMLAudioElement&gt;e.target).currentTime;</span><br><span class="line">      <span class="comment">// 进度条百分比</span></span><br><span class="line">      <span class="built_in">this</span>.percent = (<span class="built_in">this</span>.currentTime / <span class="built_in">this</span>.duration) * <span class="number">100</span>;</span><br><span class="line">      <span class="comment">// 已缓冲TimeRanges</span></span><br><span class="line">      <span class="keyword">const</span> buffered = <span class="built_in">this</span>.audioEl.buffered;</span><br><span class="line">      <span class="comment">// 先判断缓存条是否存在以及百分比是否小于100</span></span><br><span class="line">      <span class="keyword">if</span> (buffered.length &amp;&amp; <span class="built_in">this</span>.bufferPercent &lt; <span class="number">100</span>) &#123;</span><br><span class="line">      	<span class="comment">// 缓冲进度百分比</span></span><br><span class="line">          <span class="built_in">this</span>.bufferPercent = (buffered.end(<span class="number">0</span>) / <span class="built_in">this</span>.duration) * <span class="number">100</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/2020121318030524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
<hr>
<h2 id="音量控制"><a href="#音量控制" class="headerlink" title="音量控制"></a>音量控制</h2><p>初始化网页时给与默认音量，音量按钮可以设置audio中volume的大小，另外一个需求就是音量小面板的显隐，在点击底部黑色框之外的地方使其隐藏。</p>
<ul>
<li><p>wy-player.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;m-player&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;selfClick = true&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--音量图标--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;volume&quot;</span> <span class="attr">title</span>=<span class="string">&quot;音量&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;toggleVolPanel()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--音量组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control-vol&quot;</span> [<span class="attr">hidden</span>]=<span class="string">&quot;!showVolumePanel&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-wy-slider</span> [<span class="attr">wyVertical</span>]=<span class="string">&quot;true&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;volume&quot;</span> (<span class="attr">ngModelChange</span>)=<span class="string">&quot;onVolumeChange($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-wy-slider</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>togglePanel()来触发面板的显隐，wyVertical来设置进度条的方向，volume绑定声音的初始值，onVolumeChange()做事件监听。</p>
</li>
<li><p>wy-player.component.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 滑动播放条</span></span><br><span class="line">onPercentChange (e: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.audioEl.currentTime = <span class="built_in">this</span>.duration * (e / <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置音量</span></span><br><span class="line">onVolumeChange (per: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.audioEl.volume = per / <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制音量面板</span></span><br><span class="line">toggleVolPanel () &#123;</span><br><span class="line">    <span class="built_in">this</span>.togglePanel()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 音量回调</span></span><br><span class="line">togglePanel () &#123;</span><br><span class="line">    <span class="built_in">this</span>.showVolumePanel = !<span class="built_in">this</span>.showVolumePanel;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.showVolumePanel) &#123;</span><br><span class="line">        <span class="built_in">this</span>.bindDocumentClickListener();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.unbindDocumentClickListener();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定音量事件</span></span><br><span class="line"><span class="keyword">private</span> bindDocumentClickListener () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;win&#x27;</span>, <span class="built_in">this</span>.winClick);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.winClick) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;self&#x27;</span>, <span class="built_in">this</span>.selfClick);</span><br><span class="line">        <span class="built_in">this</span>.winClick = fromEvent(<span class="built_in">this</span>.doc, <span class="string">&#x27;click&#x27;</span>).subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.selfClick) &#123; <span class="comment">// 说明点击了播放器以外的地方</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;self&#x27;</span>, <span class="built_in">this</span>.selfClick);</span><br><span class="line">                <span class="built_in">this</span>.showVolumePanel = <span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">this</span>.unbindDocumentClickListener();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.selfClick = <span class="literal">false</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解绑音量事件</span></span><br><span class="line"><span class="keyword">private</span> unbindDocumentClickListener () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;win&#x27;</span>, <span class="built_in">this</span>.winClick);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.winClick) &#123;</span><br><span class="line">        <span class="built_in">this</span>.winClick.unsubscribe();</span><br><span class="line">        <span class="built_in">this</span>.winClick = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>在点击音量按钮之后，触发toggleVolPanel 方法，进而触发回调，在togglePanel 中现更改面板的显隐，再根据显隐true或false来对下一次点击进行绑定或解绑。当第一次点击时，同时也会触发组件的click事件（”selfClick = true”），这时也会进行音量事件的绑定。此时subscript类型的winClick未赋值，将会为其订阅一个click事件，如果selfclick不存在即表示点击了底部面板之外的地方，此时会隐藏音量面板，selfclick取false，在将事件解绑–取消订阅并将subscript类型的winClick置空。</strong></p>
<ul>
<li>wy-slider-component,ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> onDragEnd () &#123;</span><br><span class="line">      <span class="built_in">this</span>.wyOnAfterChange.emit(<span class="built_in">this</span>.value);</span><br><span class="line">      <span class="built_in">this</span>.toggleDragMoving(<span class="literal">false</span>);</span><br><span class="line">      <span class="built_in">this</span>.cdr.markForCheck();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
还有一个小优化在滑动进度条的时候，未优化之前歌曲会随着进度条的滑动而播放，声音就会很嘈杂，优化在鼠标释放之后才会给组件传送滑动的值。</li>
</ul>
<hr>
<h2 id="播放模式"><a href="#播放模式" class="headerlink" title="播放模式"></a>播放模式</h2><p>播放模式有三种：随机播放、单曲循环和循环播放，关于三种模式只需要对其进项模式转换即可，在reducer中拿到的songlist进行操作。随机播放即将playList打乱即可。</p>
<ul>
<li><p>wy-player.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;currentMode.type&quot;</span> [<span class="attr">title</span>]=<span class="string">&quot;currentMode.label&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;changeMode()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>图标样式和悬浮显示要随着mode的改变而动态改变。</p>
</li>
<li><p>wy-player.compoentn.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> modeTypes: PlayMode[] = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">&#x27;loop&#x27;</span>,</span><br><span class="line">        label: <span class="string">&#x27;循环&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">&#x27;random&#x27;</span>,</span><br><span class="line">        label: <span class="string">&#x27;随机&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">&#x27;singleLoop&#x27;</span>,</span><br><span class="line">        label: <span class="string">&#x27;单曲循环&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">    currentMode: PlayMode; <span class="comment">// 当前模式</span></span><br><span class="line">    modeCount = <span class="number">0</span>; <span class="comment">// 记录点击次数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听播放模式</span></span><br><span class="line">    <span class="keyword">private</span> watchPlayMode (mode: PlayMode) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;mode&#x27;</span>, mode);</span><br><span class="line">        <span class="built_in">this</span>.currentMode = mode;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.songList) &#123;</span><br><span class="line">            <span class="keyword">let</span> list = <span class="built_in">this</span>.songList.slice();</span><br><span class="line">            <span class="keyword">if</span> (mode.type === <span class="string">&#x27;random&#x27;</span>) &#123;</span><br><span class="line">                list = shuffle(<span class="built_in">this</span>.songList);</span><br><span class="line">                <span class="built_in">this</span>.updateCurrentIndex(list, <span class="built_in">this</span>.currentSong);</span><br><span class="line">                <span class="built_in">this</span>.store$.dispatch(SetPlayList(&#123; playList: list &#125;))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;list&#x27;</span>, list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 顺序打乱之后更新当前歌曲在新数组中的索引</span></span><br><span class="line">    <span class="keyword">private</span> updateCurrentIndex (list: Song[], song: Song) &#123;</span><br><span class="line">        <span class="keyword">const</span> newIndex = list.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.id === song.id);</span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetCurrentIndex(&#123; currentIndex: newIndex &#125;))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置播放模式</span></span><br><span class="line">    changeMode () &#123;</span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetPlayMode(&#123; playMode: modeTypes[++<span class="built_in">this</span>.modeCount % <span class="number">3</span>] &#125;))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>在触发更改播放模式changeMode(）时，会根据点击的次数来从所有模式modeTypes中取到下一个模式。通过设置动作SetPlayMode将当前模式更改。此时将会触发模式的监听方法，DOM将会根据mode来更换图标和文字。然后进行判断，如果此时歌曲列表存在并且播放模式是随机，就会打乱当前播放列表数组并且更新当前歌曲所在数组的索引与播放列表。</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 打乱数组</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>&lt;<span class="title">T</span>&gt; (<span class="params">arr: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = arr.slice();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 0和1之间的一个随机数</span></span><br><span class="line">        <span class="keyword">const</span> j = getRandomInt([<span class="number">0</span>, <span class="number">1</span>]);</span><br><span class="line">        [result[i], result[j]] = [result[j], result[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取[min, max]之间的一个随机数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getRandomInt</span> (<span class="params">range: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (range[<span class="number">1</span>] - range[<span class="number">0</span>] + <span class="number">1</span>) + range[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>代码到后期会对之前写的进行调整，可能会出现更改后遗漏更新的情况，所以在贴代码的时候会尽量跟clone下来的保持一致，而且api在现在这个版本中有一些变化，就单说获取歌单歌曲列表就有些许差异，但总体上不影响数据</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--获取完整数据</title>
    <url>/posts/ad61347b/</url>
    <content><![CDATA[<h1 id="现有问题"><a href="#现有问题" class="headerlink" title="现有问题"></a>现有问题</h1><p>根据playList/detail 的API拿到的数据是不完整的，tracks中只存在所有歌曲的前几条，因此要获取trackIds进而请求song/detail 的API。<br><img data-src="https://img-blog.csdnimg.cn/20201219104145174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"></p>
<hr>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ul>
<li><p>home.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--热门歌单开始--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;down&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;down-wrap&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">app-single-sheet</span></span></span><br><span class="line"><span class="tag">               <span class="attr">class</span>=<span class="string">&quot;sheet-item&quot;</span></span></span><br><span class="line"><span class="tag">               *<span class="attr">ngFor</span>=<span class="string">&quot;let item of songSheetList&quot;</span></span></span><br><span class="line"><span class="tag">               [<span class="attr">sheet</span>]=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">               (<span class="attr">onPlay</span>)=<span class="string">&quot;onPlaySheet($event)&quot;</span></span></span><br><span class="line"><span class="tag">             &gt;</span><span class="tag">&lt;/<span class="name">app-single-sheet</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--热门歌单结束--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>single-sheet.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> [<span class="attr">src</span>]=<span class="string">&quot;sheet.picUrl&quot;</span> [<span class="attr">alt</span>]=<span class="string">&quot;sheet.name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;num&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon erji&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; sheet.playCount | playCount &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon play&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;playSheet(sheet.id)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;dec&quot;</span>&gt;</span>&#123;&#123; sheet.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>single-sheet.component.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Output</span>() onPlay = <span class="keyword">new</span> EventEmitter&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line"> </span><br><span class="line">playSheet(id: <span class="built_in">number</span>)&#123;</span><br><span class="line">  <span class="built_in">this</span>.onPlay.emit(id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击子组件，触发playSheet回调，将拿到的歌单ID发送给父组件</p>
</li>
<li><p>home.componetn.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点击歌单，获取歌单信息</span></span><br><span class="line">onPlaySheet (id: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.sheetServe.playSheet(id).subscribe(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetSongList(&#123; songList: list &#125;));</span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetPlayList(&#123; playList: list &#125;));</span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetCurrentIndex(&#123; currentIndex: <span class="number">0</span> &#125;));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>sheet.service.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 获取歌单详细信息</span></span><br><span class="line">playSheet (id: <span class="built_in">number</span>): Observable&lt;Song[]&gt; &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.getSongSheetDetail(id)</span><br><span class="line">         .pipe(</span><br><span class="line">             pluck(<span class="string">&#x27;trackIds&#x27;</span>),</span><br><span class="line">             switchMap(<span class="function"><span class="params">trackIds</span> =&gt;</span> <span class="built_in">this</span>.getAllSongDetail(trackIds))</span><br><span class="line">         )</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="comment">// 获取歌单详情</span></span><br><span class="line"> getSongSheetDetail (id: <span class="built_in">number</span>): Observable&lt;SongSheet&gt; &#123;</span><br><span class="line">     <span class="keyword">const</span> params = <span class="keyword">new</span> HttpParams().set(<span class="string">&#x27;id&#x27;</span>, id.toString());</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="built_in">this</span>.url + <span class="string">&quot;playlist/detail&quot;</span>, &#123; params &#125;)</span><br><span class="line">         .pipe(map(<span class="function">(<span class="params">res: &#123; playlist: SongSheet &#125;</span>) =&gt;</span> res.playlist));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 获取全部歌单详情</span></span><br><span class="line">    getAllSongDetail (trackIds: Song[]): Observable&lt;Song[]&gt; &#123;</span><br><span class="line">     <span class="keyword">const</span> songArr = <span class="built_in">Array</span>.isArray(trackIds) ? trackIds.slice() : [trackIds];</span><br><span class="line">     <span class="keyword">const</span> ids = songArr.map(<span class="function"><span class="params">item</span> =&gt;</span> item.id).join(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">     <span class="keyword">const</span> params = <span class="keyword">new</span> HttpParams().set(<span class="string">&#x27;ids&#x27;</span>, ids)</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="built_in">this</span>.url + <span class="string">&quot;song/detail&quot;</span>, &#123; params &#125;)</span><br><span class="line">         .pipe(map(<span class="function">(<span class="params">res: &#123; songs: Song[] &#125;</span>) =&gt;</span> res.songs), switchMap(<span class="function"><span class="params">songs</span> =&gt;</span> <span class="built_in">this</span>.songServe.getSongList(songs)))</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>父组件调用playSheet()时将会先调用getSongSheetDetail 来获取API返回值中的playList属性，在管道中通过pluck拿到其中的trackIds，这时通过getAllSongDetail 方法将所有ids发给song/detailAPI，将拿到的数据给到获取URL的API中，再将其拼接在一起即可返回所有数据</p>
<p><img data-src="https://img-blog.csdnimg.cn/20201219140313741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"></p>
<hr>
<p>这样虽然能拿到很多数据，但通过对比发现会缺少一些数据，对于里边的参数不是很清楚，而且关于获取所有数据正确与否也尚待验证。目前这个数据量只是为了验证使用betterScroll插件是否执行，所以在埋一个坑，后需调整吧</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--12、播放歌单</title>
    <url>/posts/2ac17ac2/</url>
    <content><![CDATA[<h1 id="逻辑过程"><a href="#逻辑过程" class="headerlink" title="逻辑过程"></a>逻辑过程</h1><p>在初始化ngrx之后，就要考虑如何使用，事件的场景是点击歌单之后会播放歌曲，所以要声明一个播放事件。</p>
<ul>
<li><p>home.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--热门歌单开始--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;down&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;down-wrap&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">app-single-sheet</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;sheet-item&quot;</span></span></span><br><span class="line"><span class="tag">            *<span class="attr">ngFor</span>=<span class="string">&quot;let item of songSheetList&quot;</span></span></span><br><span class="line"><span class="tag">            [<span class="attr">sheet</span>]=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">            (<span class="attr">onPlay</span>)=<span class="string">&quot;onPlaySheet($event)&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span><span class="tag">&lt;/<span class="name">app-single-sheet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--热门歌单结束--&gt;</span></span><br></pre></td></tr></table></figure>
<p>在点击之后，触发onPlaySheet（）事件</p>
<a id="more"></a>
</li>
<li><p>home.component.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> route: ActivatedRoute,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> sheetServe: SheetService,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> store$: Store&lt;AppStoreModule&gt;,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.route.data.pipe(map(<span class="function"><span class="params">res</span> =&gt;</span> res.homeDatas)).subscribe(<span class="function">(<span class="params">[banners, hotTags, songSheetList, singers]</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.banners = banners;</span><br><span class="line">        <span class="built_in">this</span>.hotTags = hotTags;</span><br><span class="line">        <span class="built_in">this</span>.songSheetList = songSheetList;</span><br><span class="line">        <span class="built_in">this</span>.singers = singers.slice(<span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 点击歌单，获取歌单信息</span></span><br><span class="line">onPlaySheet (id: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.sheetServe.playSheet(id).subscribe(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetSongList(&#123; songList: list &#125;));</span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetPlayList(&#123; playList: list &#125;));</span><br><span class="line">        <span class="built_in">this</span>.store$.dispatch(SetCurrentIndex(&#123; currentIndex: <span class="number">0</span> &#125;));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过sheetService中的playSheet方法将拼装好URL的歌曲列表通过player.action.ts中设置的动作，来获取当前列表中下表为0的歌曲。</p>
</li>
</ul>
<p>此时player.selector.ts中的函数值就会发生改变，就会触发订阅。所以在wy-player模块就会被触发。</p>
<ul>
<li>wy-player.component.html<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> #<span class="attr">audio</span> [<span class="attr">src</span>]=<span class="string">&quot;currentSong?.url&quot;</span> (<span class="attr">canplay</span>)=<span class="string">&quot;onCanPlay()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>wy-player.component.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   songList: Song[];</span><br><span class="line">   playList: Song[];</span><br><span class="line">   currentIndex: <span class="built_in">number</span>;</span><br><span class="line">   currentSong: Song;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ViewChild</span>(<span class="string">&#x27;audio&#x27;</span>, &#123; <span class="keyword">static</span>: <span class="literal">true</span> &#125;) <span class="keyword">private</span> audio: ElementRef;</span><br><span class="line">   <span class="keyword">private</span> audioEl: HTMLAudioElement;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">       <span class="keyword">private</span> store$: Store&lt;AppStoreModule&gt;</span></span><br><span class="line"><span class="params">   </span>) &#123;</span><br><span class="line">       <span class="keyword">const</span> appStore$ = <span class="built_in">this</span>.store$.pipe(select(getPlayer));</span><br><span class="line"></span><br><span class="line">       appStore$.pipe(select(getSongList)).subscribe(<span class="function"><span class="params">list</span> =&gt;</span> <span class="built_in">this</span>.watchList(list, <span class="string">&#x27;songList&#x27;</span>));</span><br><span class="line">       appStore$.pipe(select(getPlayList)).subscribe(<span class="function"><span class="params">list</span> =&gt;</span> <span class="built_in">this</span>.watchList(list, <span class="string">&#x27;playerList&#x27;</span>));</span><br><span class="line">       appStore$.pipe(select(getCurrentIndex)).subscribe(<span class="function"><span class="params">index</span> =&gt;</span> <span class="built_in">this</span>.watchCurrentIndex(index));</span><br><span class="line">       appStore$.pipe(select(getPlayMode)).subscribe(<span class="function"><span class="params">mode</span> =&gt;</span> <span class="built_in">this</span>.watchPlayMode(mode))</span><br><span class="line">       appStore$.pipe(select(getCurrentSong)).subscribe(<span class="function"><span class="params">song</span> =&gt;</span> <span class="built_in">this</span>.watchCurrentSong(song));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ngOnInit () &#123;</span><br><span class="line">   <span class="comment">// 另存选中的audioDOM</span></span><br><span class="line">       <span class="built_in">this</span>.audioEl = <span class="built_in">this</span>.audio.nativeElement;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听列表，type用来标识song 和 player</span></span><br><span class="line">   <span class="keyword">private</span> watchList (list: Song[], <span class="keyword">type</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line">       <span class="built_in">this</span>[<span class="keyword">type</span>] = list;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 监听当前歌曲下标</span></span><br><span class="line">   <span class="keyword">private</span> watchCurrentIndex (index: <span class="built_in">number</span>) &#123;</span><br><span class="line">       <span class="built_in">this</span>.currentIndex = index;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 监听播放模式</span></span><br><span class="line">   <span class="keyword">private</span> watchPlayMode (mode: PlayMode) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;mode&#x27;</span>, mode);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 监听当前歌曲</span></span><br><span class="line">   <span class="keyword">private</span> watchCurrentSong (song: Song) &#123;</span><br><span class="line">       <span class="built_in">this</span>.currentSong = song;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;song&#x27;</span>, song);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 触发播放</span></span><br><span class="line">   onCanPlay () &#123;</span><br><span class="line">       <span class="built_in">this</span>.play();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 播放回调</span></span><br><span class="line">   <span class="keyword">private</span> play () &#123;</span><br><span class="line">       <span class="built_in">this</span>.audioEl.play();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
其中有点不同的是ngrx中的select方法，因为版本的原因而参数不能使用字符串，所以需要另外声明一个变量。<br><img data-src="https://img-blog.csdnimg.cn/20201212120602961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"></li>
</ul>
<ul>
<li>player.selector.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> selectPlayerStates = <span class="function">(<span class="params">state: PlayState</span>) =&gt;</span> state;</span><br><span class="line"><span class="comment">// 另外声明getPlayer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getPlayer = createFeatureSelector&lt;PlayState&gt;(<span class="string">&#x27;player&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getPlaying = createSelector(selectPlayerStates, <span class="function">(<span class="params">state: PlayState</span>) =&gt;</span> state.playing)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getPlayList = createSelector(selectPlayerStates, <span class="function">(<span class="params">state: PlayState</span>) =&gt;</span> state.playList)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getSongList = createSelector(selectPlayerStates, <span class="function">(<span class="params">state: PlayState</span>) =&gt;</span> state.songList)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getPlayMode = createSelector(selectPlayerStates, <span class="function">(<span class="params">state: PlayState</span>) =&gt;</span> state.playMode)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getCurrentIndex = createSelector(selectPlayerStates, <span class="function">(<span class="params">state: PlayState</span>) =&gt;</span> state.currentIndex)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getCurrentSong = createSelector(selectPlayerStates, <span class="function">(<span class="params">&#123; playList, currentIndex &#125;: PlayState</span>) =&gt;</span> playList[currentIndex])</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>页面没有什么变化，但是点击歌单上的播放按钮之后就会播放音乐。</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】 --11、ngrx初始化</title>
    <url>/posts/cc76f91f/</url>
    <content><![CDATA[<h1 id="ngrx"><a href="#ngrx" class="headerlink" title="ngrx"></a>ngrx</h1><h2 id="什么是ngrx"><a href="#什么是ngrx" class="headerlink" title="什么是ngrx"></a><strong>什么是ngrx</strong></h2><p><a href="https://ngrx.io/docs">ngrx官网</a><br>ngrx是Angular基于Rxjs的状态管理，保存了Redux的核心概念，并使用RxJs扩展的Redux实现。使用Observable来简化监听事件和订阅等操作。</p>
<h2 id="为什么要用ngrx"><a href="#为什么要用ngrx" class="headerlink" title="为什么要用ngrx"></a><strong>为什么要用ngrx</strong></h2><p>我们在开发中经常会碰到，这个界面的按钮需要在某种情况下变灰；那个界面上需要根据不同情况显示不同数量的Tab；这个界面的某个值的设定会影响另一个界面的某种展现等等。应该说应用开发中最复杂的部分就在于这些状态的管理。很多项目随着需求的迭代，代码规模逐渐扩大、团队人员水平参差不齐就会遇到各种状态管理极其混乱，导致代码的可维护性和扩展性降低。</p>
<blockquote>
<ul>
<li>Redux是为了解决应用程序状态（State）管理而提出的一种解决方案。对于应用开发来讲，UI上显示的数据、控件状态、登陆状态、数据加载画面的不同状态等等全部可以看作状态。</li>
<li>Redux 的三个概念：Reducer、Action、Store</li>
<li>Store 一般负责：保存应用状态、提供访问状态的方法、派发Action的方法以及对于状态订阅者的注册和取消等。(可以理解成内存数据库)</li>
<li>Reducer 其实就是用来维护状态的。reduce就是对数组元素进行累加计算成为一个值。（可以理解成数据库表，但这种说法不太精确）</li>
<li>Action 在Redux规范中，所有的会引发状态更新的交互行为都必须通过一个显性定义的Action来进行。(Reducer和Store之间的通信靠Action)</li>
</ul>
</blockquote>
<a id="more"></a>
<ul>
<li>示意图<br><img data-src="https://img-blog.csdnimg.cn/2020120514260743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"><br><img data-src="https://img-blog.csdnimg.cn/20201205142511134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70"></li>
</ul>
<hr>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>安装ngrx，使用ng add @ngrx/store创建安装命令，在用ng add @ngrx/store-devtools来安装环境测试工具</p>
<p>根据所需要的文件来创建相应的文件，在Store文件夹下创建actions、reducers和selectors文件夹。</p>
<ul>
<li>player.reducer.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置动作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SetPlaying = createAction(<span class="string">&#x27;[player] set playing&#x27;</span>, props&lt;&#123; playing: <span class="built_in">boolean</span> &#125;&gt;());</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SetPlayList = createAction(<span class="string">&#x27;[player] set playList&#x27;</span>, props&lt;&#123; playList: Song[] &#125;&gt;());</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SetSongList = createAction(<span class="string">&#x27;[player] set songList&#x27;</span>, props&lt;&#123; songList: Song[] &#125;&gt;());</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SetPlayMode = createAction(<span class="string">&#x27;[player] set playMode&#x27;</span>, props&lt;&#123; playMode: PlayMode &#125;&gt;());</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SetCurrentIndex = createAction(<span class="string">&#x27;[player] set currentIndex&#x27;</span>, props&lt;&#123; currentIndex: <span class="built_in">number</span> &#125;&gt;());</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>player.reducer.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> PlayState = &#123;</span><br><span class="line">    playing: <span class="built_in">boolean</span>; <span class="comment">// 播放状态</span></span><br><span class="line">    playMode: PlayMode; <span class="comment">// 播放模式</span></span><br><span class="line">    songList: Song[]; <span class="comment">// 歌曲列表</span></span><br><span class="line">    playList: Song[]; <span class="comment">// 播放列表</span></span><br><span class="line">    currentIndex: <span class="built_in">number</span> <span class="comment">// 当前正在播放的索引</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始数据格式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initialState: PlayState = &#123;</span><br><span class="line">    playing: <span class="literal">false</span>,</span><br><span class="line">    songList: [],</span><br><span class="line">    playList: [],</span><br><span class="line">    playMode: &#123; <span class="keyword">type</span>: <span class="string">&#x27;loop&#x27;</span>, label: <span class="string">&#x27;循环&#x27;</span> &#125;,</span><br><span class="line">    currentIndex: <span class="number">-1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注册动作</span></span><br><span class="line"><span class="keyword">const</span> reducer = createReducer(</span><br><span class="line">    initialState,</span><br><span class="line">    on(SetPlaying, <span class="function">(<span class="params">state, &#123; playing &#125;</span>) =&gt;</span> (&#123; ...state, playing &#125;)),</span><br><span class="line">    on(SetPlayList, <span class="function">(<span class="params">state, &#123; playList &#125;</span>) =&gt;</span> (&#123; ...state, playList &#125;)),</span><br><span class="line">    on(SetSongList, <span class="function">(<span class="params">state, &#123; songList &#125;</span>) =&gt;</span> (&#123; ...state, songList &#125;)),</span><br><span class="line">    on(SetPlayMode, <span class="function">(<span class="params">state, &#123; playMode &#125;</span>) =&gt;</span> (&#123; ...state, playMode &#125;)),</span><br><span class="line">    on(SetCurrentIndex, <span class="function">(<span class="params">state, &#123; currentIndex &#125;</span>) =&gt;</span> (&#123; ...state, currentIndex &#125;)),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">playerReducer</span> (<span class="params">state: PlayState, action: Action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> reducer(state, action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>player.selector.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> selectPlayerStates = <span class="function">(<span class="params">state: PlayState</span>) =&gt;</span> state;</span><br><span class="line"><span class="comment">// 声明各个动作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getPlaying = createSelector(selectPlayerStates, <span class="function">(<span class="params">state: PlayState</span>) =&gt;</span> state.playing)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getPlayList = createSelector(selectPlayerStates, <span class="function">(<span class="params">state: PlayState</span>) =&gt;</span> state.playList)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getSongList = createSelector(selectPlayerStates, <span class="function">(<span class="params">state: PlayState</span>) =&gt;</span> state.songList)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getPlayMode = createSelector(selectPlayerStates, <span class="function">(<span class="params">state: PlayState</span>) =&gt;</span> state.playMode)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getCurrentIndex = createSelector(selectPlayerStates, <span class="function">(<span class="params">state: PlayState</span>) =&gt;</span> state.currentIndex)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getCurrentSong = createSelector(selectPlayerStates, <span class="function">(<span class="params">&#123; playList, currentIndex &#125;: PlayState</span>) =&gt;</span> playList[currentIndex])</span><br></pre></td></tr></table></figure>
在Store下定义配置文件index.ts，其中导入StoreModule</li>
<li>index.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">    declarations: [],</span><br><span class="line">    imports: [</span><br><span class="line">        StoreModule.forRoot(&#123; <span class="attr">player</span>: playerReducer &#125;, &#123;</span><br><span class="line">            runtimeChecks: &#123;</span><br><span class="line">                strictActionImmutability: <span class="literal">true</span>,</span><br><span class="line">                strictActionSerializability: <span class="literal">true</span>,</span><br><span class="line">                strictStateSerializability: <span class="literal">true</span>,</span><br><span class="line">                strictStateImmutability: <span class="literal">true</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 调试插件</span></span><br><span class="line">        StoreDevtoolsModule.instrument(&#123;</span><br><span class="line">            maxAge: <span class="number">20</span>,</span><br><span class="line">            logOnly: environment.production, <span class="comment">// 生产环境下仅打印log</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
在配置模块下注入StoreModule，定义启动reduce，在actions中定义动作，receder中注册使用。</li>
</ul>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p><a href="https://www.cnblogs.com/tarena/p/8473961.html">不苦先生</a><br><a href="https://www.jianshu.com/p/0deec21d728f">接灰的电子产品</a><br><a href="https://blog.csdn.net/weixin_42227767/article/details/104562135">霞霞的博客</a><br>感谢以上大佬的博客，点击可看原文。</p>
</blockquote>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】 --10、滑块进度条</title>
    <url>/posts/84083a9e/</url>
    <content><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>首页主体样式大致实现，底部样式还有所欠缺，所以底部应加上个别信息与播放的进度条，这个进度条类似Zorro的滑块，点击与滑动，其中包括事件的绑定与组件的嵌套。其中进度条不仅仅实现在歌曲进度上，在音量控制上也可以复用，为了方便后期在底部添加各种功能而避免代码臃肿，将进度条分离开是最好的选择。</p>
<a id="more"></a>
<hr>
<p>在app.component.html底部中添加新创建的wy-player模块路由 <strong>&lt; app-wy-player&gt;&lt; /app-wy-player&gt;</strong></p>
<ul>
<li>wy-player.component.html – 临时数据填充<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;m-player&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lock&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hand&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btns&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--临时图片--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://p1.music.126.net/v_-wonc6yEl9UVa-aPNOSQ==/109951165350855516.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;play&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;words clearfix hide &quot;</span> &gt;</span></span><br><span class="line">            <span class="comment">&lt;!--临时数据--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;ellipsis margin-bottom-none&quot;</span>&gt;</span>歌名<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>  <span class="attr">class</span>=<span class="string">&quot;songs clearfix margin-bottom-none &quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span>&gt;</span>歌手1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span>&gt;</span>歌手2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-wrap&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--进度条组件 buffoffset为缓存偏移量，slidervalue为歌曲的偏移量--&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">app-wy-slider</span> [<span class="attr">bufferOffset</span>]=<span class="string">&quot;buffOffset&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;sliderValue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-wy-slider</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;time&quot;</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">em</span>&gt;</span>02:11<span class="tag">&lt;/<span class="name">em</span>&gt;</span> / 04:35</span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;oper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;like&quot;</span> <span class="attr">title</span>=<span class="string">&quot;收藏&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;share&quot;</span> <span class="attr">title</span>=<span class="string">&quot;分享&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ctrl&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;volume&quot;</span> <span class="attr">title</span>=<span class="string">&quot;音量&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;loop&quot;</span> <span class="attr">title</span>=<span class="string">&quot;循环&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;open&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control-vol&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--进度条组件 vertical表示滑块是否是垂直--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">app-wy-slider</span> [<span class="attr">wyVertical</span>]=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-wy-slider</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
其效果呈现后，获取鼠标点击在进度条的位置传给进度条的组件，从而改变进度条的样式以及位置。所以要在ts中事先声明这两个变量。</li>
</ul>
<hr>
<h1 id="wy-slider"><a href="#wy-slider" class="headerlink" title="wy-slider"></a>wy-slider</h1><ul>
<li><h2 id="wy-slider-component-html"><a href="#wy-slider-component-html" class="headerlink" title="wy-slider.component.html"></a>wy-slider.component.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wy-slider&quot;</span> #<span class="attr">wySlider</span> [<span class="attr">class.wy-slider-vertical</span>]=<span class="string">&quot;wyVertical&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-wy-slider-track</span> [<span class="attr">wyVertical</span>]=<span class="string">&quot;wyVertical&quot;</span> [<span class="attr">wyLength</span>]=<span class="string">&quot;bufferOffset&quot;</span> [<span class="attr">wyBuffer</span>]=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-wy-slider-track</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-wy-slider-track</span> [<span class="attr">wyVertical</span>]=<span class="string">&quot;wyVertical&quot;</span> [<span class="attr">wyLength</span>]=<span class="string">&quot;offset&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-wy-slider-track</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-wy-slider-handle</span> [<span class="attr">wyVertical</span>]=<span class="string">&quot;wyVertical&quot;</span> [<span class="attr">wyOffset</span>]=<span class="string">&quot;offset&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-wy-slider-handle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>滑块的DOM仅有三个，分别是显示缓存进度，歌曲进度和滑块按钮。</p>
</li>
<li><h2 id="wy-slider-handle-component-ts"><a href="#wy-slider-handle-component-ts" class="headerlink" title="wy-slider.handle.component.ts"></a>wy-slider.handle.component.ts</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ChangeDetectionStrategy, Component, Input, OnChanges, impleChanges &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="comment">// 数据类型自定义类</span></span><br><span class="line"><span class="keyword">import</span> &#123; WySliderStyle &#125; <span class="keyword">from</span> <span class="string">&#x27;./wy-slider-types&#x27;</span>; </span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    selector: <span class="string">&#x27;app-wy-slider-handle&#x27;</span>,</span><br><span class="line">    template: <span class="string">`&lt;div class=&quot;wy-slider-handle&quot; [ngStyle]=&quot;style&quot;&gt;&lt;/div&gt;`</span>,</span><br><span class="line">    changeDetection: ChangeDetectionStrategy.OnPush</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[ngstyle]</span></span><br><span class="line"><span class="comment">一个属性指令，用于更新容器元素的样式。</span></span><br><span class="line"><span class="comment">可以通过指定用冒号分隔的键值对来设置一个或多个样式属性。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> WySliderHandleComponent <span class="keyword">implements</span> OnChanges &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>() wyVertical = <span class="literal">false</span>; <span class="comment">// 是否是垂直模式</span></span><br><span class="line">    <span class="meta">@Input</span>() wyOffset: <span class="built_in">number</span>; <span class="comment">// 偏移量</span></span><br><span class="line"></span><br><span class="line">    style: WySliderStyle = &#123;&#125; <span class="comment">// DOM样式</span></span><br><span class="line">   </span><br><span class="line">    ngOnChanges (changes: SimpleChanges): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (changes[<span class="string">&#x27;wyOffset&#x27;</span>]) &#123;</span><br><span class="line">            <span class="comment">// 偏移量发生改变后，判断是否是垂直，是则更改DOM的bottom样式，否则更改DOM的left样式--更改量都是百分比。</span></span><br><span class="line">            <span class="built_in">this</span>.style[<span class="built_in">this</span>.wyVertical ? <span class="string">&#x27;bottom&#x27;</span> : <span class="string">&#x27;left&#x27;</span>] = <span class="built_in">this</span>.wyOffset + <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>handle.component.ts中仅需要判断两个值即可，是否是垂直模式和偏移量的值，而偏移量是随时都会变化的，所以引用OnChanges生命周期钩子来实时做出变化。</p>
<blockquote>
<p>[OnChanges]：一个生命周期钩子，当指令的任何一个可绑定属性发生变化时调用。 定义一个 ngOnChanges() 方法来处理这些变更。</p>
</blockquote>
</li>
<li><h2 id="wy-slider-track-component-ts"><a href="#wy-slider-track-component-ts" class="headerlink" title="wy-slider-track.component.ts"></a>wy-slider-track.component.ts</h2></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ChangeDetectionStrategy, Component, Input, OnChanges,SimpleChanges &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; WySliderStyle &#125; <span class="keyword">from</span> <span class="string">&#x27;./wy-slider-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    selector: <span class="string">&#x27;app-wy-slider-track&#x27;</span>,</span><br><span class="line">    template: <span class="string">`&lt;div class=&quot;wy-slider-track&quot; [class.buffer]=&quot;wyBuffer&quot; [ngStyle]=&quot;style&quot;&gt;&lt;/div&gt;`</span>,</span><br><span class="line">    changeDetection: ChangeDetectionStrategy.OnPush</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> WySliderTrackComponent <span class="keyword">implements</span> OnInit, OnChanges &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>() wyVertical = <span class="literal">false</span>;  <span class="comment">// 是否垂直</span></span><br><span class="line">    <span class="meta">@Input</span>() wyLength: <span class="built_in">number</span>; <span class="comment">// 进度条长度</span></span><br><span class="line">    <span class="meta">@Input</span>() wyBuffer: <span class="literal">false</span>; <span class="comment">// 是否是缓冲，用来判断缓冲条样式</span></span><br><span class="line">    style: WySliderStyle = &#123;&#125;; <span class="comment">// DOM样式</span></span><br><span class="line">    </span><br><span class="line">    ngOnChanges (changes: SimpleChanges): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// 判断进度条长度是否改变</span></span><br><span class="line">        <span class="keyword">if</span> (changes[<span class="string">&#x27;wyLength&#x27;</span>]) &#123;</span><br><span class="line">            <span class="comment">// 如果是进度条垂直，更改DOM样式的高 -- 更改数值为百分比</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.wyVertical) &#123;</span><br><span class="line">                <span class="built_in">this</span>.style.height = <span class="built_in">this</span>.wyLength + <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">                <span class="built_in">this</span>.style.left = <span class="literal">null</span>;</span><br><span class="line">                <span class="built_in">this</span>.style.width = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果进度条水平，更改DOM样式的宽    --更该数值为百分比</span></span><br><span class="line">                <span class="built_in">this</span>.style.width = <span class="built_in">this</span>.wyLength + <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">                <span class="built_in">this</span>.style.bottom = <span class="literal">null</span>;</span><br><span class="line">                <span class="built_in">this</span>.style.height = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>与handle.ts的逻辑基本类似，都是根据输入属性的更改来做出样式的更改，track的区别就在于要先判断是否是垂直模式。</p>
<ul>
<li><h2 id="wy-slider-types-ts"><a href="#wy-slider-types-ts" class="headerlink" title="wy-slider-types.ts"></a>wy-slider-types.ts</h2></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"><span class="comment">// 滑块样式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> WySliderStyle &#123;</span><br><span class="line">    width?: <span class="built_in">string</span> | <span class="literal">null</span>;</span><br><span class="line">    height?: <span class="built_in">string</span> | <span class="literal">null</span>;</span><br><span class="line">    left?: <span class="built_in">string</span> | <span class="literal">null</span>;</span><br><span class="line">    bottom?: <span class="built_in">string</span> | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> SliderEventObserverConfig &#123;</span><br><span class="line">    start: <span class="built_in">string</span>;</span><br><span class="line">    move: <span class="built_in">string</span>;</span><br><span class="line">    end: <span class="built_in">string</span>;</span><br><span class="line">    filter: <span class="function">(<span class="params">e: Event</span>) =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line">    pluckKey: <span class="built_in">string</span>[];</span><br><span class="line">    startPlucked$?: Observable&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line">    moveResolved$?: Observable&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line">    end$?: Observable&lt;Event&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> SliderValue = <span class="built_in">number</span> | <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="wy-slider-component-ts"><a href="#wy-slider-component-ts" class="headerlink" title="wy-slider.component.ts"></a>wy-slider.component.ts</h2></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    selector: <span class="string">&#x27;app-wy-slider&#x27;</span>,</span><br><span class="line">    templateUrl: <span class="string">&#x27;./wy-slider.component.html&#x27;</span>,</span><br><span class="line">    styleUrls: [<span class="string">&#x27;./wy-slider.component.less&#x27;</span>],</span><br><span class="line">    encapsulation: ViewEncapsulation.None, <span class="comment">// 调整试图封装模式的默认值Emulated为none--将组件样式升为全局，使子组件也能使用</span></span><br><span class="line">    changeDetection: ChangeDetectionStrategy.OnPush,</span><br><span class="line">    providers: [&#123;</span><br><span class="line">        provide: NG_VALUE_ACCESSOR,</span><br><span class="line">        useExisting: forwardRef(<span class="function">() =&gt;</span> WySliderComponent),</span><br><span class="line">        multi: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> WySliderComponent <span class="keyword">implements</span> OnInit, OnDestroy, ControlValueAccessor &#123;</span><br><span class="line">    <span class="meta">@Input</span>() wyVertical = <span class="literal">false</span>; <span class="comment">// 是否垂直模式</span></span><br><span class="line">    <span class="meta">@Input</span>() wyMin = <span class="number">0</span>; <span class="comment">// 滑块最小值</span></span><br><span class="line">    <span class="meta">@Input</span>() wyMax = <span class="number">100</span>; <span class="comment">// 滑块最大值</span></span><br><span class="line">    <span class="meta">@Input</span>() bufferOffset: SliderValue = <span class="number">0</span>; <span class="comment">// 缓存值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> sliderDom: HTMLDivElement;  <span class="comment">// 用于保存获取到的DOM节点</span></span><br><span class="line">    <span class="comment">// 用于获取#wyslider的节点DOM</span></span><br><span class="line">    <span class="meta">@ViewChild</span>(<span class="string">&#x27;wySlider&#x27;</span>, &#123; <span class="keyword">static</span>: <span class="literal">true</span> &#125;) <span class="keyword">private</span> wySlider: ElementRef </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> dragStart$: Observable&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line">    <span class="keyword">private</span> dragMove$: Observable&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line">    <span class="keyword">private</span> dragEnd$: Observable&lt;Event&gt;;</span><br><span class="line">    <span class="keyword">private</span> dragStart_: Subscription | <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> dragMove_: Subscription | <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> dragEnd_: Subscription | <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> isDragging = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    value: SliderValue = <span class="literal">null</span>;</span><br><span class="line">    offset: SliderValue = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        <span class="meta">@Inject</span>(DOCUMENT) <span class="keyword">private</span> doc: Document, <span class="comment">// 原生DOM可能会影响服务端渲染效果，所以使用注入类型</span></span></span><br><span class="line"><span class="params">        <span class="keyword">private</span> cdr: ChangeDetectorRef</span></span><br><span class="line"><span class="params">    </span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    ngOnInit () &#123;</span><br><span class="line">    	<span class="comment">// 保存节点</span></span><br><span class="line">        <span class="built_in">this</span>.sliderDom = <span class="built_in">this</span>.wySlider.nativeElement;</span><br><span class="line">        <span class="built_in">this</span>.createDraggingObservables();</span><br><span class="line">        <span class="built_in">this</span>.subscribeDrag([<span class="string">&#x27;start&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">	 <span class="comment">// 添加点击触发事件</span></span><br><span class="line">    <span class="keyword">private</span> createDraggingObservables () &#123;</span><br><span class="line">        <span class="keyword">const</span> origenField = <span class="built_in">this</span>.wyVertical ? <span class="string">&#x27;pageY&#x27;</span> : <span class="string">&#x27;pageX&#x27;</span>; <span class="comment">// 判断滑块是垂直还是水平</span></span><br><span class="line">        <span class="comment">// 适应PC和移动端，定义mouse和touch类</span></span><br><span class="line">        <span class="keyword">const</span> mouse: SliderEventObserverConfig = &#123;</span><br><span class="line">            start: <span class="string">&#x27;mousedown&#x27;</span>,</span><br><span class="line">            move: <span class="string">&#x27;mousemove&#x27;</span>,</span><br><span class="line">            end: <span class="string">&#x27;mouseup&#x27;</span>,</span><br><span class="line">            filter: <span class="function">(<span class="params">e: MouseEvent</span>) =&gt;</span> e <span class="keyword">instanceof</span> MouseEvent,</span><br><span class="line">            pluckKey: [origenField]</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">const</span> touch: SliderEventObserverConfig = &#123;</span><br><span class="line">            start: <span class="string">&#x27;touchstart&#x27;</span>,</span><br><span class="line">            move: <span class="string">&#x27;touchmove&#x27;</span>,</span><br><span class="line">            end: <span class="string">&#x27;touchend&#x27;</span>,</span><br><span class="line">            filter: <span class="function">(<span class="params">e: TouchEvent</span>) =&gt;</span> e <span class="keyword">instanceof</span> TouchEvent,</span><br><span class="line">            pluckKey: [<span class="string">&#x27;touches&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, origenField]</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        [mouse, touch].forEach(<span class="function"><span class="params">source</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; start, move, end, filter: filerFunc, pluckKey &#125; = source;</span><br><span class="line">            </span><br><span class="line">            source.startPlucked$ = fromEvent(<span class="built_in">this</span>.sliderDom, start)</span><br><span class="line">                .pipe(</span><br><span class="line">                    filter(filerFunc),</span><br><span class="line">                    tap(sliderEvent),</span><br><span class="line">                    pluck(...pluckKey),</span><br><span class="line">                    map(<span class="function">(<span class="params">position: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">this</span>.findClosestValue(position))</span><br><span class="line">                );</span><br><span class="line">            source.end$ = fromEvent(<span class="built_in">this</span>.doc, end);</span><br><span class="line">            source.moveResolved$ = fromEvent(<span class="built_in">this</span>.doc, move)</span><br><span class="line">                .pipe(</span><br><span class="line">                    filter(filerFunc),</span><br><span class="line">                    tap(sliderEvent),</span><br><span class="line">                    pluck(...pluckKey),</span><br><span class="line">                    distinctUntilChanged(),</span><br><span class="line">                    map(<span class="function">(<span class="params">position: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">this</span>.findClosestValue(position)),</span><br><span class="line">                    takeUntil(source.end$)</span><br><span class="line">                )</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">this</span>.dragStart$ = merge(mouse.startPlucked$, touch.startPlucked$);</span><br><span class="line">        <span class="built_in">this</span>.dragMove$ = merge(mouse.moveResolved$, touch.moveResolved$);</span><br><span class="line">        <span class="built_in">this</span>.dragEnd$ = merge(mouse.end$, touch.end$);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> subscribeDrag (events: <span class="built_in">string</span>[] = [<span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;move&#x27;</span>, <span class="string">&#x27;end&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (inArray(events, <span class="string">&#x27;start&#x27;</span>) &amp;&amp; <span class="built_in">this</span>.dragStart$ &amp;&amp; !<span class="built_in">this</span>.dragStart_) &#123;</span><br><span class="line">            <span class="built_in">this</span>.dragStart_ = <span class="built_in">this</span>.dragStart$.subscribe(<span class="built_in">this</span>.onDragStart.bind(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inArray(events, <span class="string">&#x27;move&#x27;</span>) &amp;&amp; <span class="built_in">this</span>.dragMove$ &amp;&amp; !<span class="built_in">this</span>.dragMove_) &#123;</span><br><span class="line">            <span class="built_in">this</span>.dragMove_ = <span class="built_in">this</span>.dragMove$.subscribe(<span class="built_in">this</span>.onDragMove.bind(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inArray(events, <span class="string">&#x27;end&#x27;</span>) &amp;&amp; <span class="built_in">this</span>.dragEnd$ &amp;&amp; !<span class="built_in">this</span>.dragEnd_) &#123;</span><br><span class="line">            <span class="built_in">this</span>.dragEnd_ = <span class="built_in">this</span>.dragEnd$.subscribe(<span class="built_in">this</span>.onDragEnd.bind(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> unsubscribeDrag (events: <span class="built_in">string</span>[] = [<span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;move&#x27;</span>, <span class="string">&#x27;end&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (inArray(events, <span class="string">&#x27;start&#x27;</span>) &amp;&amp; <span class="built_in">this</span>.dragStart_) &#123;</span><br><span class="line">            <span class="built_in">this</span>.dragStart_.unsubscribe();</span><br><span class="line">            <span class="built_in">this</span>.dragStart_ = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inArray(events, <span class="string">&#x27;move&#x27;</span>) &amp;&amp; <span class="built_in">this</span>.dragMove_) &#123;</span><br><span class="line">            <span class="built_in">this</span>.dragMove_.unsubscribe();</span><br><span class="line">            <span class="built_in">this</span>.dragMove_ = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inArray(events, <span class="string">&#x27;end&#x27;</span>) &amp;&amp; <span class="built_in">this</span>.dragEnd_) &#123;</span><br><span class="line">            <span class="built_in">this</span>.dragEnd_.unsubscribe();</span><br><span class="line">            <span class="built_in">this</span>.dragEnd_ = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> onDragStart (value: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;value&#x27;</span>, value);</span><br><span class="line">        <span class="built_in">this</span>.toggleDragMoving(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> onDragMove (value: <span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isDragging) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setValue(value);</span><br><span class="line">            <span class="built_in">this</span>.cdr.markForCheck();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> onDragEnd () &#123;</span><br><span class="line">        <span class="built_in">this</span>.toggleDragMoving(<span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">this</span>.cdr.markForCheck();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> setValue (value: SliderValue, needCheck = <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (needCheck) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.isDragging) &#123; <span class="keyword">return</span> &#125;;</span><br><span class="line">            <span class="built_in">this</span>.value = <span class="built_in">this</span>.formatValue(value);</span><br><span class="line">            <span class="built_in">this</span>.updateTrackAndHandles();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.valuesEqual(<span class="built_in">this</span>.value, value)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.updateTrackAndHandles();</span><br><span class="line">            <span class="built_in">this</span>.onValueChange(<span class="built_in">this</span>.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> formatValue (value: SliderValue): SliderValue &#123;</span><br><span class="line">        <span class="keyword">let</span> res = value;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.assertValueValid(value)) &#123;</span><br><span class="line">            res = <span class="built_in">this</span>.wyMin;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = limitNumberInrange(value, <span class="built_in">this</span>.wyMin, <span class="built_in">this</span>.wyMax)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否是NAN</span></span><br><span class="line">    <span class="keyword">private</span> assertValueValid (value: SliderValue): <span class="built_in">boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isNaN</span>(<span class="keyword">typeof</span> value !== <span class="string">&#x27;number&#x27;</span> ? <span class="built_in">parseFloat</span>(value) : value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> valuesEqual (valA: SliderValue, valB: SliderValue): <span class="built_in">boolean</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> valA !== <span class="keyword">typeof</span> valB) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> valA === valB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> updateTrackAndHandles () &#123;</span><br><span class="line">        <span class="built_in">this</span>.offset = <span class="built_in">this</span>.getValueToOffset(<span class="built_in">this</span>.value);</span><br><span class="line">        <span class="built_in">this</span>.cdr.markForCheck();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> getValueToOffset (value: SliderValue): SliderValue &#123;</span><br><span class="line">        <span class="keyword">return</span> getPercent(<span class="built_in">this</span>.wyMin, <span class="built_in">this</span>.wyMax, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> toggleDragMoving (movable: <span class="built_in">boolean</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.isDragging = movable;</span><br><span class="line">        <span class="keyword">if</span> (movable) &#123;</span><br><span class="line">            <span class="built_in">this</span>.subscribeDrag([<span class="string">&#x27;move&#x27;</span>, <span class="string">&#x27;end&#x27;</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.unsubscribeDrag([<span class="string">&#x27;move&#x27;</span>, <span class="string">&#x27;end&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> findClosestValue (position: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="comment">// 获取滑块总长</span></span><br><span class="line">        <span class="keyword">const</span> sliderLength = <span class="built_in">this</span>.getSliderLength();</span><br><span class="line">        <span class="comment">// 获取滑块左（上）端点位置</span></span><br><span class="line">        <span class="keyword">const</span> sliderStart = <span class="built_in">this</span>.getSliderStartPosition();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑块当前位置 /  滑块总长</span></span><br><span class="line">        <span class="keyword">const</span> ratio = limitNumberInrange((position - sliderStart) / sliderLength, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">const</span> ratioTrue = <span class="built_in">this</span>.wyVertical ? <span class="number">1</span> - ratio : ratio;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ratioTrue * (<span class="built_in">this</span>.wyMax - <span class="built_in">this</span>.wyMin) + <span class="built_in">this</span>.wyMin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> getSliderLength (): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.wyVertical ? <span class="built_in">this</span>.sliderDom.clientHeight : <span class="built_in">this</span>.sliderDom.clientWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> getSliderStartPosition (): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="comment">// getElementOffset 在zorro中有api，不确定能否引用</span></span><br><span class="line">        <span class="keyword">const</span> offset = getElementOffset(<span class="built_in">this</span>.sliderDom);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.wyVertical ? offset.top : offset.left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> onValueChange (value: SliderValue): <span class="built_in">void</span> &#123; &#125;;</span><br><span class="line">    <span class="keyword">private</span> onTouched (): <span class="built_in">void</span> &#123; &#125;;</span><br><span class="line"></span><br><span class="line">    writeValue (value: SliderValue): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setValue(value, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    registerOnChange (fn: <span class="function">(<span class="params">value: SliderValue</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.onValueChange = fn;</span><br><span class="line">    &#125;</span><br><span class="line">    registerOnTouched (fn: <span class="function">() =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.onTouched = fn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ngOnDestroy (): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.unsubscribeDrag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其中encapsulation表示样式封装策略，改变其默认值emulated为none，可以使子组件使用上一级的样式，原因是不使用封装后会将样式上升为全局。<br><img data-src="https://img-blog.csdnimg.cn/20201130191257811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70" alt="encapsulation"><br>在获取节点时使用了viewChild<br><img data-src="https://img-blog.csdnimg.cn/20201130192503900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70" alt="viewChild"><br><strong>在触发时使用fromEvent来为dom容器添加事件转为Observable对象，再用pipe操作符叠加事件处理。先定义filter筛选出mouseEvent与TouchEvent类型，在使用tap监视可观察值做出停止事件传播与清除默认动作，在使用pluck将获取按下的位置，最后使用map将每个observable数据应用findClosestValue函数将位置算出相应的数值</strong></p>
<blockquote>
<ul>
<li>stopPropagation（）<br>该方法将停止事件的传播，阻止它被分派到其他 Document 节点。在事件传播的任何阶段都可以调用它。注意，虽然该方法不能阻止同一个 Document 节点上的其他事件句柄被调用，但是它可以阻止把事件分派到其他节点。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>preventDefault()<br>该方法将通知 Web 浏览器不要执行与事件关联的默认动作（如果存在这样的动作）。例如，如果 type 属性是 “submit”，在事件传播的任意阶段可以调用任意的事件句柄，通过调用该方法，可以阻止提交表单。注意，如果 Event 对象的 cancelable 属性是 fasle，那么就没有默认动作，或者不能阻止默认动作。无论哪种情况，调用该方法都没有作用。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>pluck()<br>1、把上游数据中特定字段的值”拔”出来，<br>2、将每个源值(对象)映射成它指定的嵌套属性，<br>3、选择属性来发出值。</li>
</ul>
</blockquote>
<hr>
<p>避免订阅数量过多，使用merge操作符合并同对的事件。</p>
<p>自定义工具类 array.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断属性是否在arr中存在</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">inArray</span>(<span class="params">arr: <span class="built_in">any</span>[], target: <span class="built_in">any</span></span>): <span class="title">boolean</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.indexOf(target) !== <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>触发组件的步骤大致为先获取DOM，然后触发createDraggingObservable创建可观察对象，然后根据事件选择相应的订阅事件。而在更新值的时候，变更监测改为onpush，所以在setvalue后需要手动告知Angular才能检查并更新视图(markForCheck)。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这一节使用了父子组件传值的规则以及声明类的使用，感觉最为复杂的是嵌套的逻辑，对angular的不够熟练迫使我看了视频无数遍，寻找每一个知识点，但还是有些没明白，希望随着进度能够看明白吧。</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--9、处理歌单数据</title>
    <url>/posts/baceef39/</url>
    <content><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p> home首页渲染歌单列表，再点击列表的播放图标之后获取单个歌单的信息（应包含歌曲的URL，以便于在首页底部添加播放）</p>
 <a id="more"></a>

<hr>
<h1 id="组件传参"><a href="#组件传参" class="headerlink" title="组件传参"></a>组件传参</h1><p>歌单的列表是嵌套在父组件中的单独组件，所以再点击子组件时，将获取得到ID广播到父组件，父组件拿到之后再做处理。</p>
<ul>
<li><p>single-sheet.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--歌单点击事件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon play&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;playSheet(sheet.id)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>single-sheet.component.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SingleSheetComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Output</span>() onPlay = <span class="keyword">new</span> EventEmitter&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line"></span><br><span class="line">  playSheet(id: <span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="built_in">this</span>.onPlay.emit(id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子组件将拿到的ID广播出去</p>
</li>
<li><p>home.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--热门歌单开始--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;down&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;down-wrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 父组件拿到子组件的传值后，进行回调--&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">app-single-sheet</span></span></span><br><span class="line"><span class="tag">               <span class="attr">class</span>=<span class="string">&quot;sheet-item&quot;</span></span></span><br><span class="line"><span class="tag">               [<span class="attr">sheet</span>]=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">               (<span class="attr">onPlay</span>)=<span class="string">&quot;onPlaySheet($event)&quot;</span></span></span><br><span class="line"><span class="tag">               *<span class="attr">ngFor</span>=<span class="string">&quot;let item of songSheet&quot;</span></span></span><br><span class="line"><span class="tag">             &gt;</span><span class="tag">&lt;/<span class="name">app-single-sheet</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--热门歌单结束--&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>home.component.ts</p>
<blockquote>
<p>这里有一个注意项，因为单个api不能获取到想要的数据，所以要将两个接口的返回值进行拼接。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点击歌单，获取歌单信息</span></span><br><span class="line">onPlaySheet(id: <span class="built_in">number</span>)&#123;</span><br><span class="line">  <span class="built_in">this</span>.sheetServe.playSheet(id).subscribe(<span class="function">(<span class="params">playlist</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;playList&#x27;</span>, playlist);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h1 id="合并返回值"><a href="#合并返回值" class="headerlink" title="合并返回值"></a>合并返回值</h1><ul>
<li>sheet.service.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取歌单详情</span></span><br><span class="line">getSongSheetDetail(id: <span class="built_in">number</span>): Observable&lt;SongSheet&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> params = <span class="keyword">new</span> HttpParams().set(<span class="string">&#x27;id&#x27;</span>, id.toString());</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="built_in">this</span>.uri + <span class="string">&quot;playlist/detail&quot;</span>, &#123; params &#125;)</span><br><span class="line">    .pipe(map(<span class="function">(<span class="params">res: &#123; playlist: SongSheet &#125;</span>) =&gt;</span> res.playlist));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取歌单详细信息-拼接URL</span></span><br><span class="line">playSheet(id: <span class="built_in">number</span>): Observable&lt;Song[]&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.getSongSheetDetail(id)</span><br><span class="line">  .pipe(pluck(<span class="string">&#x27;tracks&#x27;</span>), switchMap(<span class="function"><span class="params">tracks</span> =&gt;</span> <span class="built_in">this</span>.songServe.getSongList(tracks)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
playSheet回调中先获取歌单详情信息（getSongSheetDetail），然后将返回值中的playlist属性作为函数返回值，拿到之后在筛选tracks属性的值。<strong>pluck用于把结构中的字段取出合并到一个数组中</strong></li>
</ul>
<hr>
<ul>
<li>song.service.ts<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取歌曲url</span></span><br><span class="line">getSongUrl(ids: <span class="built_in">string</span>): Observable&lt;SongUrl[]&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> params = <span class="keyword">new</span> HttpParams().set(<span class="string">&#x27;id&#x27;</span>, ids);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="built_in">this</span>.uri + <span class="string">&quot;song/url&quot;</span>, &#123; params &#125;)</span><br><span class="line">    .pipe(map(<span class="function">(<span class="params">res: &#123; data: SongUrl[] &#125;</span>) =&gt;</span> res.data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接歌曲列表和单条歌曲url</span></span><br><span class="line"><span class="keyword">private</span> generateSongList(songs: Song[], urls: SongUrl[]):Song[]&#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    songs.forEach( <span class="function"><span class="params">song</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> url = urls.find(<span class="function"><span class="params">url</span> =&gt;</span> url.id === song.id).url;</span><br><span class="line">      <span class="keyword">if</span>(url)&#123;</span><br><span class="line">          result.push(&#123;...song,url&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取歌曲列表</span></span><br><span class="line">getSongList(songs:Song | Song[]): Observable&lt;Song[]&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> songArr = <span class="built_in">Array</span>.isArray(songs) ? songs.slice() : [songs];</span><br><span class="line">    <span class="keyword">const</span> ids = songArr.map(<span class="function"><span class="params">item</span> =&gt;</span>item.id).join(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getSongUrl(ids).pipe(map(<span class="function"><span class="params">urls</span> =&gt;</span> <span class="built_in">this</span>.generateSongList(songArr, urls)));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在新增的song服务中添加回调，在获取到歌单列表之后就要获取歌单中歌曲的URL，并且拼接到返回值中。</li>
</ul>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular实战网易云】——8、路由守卫--resolve</title>
    <url>/posts/c3084363/</url>
    <content><![CDATA[<h1 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h1><h2 id="什么是路由守卫"><a href="#什么是路由守卫" class="headerlink" title="什么是路由守卫"></a>什么是路由守卫</h2><p> 字面理解，路由守卫就是保护路由的跳转。那为什么需要保护路由呢？实际场景中，会有很多不同的访问路径，分别控制不同的场景，就需要路由守卫。</p>
<blockquote>
<ul>
<li>该用户可能无权导航到目标组件。</li>
<li>可能用户得先登录（认证）。</li>
<li>在显示目标组件前，你可能得先获取某些数据。</li>
<li>在离开组件前，你可能要先保存修改。</li>
<li>你可能要询问用户：你是否要放弃本次更改，而不用保存它们？</li>
</ul>
</blockquote>
<p>而路由器也是可以应对这些不同的场景</p>
<blockquote>
<ul>
<li>用CanActivate来处理导航到某路由的情况。</li>
<li>用CanActivateChild来处理导航到某子路由的情况。</li>
<li>用CanDeactivate来处理从当前路由离开的情况.</li>
<li>用Resolve在路由激活之前获取路由数据。</li>
<li>用CanLoad来处理异步导航到某特性模块的情况。</li>
</ul>
</blockquote>
<a id="more"></a>
<hr>
<h1 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h1><p>这一节是使用了resolve预先获取组件数据</p>
<blockquote>
<ul>
<li>如果你在使用真实 api，很有可能数据返回有延迟，导致无法即时显示。 在这种情况下，直到数据到达前，显示一个空的组件不是最好的用户体验。</li>
<li>最好使用解析器预先从服务器上获取完数据，这样在路由激活的那一刻数据就准备好了。 还要在路由到此组件之前处理好错误。 但当某个 id 无法对应到一个危机详情时，就没办法处理它。 这时最好把用户带回到“危机列表”中，那里显示了所有有效的“危机”。</li>
<li>总之，你希望的是只有当所有必要数据都已经拿到之后，才渲染这个路由组件。</li>
</ul>
</blockquote>
<hr>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul>
<li><p>创建<strong>home-resolve.service.ts</strong></p>
<blockquote>
<p>在home路径下 ： <strong>ng g s home-resolve</strong></p>
</blockquote>
</li>
<li><p>home-resolve.service.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; forkJoin, Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; first &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/internal/operators&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Banner, HotTag, Singer, SongSheet &#125; <span class="keyword">from</span> <span class="string">&#x27;src/app/services/data-types/common.types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeService &#125; <span class="keyword">from</span> <span class="string">&#x27;src/app/services/home.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SingerService &#125; <span class="keyword">from</span> <span class="string">&#x27;src/app/services/singer.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义首页返回数据类型</span></span><br><span class="line"><span class="keyword">type</span> HomeDataType = [Banner[],HotTag[],SongSheet[],Singer[]]; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HomeResolverService <span class="keyword">implements</span> Resolve&lt;HomeDataType&gt; &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> homeService: HomeService,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> SingerServe: SingerService</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  resolve( ): Observable&lt;HomeDataType&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> forkJoin([</span><br><span class="line">       <span class="built_in">this</span>.homeService.getBanners(),</span><br><span class="line">       <span class="built_in">this</span>.homeService.getHotTags(),</span><br><span class="line">       <span class="built_in">this</span>.homeService.getPersonalSheetList(),</span><br><span class="line">       <span class="built_in">this</span>.SingerServe.getEnterSingers(),</span><br><span class="line">    ]).pipe(first());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>在angular项目中使用rxjs的observable来控制异步请求很方便很舒服，但是有些时候得考虑一些特殊的问题，比如有两个请求相互依赖的情况，希望在所有请求都响应后再采取行动，如何处理？</li>
<li>以前使用Promise的时候，有个promise.all的方法，可以控制所有请求请求完成后执行操作，相同的，rxjs也提供了forkJoin操作符来控制请求的并行。</li>
<li>forkJoin操作符接受一组observable作为参数，当所有的observable完成时，将每个observable的最新值作为数组发出。</li>
</ul>
</blockquote>
</li>
</ul>
<p><a href="https://blog.csdn.net/weixin_43964866/article/details/109541288">RxJS常用方法</a><br><img data-src="https://img-blog.csdnimg.cn/20201117192524355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center"></p>
<hr>
<ul>
<li>写好调用之后怎么样才能使用呢 ？ 在routing中定义如下<blockquote>
<p>// 这样在连通路由之前就会先走向resolve指向的HomeResolverService<br>const routes: Routes = [<br>  { path: “home”, component: HomeComponent, resolve: {homeDatas: HomeResolverService} }<br>];</p>
</blockquote>
</li>
</ul>
<p>相应的，home.comonent.ts中就不用再去调用api，而是调用resolve，使用resolve返回来的数据就可以了。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">   <span class="keyword">private</span> route: ActivatedRoute</span></span><br><span class="line"><span class="params"> </span>) &#123;&#125;</span><br><span class="line">ngOnInit() &#123;</span><br><span class="line">     <span class="built_in">this</span>.route.data.pipe(map(<span class="function"><span class="params">res</span> =&gt;</span> res.homeDatas)).subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;res:&#x27;</span>, res);</span><br><span class="line">         <span class="built_in">this</span>.banners = res[<span class="number">0</span>];</span><br><span class="line">         <span class="built_in">this</span>.hotTags = res[<span class="number">1</span>];</span><br><span class="line">         <span class="built_in">this</span>.songSheet = res[<span class="number">2</span>];</span><br><span class="line">         <span class="built_in">this</span>.singers = res[<span class="number">3</span>].slice(<span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>路由守卫是一个难点，目前还只是稍微接触了一个小点，之前写项目时，并没有使用这个，所以在当时就有很多关于调用的顺序和数据的渲染之类的疑惑，记得当时用的promise，其实都能实现，但这个我理解的好处就是解耦的更好一点，ts中没必要在初次渲染时长篇大论。</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--7、入驻歌手</title>
    <url>/posts/3c7973ed/</url>
    <content><![CDATA[<h1 id="入驻歌手"><a href="#入驻歌手" class="headerlink" title="入驻歌手"></a>入驻歌手</h1><p>这节的效果是完成上页遗留的右侧歌手专辑名单的列表。<br>在服务里找到相关的API，这里有一点小问题，可能是API的版本更新问题，视频里老师的api 参数在新的里边并没有生效，所以就改了一点参数。</p>
<a id="more"></a>
<hr>
<h1 id="home-component-html"><a href="#home-component-html" class="headerlink" title="home.component.html"></a>home.component.html</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--右侧开始--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">app-member-card</span>&gt;</span><span class="tag">&lt;/<span class="name">app-member-card</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;settled-singer&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>入驻歌手<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let singer of singers&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> [<span class="attr">src</span>]=<span class="string">&quot;singer.picUrl&quot;</span> [<span class="attr">alt</span>]=<span class="string">&quot;singer.name&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;txt&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;ellipsis&quot;</span>&gt;</span>&#123;&#123; singer.name &#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>专辑：&#123;&#123; singer.albumSize &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--右侧结束--&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="singer-service-ts"><a href="#singer-service-ts" class="headerlink" title="singer.service.ts"></a>singer.service.ts</h1><ul>
<li>在service里新建singer服务<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义传参类型。这里是用的新版的api，里边并没有找到cat的参数，而使用的area，并且取回的数据也并没有分页，可能是传的参数有问题，挖个坑</span></span><br><span class="line"><span class="keyword">type</span> SingerParams = &#123;</span><br><span class="line">  <span class="keyword">type</span>?: <span class="built_in">number</span>;</span><br><span class="line">  area: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 声明参数默认值</span></span><br><span class="line"><span class="keyword">const</span> defaultParams: SingerParams = &#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="number">1</span>,</span><br><span class="line">  area: <span class="number">7</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取入驻歌手列表</span></span><br><span class="line">  getEnterSingers(args: SingerParams = defaultParams): Observable&lt;Singer[]&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> params = <span class="keyword">new</span> HttpParams(&#123; fromString: <span class="built_in">JSON</span>.stringify(args) &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;params&quot;</span>, params);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.http</span><br><span class="line">      .get(<span class="built_in">this</span>.uri + <span class="string">&quot;artist/list&quot;</span>, &#123; params &#125;)</span><br><span class="line">      .pipe(map(<span class="function">(<span class="params">res: &#123; artists: Singer[] &#125;</span>) =&gt;</span> res.artists));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h1 id="member-card-component-html"><a href="#member-card-component-html" class="headerlink" title="member-card.component.html"></a>member-card.component.html</h1><p>由于右侧上方是一个快捷登录的卡片，所以会有状态的更新及数据的渲染，为了方便维护就新建一个组件member-card。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;member&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>登录网易云音乐，可以享受无限收藏的乐趣，并且无限同步到手机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">nz-button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="member-card-component-less"><a href="#member-card-component-less" class="headerlink" title="member-card.component.less"></a>member-card.component.less</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../../../../../assets/styles/varibles&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.member</span> &#123;</span><br><span class="line">  .login &#123;</span><br><span class="line">    <span class="selector-tag">height</span>: 126<span class="selector-tag">px</span>;</span><br><span class="line">    background: url(&quot;../../../../../assets/images/index.png&quot;) no-repeat;</span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">205px</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">16px</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">22px</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: @font-size-sm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.btn</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">color</span>: @white-color;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../../../../../assets/images/index.png&quot;</span>) no-repeat <span class="number">0</span> -<span class="number">195px</span>;</span><br><span class="line">      <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> @wy-btn-red;</span><br><span class="line">      <span class="attribute">border-color</span>: @error-color;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.n-myinfo</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">184px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../../../../../assets/images/index.png&quot;</span>) no-repeat <span class="number">0</span> -<span class="number">270px</span>;</span><br><span class="line">    .f-cb &#123;</span><br><span class="line">      <span class="selector-class">.head</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">        <span class="attribute">background</span>: @white-color;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dadada</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.info</span> &#123;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">115px</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">12px</span>;</span><br><span class="line">        .lv &#123;</span><br><span class="line">          <span class="selector-tag">margin</span>: 5<span class="selector-tag">px</span> 0 10<span class="selector-tag">px</span> 0;</span><br><span class="line">          <span class="selector-class">.u-icn2</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: inline-block;</span><br><span class="line">            <span class="attribute">overflow</span>: hidden;</span><br><span class="line">            <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../../../../../assets/images/icon2.png&quot;</span>) no-repeat</span><br><span class="line">              <span class="number">0</span> <span class="number">9999px</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="selector-class">.u-lv</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">17px</span>;</span><br><span class="line">            <span class="attribute">padding-left</span>: <span class="number">25px</span>;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">            <span class="attribute">font-weight</span>: bold;</span><br><span class="line">            <span class="attribute">font-style</span>: italic;</span><br><span class="line">            <span class="attribute">background-position</span>: -<span class="number">130px</span> -<span class="number">64px</span>;</span><br><span class="line">            .lvright &#123;</span><br><span class="line">              <span class="selector-tag">float</span>: <span class="selector-tag">right</span>;</span><br><span class="line">              <span class="selector-tag">width</span>: 8<span class="selector-tag">px</span>;</span><br><span class="line">              <span class="selector-tag">height</span>: 17<span class="selector-tag">px</span>;</span><br><span class="line">              <span class="selector-tag">background-position</span>: <span class="selector-tag">-192px</span> <span class="selector-tag">-64px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.dny</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">12px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">      li &#123;</span><br><span class="line">        <span class="selector-tag">float</span>: <span class="selector-tag">left</span>;</span><br><span class="line">        <span class="selector-tag">height</span>: 40<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">padding</span>: 0 18<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">border-right</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e4e4e4</span>;</span><br><span class="line">        &amp;<span class="selector-class">.fst</span> &#123;</span><br><span class="line">          <span class="attribute">padding-left</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &amp;<span class="selector-class">.lst</span> &#123;</span><br><span class="line">          <span class="attribute">padding-right</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">border-right</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">strong</span> &#123;</span><br><span class="line">          <span class="attribute">display</span>: block;</span><br><span class="line">          <span class="attribute">max-width</span>: <span class="number">40px</span>;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">          <span class="attribute">font-weight</span>: normal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">span</span> &#123;</span><br><span class="line">          <span class="attribute">margin-left</span>: <span class="number">2px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img data-src="https://img-blog.csdnimg.cn/20201115221821224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在调用api的时候，事先定义好来回的数据类型，可以起到优化的效果，减少内部判断类型。对于有状态更新的dom，要考虑是否要方便维护，从而决定是否单独提取出新的组件页。</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--6、推荐歌单</title>
    <url>/posts/2f4fe59/</url>
    <content><![CDATA[<h1 id="数据渲染"><a href="#数据渲染" class="headerlink" title="数据渲染"></a>数据渲染</h1><p>这次的内容是将调用后端接口并返回数据，将数据渲染到页面中，其中对返回的数据进行处理。</p>
<a id="more"></a>
<hr>
<h1 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h1><p><strong>home.service</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取热门标签</span></span><br><span class="line">getHotTags(): Observable&lt;HotTag[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="built_in">this</span>.uri + <span class="string">&quot;playlist/hot&quot;</span>).pipe(</span><br><span class="line">        map(<span class="function">(<span class="params">res: &#123; tags: HotTag[] &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.tags</span><br><span class="line">        .sort(<span class="function">(<span class="params">x: HotTag, y: HotTag</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x.position - y.position;</span><br><span class="line">        &#125;)</span><br><span class="line">        .slice(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取热门歌单</span></span><br><span class="line">getPersonalSheetList(): Observable&lt;SongSheet[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.http</span><br><span class="line">    .get(<span class="built_in">this</span>.uri + <span class="string">&quot;personalized&quot;</span>)</span><br><span class="line">    .pipe(map(<span class="function">(<span class="params">res: &#123; result: SongSheet[] &#125;</span>) =&gt;</span> res.result.slice(<span class="number">0</span>, <span class="number">16</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在service中定义获取标签和歌单的方法。在两个方法中分别声明返回的类型(<strong>HotTag[]、SongSheet[]</strong>)</p>
<hr>
<p><strong>common.types.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 热门标签</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> HotTag = &#123;</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  position: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 热门歌单</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> SongSheet = &#123;</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  picUrl: <span class="built_in">string</span>;</span><br><span class="line">  playCount: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>再将返回回来的标签通过map()转换成(res: { tags: HotTag[] })格式。通过<a href="">sort</a>将返回的数据根据position参数排序 <strong>（sort中的形参为函数，根据对比两个参数的position大小来决定排序的顺序）</strong>，在用<a href="https://www.w3school.com.cn/js/jsref_slice_array.asp">slice</a>截取前五个即可</p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">


<h1 id="首页歌单和标签"><a href="#首页歌单和标签" class="headerlink" title="首页歌单和标签"></a>首页歌单和标签</h1><p><strong>home.component.html(部分)</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--中间开始--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--左边开始--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sec&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--热门标签开始--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;up&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navs&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span>&gt;</span>热门推荐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">nav</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let tag of hotTags&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123;&#123; tag.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br><span class="line">             更多</span><br><span class="line">             <span class="tag">&lt;<span class="name">i</span> <span class="attr">nz-icon</span> <span class="attr">nzType</span>=<span class="string">&quot;arrow-right&quot;</span> <span class="attr">nzTheme</span>=<span class="string">&quot;outline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--热门标签结束--&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!--热门歌单开始--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;down&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;down-wrap&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">app-single-sheet</span></span></span><br><span class="line"><span class="tag">               <span class="attr">class</span>=<span class="string">&quot;sheet-item&quot;</span></span></span><br><span class="line"><span class="tag">               *<span class="attr">ngFor</span>=<span class="string">&quot;let item of songSheet&quot;</span></span></span><br><span class="line"><span class="tag">               [<span class="attr">sheet</span>]=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">             &gt;</span><span class="tag">&lt;/<span class="name">app-single-sheet</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--热门歌单结束--&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--左边结束--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--中间结束--&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中的  <app-single-sheet> &lt;/ app-single-sheet&gt; 标签是将歌单抽成单个的公用组件（<strong>当系统中有很多页面有类似的组件，就可以抽出公用组件，导入并导出到公用模块中，这样其他地方使用只需导入公用模块即可</strong>）。</p>
<hr>
<p><strong>home.component.ts(部分)</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">hotTags: HotTag[]; <span class="comment">// 热门标签</span></span><br><span class="line"> 	songSheet: SongSheet[]; <span class="comment">//热门歌单</span></span><br><span class="line"> 	</span><br><span class="line"> ngOnInit() &#123;</span><br><span class="line">   <span class="built_in">this</span>.getHotTags();</span><br><span class="line">   <span class="built_in">this</span>.getPersonalizedSheetList();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 获取热门标签</span></span><br><span class="line"> <span class="keyword">private</span> getHotTags() &#123;</span><br><span class="line">   <span class="built_in">this</span>.homeService.getHotTags().subscribe(<span class="function">(<span class="params">tags</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.hotTags = tags;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 获取热门歌单</span></span><br><span class="line"> <span class="keyword">private</span> getPersonalizedSheetList() &#123;</span><br><span class="line">   <span class="built_in">this</span>.homeService.getPersonalSheetList().subscribe(<span class="function">(<span class="params">sheets</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.songSheet = sheets;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>ts中直接调用服务中的接口即可，拿到返回值赋值给已声明的全局变量。</p>
<hr>
<h1 id="创建公共组件"><a href="#创建公共组件" class="headerlink" title="创建公共组件"></a>创建公共组件</h1><p>在share目录下创建wy-ui目录及wy-ui模块以及一个过滤器play-count.pipe，在wy-ui目录下创建single-sheet组件(home组件使用)</p>
<blockquote>
<p>ng g m share/wy-ui<br>ng g c share/wy-ui/single-sheet<br>ng g p share/play-count</p>
</blockquote>
<p><img data-src="https://img-blog.csdnimg.cn/20201009230810372.png#pic_center" alt="效果图"></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<p><strong>single-sheet.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--父组件传给子组件的值sheet:hotTag--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> [<span class="attr">src</span>]=<span class="string">&quot;sheet.picUrl&quot;</span> [<span class="attr">alt</span>]=<span class="string">&quot;sheet.name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;num&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon erji&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--过滤器，歌单显示的听众数量为纯数字，要求将纯数字改为xx万，不超过一万则显示纯数字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; sheet.playCount | playCount &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon play&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;dec&quot;</span>&gt;</span>&#123;&#123; sheet.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>歌单的听众数量有要求，将超过一万的更改格式为xx万，所以就需要进行格式处理，创建一个过滤器并在share中导入导出，即可使用过滤器</p>
<hr>
<p><strong>single-sheet.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SingleSheetComponent  &#123;</span><br><span class="line"><span class="comment">// 接受父组件传值</span></span><br><span class="line">  <span class="meta">@Input</span>() sheet: SongSheet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>single-sheet.component.less（研究中）</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../../../../assets/styles/varibles&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../../../../assets/styles/mixins&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cover</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">  img &#123;</span><br><span class="line">    <span class="selector-tag">height</span>: 100%;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.bottom</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: @black-color;</span><br><span class="line">    <span class="attribute">color</span>: @white-color;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">8px</span>;</span><br><span class="line">    .num &#123;</span><br><span class="line">      <span class="selector-tag">span</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">8px</span>;</span><br><span class="line">        <span class="attribute">vertical-align</span>: text-bottom;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.icon</span> &#123;</span><br><span class="line">      .icon(&quot;../images/iconall.png&quot;, 14px, 11px);</span><br><span class="line">      &amp;<span class="selector-class">.erji</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">24px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      &amp;<span class="selector-class">.play</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">17px</span>;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">          <span class="selector-tag">background-position</span>: 0 <span class="selector-tag">-60px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dec</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>play-count.pipe.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/core&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span>(&#123;</span><br><span class="line">  name: <span class="string">&quot;playCount&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PlayCountPipe <span class="keyword">implements</span> PipeTransform &#123;</span><br><span class="line">  transform(value: <span class="built_in">number</span>): <span class="built_in">number</span> | <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &gt; <span class="number">10000</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.floor(value / <span class="number">10000</span>) + <span class="string">&quot;万&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这个过滤器只需要接受听众数量，所以value类型为number，但是可以返回纯数字和xx万类型，所以返回值就只能是number和string。根据math.floor()可以返回小于或等于一个给定数字的最大整数(向下取整)。</p>
<hr>
<p><strong>效果图</strong><br><img data-src="https://img-blog.csdnimg.cn/2020100923210813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这节内容实现数据的渲染，在拿到返回数据时可以对数据进行二次处理，选取或者排序等等，在渲染过程也可以对数据进行处理，可以写通用的管道过滤器来处理数据的就结构。声明变量时最好也声明类型。</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--5、获取轮播图（二）</title>
    <url>/posts/55f6b298/</url>
    <content><![CDATA[<h1 id="组件封装"><a href="#组件封装" class="headerlink" title="组件封装"></a>组件封装</h1><p>在home路径下新建component文件夹，在component文件夹下新建wy-carousel。这一层是用来封装轮播图两侧及底部动作实现的组件。</p>
<a id="more"></a>
<h2 id="carousel-component-less"><a href="#carousel-component-less" class="headerlink" title="carousel.component.less"></a>carousel.component.less</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.carousel</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#001529</span>;</span><br><span class="line">  .wrap &#123;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">    <span class="selector-class">.dot</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">overflow</span>: hidden;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;./banner.png&quot;</span>) <span class="number">3px</span> -<span class="number">343px</span>;</span><br><span class="line">      <span class="attribute">cursor</span>: pointer;</span><br><span class="line">      &amp;.active &#123;</span><br><span class="line">        <span class="selector-tag">background-position</span>: <span class="selector-tag">-16px</span> <span class="selector-tag">-343px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.arrow</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">37px</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">margin-top</span>: -<span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">      <span class="attribute">cursor</span>: pointer;</span><br><span class="line">      &amp;.left &#123;</span><br><span class="line">        <span class="selector-tag">left</span>: <span class="selector-tag">-68px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      &amp;<span class="selector-class">.right</span> &#123;</span><br><span class="line">        <span class="attribute">right</span>: -<span class="number">68px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="carousel-component-html"><a href="#carousel-component-html" class="headerlink" title="carousel.component.html"></a>carousel.component.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--左侧箭头，用来切换轮播图--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">      <span class="attr">nz-icon</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;arrow left&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">nzType</span>=<span class="string">&quot;left&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">nzTheme</span>=<span class="string">&quot;outline&quot;</span></span></span><br><span class="line"><span class="tag">      (<span class="attr">click</span>)=<span class="string">&quot;onChangeSlide(&#x27;pre&#x27;)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ng-content</span>&gt;</span> <span class="tag">&lt;/<span class="name">ng-content</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--底部圆点，覆盖原有的指示器--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Zorro已经把索引返回出去了，用let-something 来接收索引--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">dot</span> <span class="attr">let-number</span>&gt;</span></span><br><span class="line"> 		 <span class="comment">&lt;!--获取底部当前的下标，以便添加高亮样式--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;dot&quot;</span> [<span class="attr">class.active</span>]=<span class="string">&quot;activeIndex === number&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--右侧箭头，用来切换轮播图--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">      <span class="attr">nz-icon</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;arrow right&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">nzType</span>=<span class="string">&quot;right&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">nzTheme</span>=<span class="string">&quot;outline&quot;</span></span></span><br><span class="line"><span class="tag">      (<span class="attr">click</span>)=<span class="string">&quot;onChangeSlide(&#x27;next&#x27;)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h2 id="carousel-component-ts"><a href="#carousel-component-ts" class="headerlink" title="carousel.component.ts"></a>carousel.component.ts</h2><p>这里涉及到了组件之间的传值，而home和carousel之间复合父子组件，所以使用了注解的方式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// carousel是home的子组件，而父子组件传值可以用注解的方式</span></span><br><span class="line"><span class="comment">// angular8要求在朱姐@viewChild时必须带上｛static: bool｝，以表示该组件是否是动态的</span></span><br><span class="line"><span class="comment">// dotRef是父组件要用的值，而dotRef是子组件中的dom</span></span><br><span class="line">  @ViewChild(<span class="string">&quot;dot&quot;</span>, &#123; <span class="attr">static</span>: <span class="literal">true</span> &#125;) dotRef: TemplateRef&lt;any&gt;;</span><br><span class="line">  <span class="comment">// 指示器模板已经被父组件home使用，拿到activeIndex(指示器下标索引)就要靠父组件传值，所以使用@input（）</span></span><br><span class="line">  @Input() activeIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 将点击类型发射到父组件，以便于控制轮播图</span></span><br><span class="line">  <span class="comment">// 这里本可以将EventEmitter定义为&lt;any&gt;类型，但是为了严禁性，EventEmitter发射的类型只能是&lt;&quot;pre&quot; | &quot;next&quot;&gt;</span></span><br><span class="line">  @Output() changeslide = <span class="keyword">new</span> EventEmitter&lt;<span class="string">&quot;pre&quot;</span> | <span class="string">&quot;next&quot;</span>&gt;();</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 点击之后需要把类型发射到父组件中，才能控制轮播图,使用emit()</span></span><br><span class="line">  onChangeSlide(type: <span class="string">&quot;pre&quot;</span> | <span class="string">&quot;next&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.changeslide.emit(type);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="home-component-html"><a href="#home-component-html" class="headerlink" title="home.component.html"></a>home.component.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用封装的两侧组件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[activeIndex]=&quot;carouselActiveIndex&quot;: 子组件需要传入activeIndex，所以加上[]，而carouselActiveIndex表示当前父组件拿到的下标索引返回值，父子传值的方式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--子组件发射一个事件，父组件使用同名参数(changeslide)来监听	--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-wy-carousel</span></span></span><br><span class="line"><span class="tag">    #<span class="attr">wyCarousel</span></span></span><br><span class="line"><span class="tag">    [<span class="attr">activeIndex</span>]=<span class="string">&quot;carouselActiveIndex&quot;</span></span></span><br><span class="line"><span class="tag">    (<span class="attr">changeslide</span>)=<span class="string">&quot;onChangeSlide($event)&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">	<span class="comment">&lt;!--中间轮播图的内容区域，使用了carousel组件中的ng-content--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--nzDotRender: 使用子组件的Dot渲染模板--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--nzBeforeChange: 切换前的回调，有两个参数&#123; from: number; to: number &#125;，</span></span><br><span class="line"><span class="comment">      将‘to’的参数传回到子组件内，以便可以判断下标并进行高亮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nz-carousel</span></span></span><br><span class="line"><span class="tag">      <span class="attr">nzAutoPlay</span></span></span><br><span class="line"><span class="tag">      <span class="attr">nzEffect</span>=<span class="string">&quot;fade&quot;</span></span></span><br><span class="line"><span class="tag">      [<span class="attr">nzDotRender</span>]=<span class="string">&quot;wyCarousel.dotRef&quot;</span>  </span></span><br><span class="line"><span class="tag">      (<span class="attr">nzBeforeChange</span>)=<span class="string">&quot;OnBeforeChange($event)&quot;</span> </span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--(nzBeforeChange)=&quot;OnBeforeChange($event)&quot; : 父组件获取轮播回调的数据--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;carousel-item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">nz-carousel-content</span></span></span><br><span class="line"><span class="tag">        *<span class="attr">ngFor</span>=<span class="string">&quot;let item of banners&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> [<span class="attr">href</span>]=<span class="string">&quot;item.url&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;banner-item&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> [<span class="attr">src</span>]=<span class="string">&quot;item.imageUrl&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--轮播图结束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nz-carousel</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--两侧组件结束--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">app-wy-carousel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="home-omponent-ts"><a href="#home-omponent-ts" class="headerlink" title="home.omponent.ts"></a>home.omponent.ts</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">&quot;app-home&quot;</span>,</span><br><span class="line">  templateUrl: <span class="string">&quot;./home.component.html&quot;</span>,</span><br><span class="line">  styleUrls: [<span class="string">&quot;./home.component.less&quot;</span>],</span><br><span class="line">  <span class="comment">// angular是组件树构成的项目，他的变更监测默认是一个组件发生改变的时候，会把组件树上关联的子组件和父组件全部变更监测一遍，检测有无变化。OnPush策略只会在input()输入属性发生变化之后才会变更监测，否则其他组件发生变化的时候不影响到他的输入属性，那他就不会变更监测，有利于提升性能</span></span><br><span class="line">  <span class="comment">// 理想状态下，在你完全知道每个组件什么时候会发生变更时，angular每个组件都用上OnPush策略会提升不少的性能</span></span><br><span class="line">  changeDetection: ChangeDetectionStrategy.OnPush,</span><br><span class="line">&#125;)</span><br><span class="line"> banners: Banner[];</span><br><span class="line">  carouselActiveIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 拿到轮播组件的实例，这样就能调用轮播组件的切图方法</span></span><br><span class="line">  @ViewChild(NzCarouselComponent, &#123; <span class="attr">static</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  private nzcarousel: NzCarouselComponent;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(private homeService: HomeService) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="built_in">this</span>.homeService.getBanners().subscribe(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.banners = res;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 切换前的回调，用来接收组件返回的下标，，&#123;to&#125;表示只接受to参数</span></span><br><span class="line">  OnBeforeChange(&#123; to &#125;) &#123;</span><br><span class="line">    <span class="built_in">this</span>.carouselActiveIndex = to;</span><br><span class="line">  &#125;</span><br><span class="line">  onChangeSlide(type: <span class="string">&quot;pre&quot;</span> | <span class="string">&quot;next&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.nzcarousel[type]();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p><strong>轮播组件的切换方法</strong><br><img data-src="https://img-blog.csdnimg.cn/2020092123044958.png#pic_center"></p>
<hr>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><strong>两侧的箭头、底部指示器的圆点以及圆点红色的高亮</strong><br><img data-src="https://img-blog.csdnimg.cn/20200921232745318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center"></p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于这一节的理解，我都尽量表述出来以加强自己的记忆，也发现了自己的短板——组件之间的传值，关于这次父子组件之间的传值，并不是很熟悉，会想着用一两天好好研磨组件之间的传值并写一篇有关自己的理解。</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--4、获取轮播图（一）</title>
    <url>/posts/6455a35d/</url>
    <content><![CDATA[<h1 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h1><p>在service路径下执行创建服务命令</p>
<blockquote>
<p><strong>ng g s home</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@Injectable(&#123;</span><br><span class="line">  providedIn: ServicesModule, <span class="comment">// 哪一个模块提供的</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>其中HomeService中有一个<strong>providedIn</strong>属性，代表着<strong>这个一个服务是谁提供的</strong>；默认值‘root’代表是appModule提供的。但是这次结构是将子服务放进总服务中，所以providedIn值应改为ServicesModule。这样做的好处：<strong>如果这测的服务没有被用到，就会被摇数优化给摇掉(tree shaking，一种编译优化的方式。可以自动清除你引用了但却未使用的模块或包，减小打包体积。)</strong></p>
<a id="more"></a>

<h1 id="服务实现"><a href="#服务实现" class="headerlink" title="服务实现"></a>服务实现</h1><h2 id="home-service"><a href="#home-service" class="headerlink" title="home.service"></a>home.service</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(</span><br><span class="line">    private http: HttpClient,</span><br><span class="line">    @Inject(API_CONFIG) private uri: string // 注入令牌</span><br><span class="line">  ) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取轮播图</span></span><br><span class="line">  getBanners(): Observable&lt;Banner[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.http</span><br><span class="line">      .get(<span class="built_in">this</span>.uri + <span class="string">&quot;banner&quot;</span>)</span><br><span class="line">      .pipe(map(<span class="function">(<span class="params">res: &#123; banners: Banner[] &#125;</span>) =&gt;</span> res.banners)); <span class="comment">//  一般不知道类型，可以使用any</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="service-module"><a href="#service-module" class="headerlink" title="service.module"></a>service.module</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> API_CONFIG = <span class="keyword">new</span> InjectionToken(<span class="string">&quot;ApiconfigToken&quot;</span>);</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [],</span><br><span class="line">  imports: [],</span><br><span class="line">  providers: [&#123; <span class="attr">provide</span>: API_CONFIG, <span class="attr">useValue</span>: <span class="string">&quot;http://localhost:3000/&quot;</span> &#125;],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>ApiconfigToken是什么意思？</strong><br><strong>angular提供一个服务，都有一个令牌以及令牌的值，值可以是字符串或者类，令牌也可以直接写成字符串，但是可读性不好，一般写成key，value形式。</strong></p>
</blockquote>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h2 id="home-component-ts"><a href="#home-component-ts" class="headerlink" title="home.component.ts"></a>home.component.ts</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  banners: Banner[]; <span class="comment">//轮播图数据</span></span><br><span class="line">  <span class="comment">// 注入服务</span></span><br><span class="line">  <span class="keyword">constructor</span>(private homeService: HomeService) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  <span class="comment">// 调用方法</span></span><br><span class="line">    <span class="built_in">this</span>.homeService.getBanners().subscribe(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.banners = res;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="home-component-html"><a href="#home-component-html" class="headerlink" title="home.component.html"></a>home.component.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nz-carousel</span> <span class="attr">nzAutoPlay</span> <span class="attr">nzEffect</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;carousel-item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">nz-carousel-content</span></span></span><br><span class="line"><span class="tag">        *<span class="attr">ngFor</span>=<span class="string">&quot;let item of banners&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> [<span class="attr">href</span>]=<span class="string">&quot;item.url&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;banner-item&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> [<span class="attr">src</span>]=<span class="string">&quot;item.imageUrl&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nz-carousel</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="home-component-less"><a href="#home-component-less" class="headerlink" title="home.component.less"></a>home.component.less</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../../../assets/styles/varibles&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../../../assets/styles/mixins&quot;</span>;</span><br><span class="line"><span class="selector-class">.home</span> &#123;</span><br><span class="line">  .banner-item &#123;</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">block</span>;</span><br><span class="line">    <span class="selector-tag">width</span>: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.main</span> &#123;</span><br><span class="line">    .wrap &#123;</span><br><span class="line">      <span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line">      <span class="selector-tag">justify-content</span>: <span class="selector-tag">space-between</span>;</span><br><span class="line">      <span class="selector-tag">background-color</span>: <span class="keyword">@white-color</span>;</span><br><span class="line">      <span class="selector-tag">border-left</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="keyword">@border-color-base</span>;</span><br><span class="line">      <span class="selector-tag">border-right</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="keyword">@border-color-base</span>;</span><br><span class="line">      <span class="selector-class">.left</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">726px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">40px</span>;</span><br><span class="line">        .sec &#123;</span><br><span class="line">          <span class="selector-class">.up</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: flex;</span><br><span class="line">            <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">            <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid @red-color;</span><br><span class="line">            <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">            .navs &#123;</span><br><span class="line">              <span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line">              <span class="selector-tag">align-items</span>: <span class="selector-tag">flex-end</span>;</span><br><span class="line">              <span class="selector-tag">h2</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: @font-size-lgs;</span><br><span class="line">                <span class="attribute">a</span>:hover &#123;</span><br><span class="line">                  text-decoration: inherit;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="selector-tag">i</span> &#123;</span><br><span class="line">                  <span class="attribute">display</span>: inline-block;</span><br><span class="line">                  <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">                  <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">                  <span class="attribute">background-color</span>: @white-color;</span><br><span class="line">                  <span class="attribute">border</span>: <span class="number">3px</span> solid @red-color;</span><br><span class="line">                  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">                  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="selector-tag">nav</span> &#123;</span><br><span class="line">                a &#123;</span><br><span class="line">                  <span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;</span><br><span class="line">                  <span class="selector-tag">padding</span>: 0 12<span class="selector-tag">px</span>;</span><br><span class="line">                  <span class="selector-tag">border-right</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="keyword">@border-color-base</span>;</span><br><span class="line">                  //margin-left: 15px;</span><br><span class="line">                  &amp;<span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">                    <span class="attribute">border-right</span>: none;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.down</span> &#123;</span><br><span class="line">            .down-wrap &#123;</span><br><span class="line">              <span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line">              <span class="selector-tag">flex-wrap</span>: <span class="selector-tag">wrap</span>;</span><br><span class="line">              <span class="selector-class">.sheet-item</span> &#123;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">204px</span>;</span><br><span class="line">                <span class="attribute">margin-right</span>: <span class="number">42px</span>;</span><br><span class="line">                &amp;:nth-of-type(4n) &#123;</span><br><span class="line">                  <span class="selector-tag">margin-right</span>: 0;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.right</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">        <span class="attribute">border-left</span>: <span class="number">1px</span> solid @border-color-base;</span><br><span class="line">        .settled-singer &#123;</span><br><span class="line">          <span class="selector-tag">padding</span>: 15<span class="selector-tag">px</span>;</span><br><span class="line">          <span class="selector-tag">background-color</span>: <span class="keyword">@white-color</span>;</span><br><span class="line">          <span class="selector-class">.tit</span> &#123;</span><br><span class="line">            <span class="attribute">font-size</span>: @font-size-sm;</span><br><span class="line">            <span class="attribute">overflow</span>: hidden;</span><br><span class="line">            <span class="attribute">padding-bottom</span>: <span class="number">8px</span>;</span><br><span class="line">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid @border-color-base;</span><br><span class="line">            b &#123;</span><br><span class="line">              <span class="selector-tag">float</span>: <span class="selector-tag">left</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">span</span> &#123;</span><br><span class="line">              <span class="attribute">float</span>: right;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.list</span> &#123;</span><br><span class="line">            <span class="attribute">overflow</span>: hidden;</span><br><span class="line">            .card &#123;</span><br><span class="line">              <span class="selector-tag">margin-top</span>: 14<span class="selector-tag">px</span>;</span><br><span class="line">              <span class="selector-tag">width</span>: 210<span class="selector-tag">px</span>;</span><br><span class="line">              <span class="selector-tag">height</span>: 62<span class="selector-tag">px</span>;</span><br><span class="line">              <span class="selector-tag">background</span>: <span class="selector-id">#fafafa</span>;</span><br><span class="line">              <span class="selector-tag">cursor</span>: <span class="selector-tag">pointer</span>;</span><br><span class="line">              <span class="selector-class">.pic</span> &#123;</span><br><span class="line">                <span class="attribute">float</span>: left;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">62px</span>;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">62px</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="selector-class">.txt</span> &#123;</span><br><span class="line">                <span class="attribute">float</span>: left;</span><br><span class="line">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span><br><span class="line">                <span class="attribute">padding-left</span>: <span class="number">14px</span>;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">147px</span>;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">62px</span>;</span><br><span class="line">                b &#123;</span><br><span class="line">                  <span class="selector-tag">display</span>: <span class="selector-tag">block</span>;</span><br><span class="line">                  <span class="selector-tag">margin-top</span>: 8<span class="selector-tag">px</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="selector-tag">span</span> &#123;</span><br><span class="line">                  <span class="attribute">display</span>: block;</span><br><span class="line">                  <span class="attribute">margin-top</span>: <span class="number">8px</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h1><p><img data-src="https://img-blog.csdnimg.cn/20200917222557327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="实现"></p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于服务的实现和注入并不是很复杂的地方，反而是装饰器有点陌生，一方面不知道是什么，另一方面就是不知道怎么用，为什么这么用；里边讲到了因域名重复写而要写一个token令牌，这并不是有很清晰的理解，用来保存后端交互的token认证信息和这个令牌有什么关联还有待学习，之前用到的Alain是新建了environment.ts来解决连接后端重复使用的域名，应该也是差不多的逻辑吧。</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--3、页面布局</title>
    <url>/posts/f1e8bb7a/</url>
    <content><![CDATA[<h1 id="根页面"><a href="#根页面" class="headerlink" title="根页面"></a>根页面</h1><p>创建完目录之后，就可以实现根页面了，各个子页面都是嵌套在根页面之中，所以根页面要有一定的布局。一般的pc页面都是包含头部、底部、中间的内容、左侧和右侧的菜单视情况而定。<br><img data-src="https://img-blog.csdnimg.cn/20200917201656906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="页面布局"></p>
<a id="more"></a>
<p>这个案例也是采用这种布局。<img data-src="https://img-blog.csdnimg.cn/20200917202213424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center"></p>
<h1 id="app-component"><a href="#app-component" class="headerlink" title="app.component"></a>app.component</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nz-layout</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--头部--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nz-header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Music<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">nz-menu</span> <span class="attr">nzTheme</span>=<span class="string">&quot;dark&quot;</span> <span class="attr">nzMode</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">nz-menu-item</span>&gt;</span>发现<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">nz-menu-item</span>&gt;</span>歌单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nz-input-group</span> [<span class="attr">nzSuffix</span>]=<span class="string">&quot;suffixIconSearch&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;歌单/歌手&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">nz-input-group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">suffixIconSearch</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">nz-icon</span> <span class="attr">nzType</span>=<span class="string">&quot;search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;member&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;no-llogin&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ul</span> <span class="attr">nz-menu</span> <span class="attr">nzTheme</span>=<span class="string">&quot;dark&quot;</span> <span class="attr">nzMode</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">nz-submenu</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">nz-icon</span> <span class="attr">nzType</span>=<span class="string">&quot;down&quot;</span> <span class="attr">nzTheme</span>=<span class="string">&quot;outline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">nz-menu-item</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">i</span> <span class="attr">nz-icon</span> <span class="attr">nzType</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">nzTheme</span>=<span class="string">&quot;outline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                      手机登录</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">nz-menu-item</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">i</span> <span class="attr">nz-icon</span> <span class="attr">nzType</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">nzTheme</span>=<span class="string">&quot;outline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                      注册</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nz-header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nz-content</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span>   <span class="comment">&lt;!--子页面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nz-content</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--底部--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nz-footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">      Ant Design 02020 Immplement By Angular</span><br><span class="line">    <span class="tag">&lt;/<span class="name">nz-footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nz-layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="app-component-less"><a href="#app-component-less" class="headerlink" title="app.component.less"></a>app.component.less</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#app</span> <span class="selector-class">.layout</span>&#123;</span><br><span class="line">  .header &#123;</span><br><span class="line">    <span class="selector-class">.wrap</span>&#123;</span><br><span class="line">      display: flex;	//flex布局</span><br><span class="line">      justify-content: space-between;	//对齐方式选择保持间隔</span><br><span class="line">      <span class="selector-tag">width</span>: 1100<span class="selector-tag">px</span>;</span><br><span class="line">      <span class="selector-class">.left</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        h1&#123;</span><br><span class="line">          <span class="selector-tag">width</span>: 157<span class="selector-tag">px</span>;</span><br><span class="line">          <span class="selector-tag">color</span>: <span class="keyword">@border-color-base</span>;	</span><br><span class="line">          <span class="selector-tag">font-size</span>: <span class="keyword">@font-size-lgx</span>;</span><br><span class="line">          <span class="selector-tag">margin-bottom</span>: 0;</span><br><span class="line">          <span class="selector-tag">margin-right</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line">          <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">ul</span>&#123;</span><br><span class="line">          <span class="attribute">height</span>:<span class="number">64px</span>;</span><br><span class="line">          <span class="attribute">line-height</span>:<span class="number">64px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.right</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        .member&#123;</span><br><span class="line">          <span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line">          <span class="selector-tag">align-items</span>: <span class="selector-tag">center</span>;</span><br><span class="line">          <span class="selector-tag">color</span>: <span class="keyword">@white-color</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: @body-color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.footer</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:host</span> <span class="selector-pseudo">::ng-deep</span> <span class="selector-class">.ant-back-top</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="创建首页"><a href="#创建首页" class="headerlink" title="创建首页"></a>创建首页</h1><ul>
<li><p>在pages路径下执行创建命令</p>
<blockquote>
<p><strong>ng g m home</strong>  // 创建模块<br><strong>ng g c home</strong>  // 创建组件</p>
</blockquote>
</li>
<li><p>在home-routing-module中添加路由配置</p>
<blockquote>
<p><strong>const routes: Routes = [{ path: “home”, component: HomeComponent }];</strong> // 添加home页路由</p>
</blockquote>
</li>
<li><p>在app-routing-module中添加路由配置</p>
<blockquote>
<p>// 全局配置，进入页面时，会重定向路由到home中<br><strong>const routes: Routes = [{ path: “”, redirectTo: “/home”, pathMatch: “full” }];</strong> </p>
</blockquote>
<h3>运行之后</h3>

</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/20200917205159982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>　　网站页面布局中的内页模板有<strong>两栏式</strong>和 <strong>三栏式</strong>。 <strong>两栏式多用于小型企业博客网站。两栏页面的中心部分是文章内容，侧面为用户互动内容，如推荐文章等</strong>当然栏目页需要注意文章列表每页条目不要太少，会导致不便于用户浏览，也会出现网站页面层次过深的问题。<strong>三栏的内页布局和两栏的差不多，中间位置为文章内容，两侧方式相应的互动内容或广告。</strong></p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--2、构建项目</title>
    <url>/posts/a93691ee/</url>
    <content><![CDATA[<h1 id="构建目录"><a href="#构建目录" class="headerlink" title="构建目录"></a>构建目录</h1><p>使用过angular，就会知道什么是模块化，顾名思义，就是把整体分割成能够单独运行的一个各模块，这样做的好处有很多，比如<strong>实现逻辑更清晰、可读性强</strong>、<strong>团队开发分工明确,容易控制</strong>、<strong>充分利用可以重用代码</strong>、<strong>抽象出可公用的模块,可维护性强</strong>、<strong>模块化的遗留系统方便组装开发新的相似系统</strong>等等。angular都有一个根模块用于调用整个项目，但是所有引用都放在根模块会对项目产生一定的代价，所以构建一个比较合理的目录，创建子模块来分担跟根模块的负载是很重要的。</p>
<a id="more"></a>
<h1 id="一、创建文件夹"><a href="#一、创建文件夹" class="headerlink" title="一、创建文件夹"></a>一、创建文件夹</h1><p>在app路径下执行以下代码来创建模块</p>
<blockquote>
<p><strong>ng g m core</strong><br><strong>ng g m share</strong><br><strong>ng g m pages</strong><br><strong>ng g m services</strong></p>
</blockquote>
<p>创建完成之后就会有这样的结构：</p>
<p><img data-src="https://img-blog.csdnimg.cn/2020091621333439.png#pic_center" alt="目录"></p>
<h1 id="二、功能模块"><a href="#二、功能模块" class="headerlink" title="二、功能模块"></a>二、功能模块</h1><h2 id="app-modult-ts"><a href="#app-modult-ts" class="headerlink" title="app.modult.ts"></a>app.modult.ts</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [AppComponent],</span><br><span class="line">  imports: [CoreModule],</span><br><span class="line">  bootstrap: [AppComponent],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="core-module-ts"><a href="#core-module-ts" class="headerlink" title="core.module.ts"></a>core.module.ts</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    HttpClientModule,</span><br><span class="line">    BrowserAnimationsModule,</span><br><span class="line">    ServicesModule,</span><br><span class="line">    PagesModule,</span><br><span class="line">    ShareModule,</span><br><span class="line">    AppRoutingModule,</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">exports</span>: [ShareModule, AppRoutingModule],</span><br><span class="line"></span><br><span class="line">  providers: [&#123; <span class="attr">provide</span>: NZ_I18N, <span class="attr">useValue</span>: zh_CN &#125;],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CoreModule</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(@SkipSelf() @Optional() parentModule: CoreModule) &#123;</span><br><span class="line">    <span class="keyword">if</span> (parentModule) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;CoreModule只能被APPmodule引入&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="pages-modult-ts"><a href="#pages-modult-ts" class="headerlink" title="pages.modult.ts"></a>pages.modult.ts</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [],</span><br><span class="line">  imports: [ShareModule],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">PagesModule</span> </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="services-modult-ts"><a href="#services-modult-ts" class="headerlink" title="services.modult.ts"></a>services.modult.ts</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [],</span><br><span class="line">  imports: [],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ServicesModule</span> </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="share-modult-ts"><a href="#share-modult-ts" class="headerlink" title="share.modult.ts"></a>share.modult.ts</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [],</span><br><span class="line">  imports: [NgZorroAntdModule, FormsModule, CommonModule],</span><br><span class="line">  <span class="built_in">exports</span>: [NgZorroAntdModule, FormsModule, CommonModule],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ShareModule</span> </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>为什么coreModule里会有一层逻辑？</strong><br>大佬是这么解释的：</p>
<blockquote>
<p>在这里，coreModule相当于根模块，但是作为子模块，它只能被appModule引用，为了避免被其他功能模块引用，所以会有一层判断，如果其他模块引用了他，那么就会抛出一个错误。所以需要注入他本身作为父模块，但是第一次读取的时候呢，coreModule是找不到的，所以就会陷入死循环中，所以加一个 <strong>@SkipSelf</strong>装饰器修饰这个参数用来跳过本身；并且允许coreMOdule是可以不存在的，所以可以再加一个 <strong>@Optional</strong>装饰器，这样如果找不到coreModule就会赋值null，而不会抛出错误。</p>
</blockquote>
<h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>很绕，这一节视频足足看了三四遍，也没明白为什么会有一层拦截，先埋个坑！<br>关于模块，最好的理解就是能够分离开发，做到互不干扰，在一个功能修改的时候尽量不去改变其他模块的代码，就大大减少了耦合度。</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular网易云】--1、创建项目</title>
    <url>/posts/67862301/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前对于angular的使用虽然有一段时间了，但是对于结构的认知依旧是很片面，一些关键的要点也是一知半解，所以一直想找一个全面介绍的视频或者课程。恰巧，今天刚刚看到一个大佬用<strong>angular8+ngrx8</strong>完成一项网易云音乐的管理项目，就想着在这位大佬的引领下补充自己未知的知识点，因为课程的内容时长很长，我也不确定什么时候能够跟完，但会一直督促自己，加油！</p>
<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><ul>
<li><p><strong>B站视频</strong>：<a href="https://www.bilibili.com/video/av70355308">https://www.bilibili.com/video/av70355308</a></p>
</li>
<li><p><strong>GitHub</strong>：<a href="https://github.com/lycHub/ng-wyy">https://github.com/lycHub/ng-wyy</a></p>
<a id="more"></a>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>该项目用了**<a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/">网易云音乐 NodeJS 版 API</a>**，所以该项目应该不太涉及后端的知识点，新建项目之前可以先安装网易云API。</p>
</li>
<li><p>先在<a href="https://github.com/Binaryify/NeteaseCloudMusicApi">GitHub</a>上克隆项目</p>
</li>
<li><p>打开文件夹，在终端运行命令：<strong>npm install</strong></p>
</li>
<li><p>运行：<strong>node app.js</strong><br><img data-src="https://img-blog.csdnimg.cn/20200914224325410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="成功效果"></p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>按照大佬的步骤新建命令即可</p>
<blockquote>
<p><strong>npm i @angular/cli -g</strong> // 安装cli<br><strong>ng new  ng-wyy –style=less –routing -S</strong> // 新建包含less和路由的项目<br>   <strong>ng add ng-zorro-antd</strong> // 安装脚手架<br><img data-src="https://img-blog.csdnimg.cn/20200914225255474.png#pic_center" alt="脚手架"></p>
</blockquote>
</li>
</ul>
<h2 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h2><p>因为主要介绍框架，所以并不涉及css样式的设计，大佬就选择了直接引用，包括网易云pc端的css，这个把在GitHub上克隆的项目中的文件夹复制覆盖就好<img data-src="https://img-blog.csdnimg.cn/20200914225636306.png#pic_center" alt="在这里插入图片描述"></p>
<p><img data-src="https://img-blog.csdnimg.cn/20200914225558494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><p>目前的进度只是再次复习创建项目的过程，但是熟能生巧，创建的过程中就感觉有些东西其实本可以省略的，还是不够熟练呀。就目前的进度来说，很慢，详细的看完三个视频并做笔记是很痛苦的过程，但是看到大佬演示最后的样子，是真的感觉Cow Beer，所以，不能中断呀！一定要坚持的跟下去，紧跟大佬脚步！</p>
]]></content>
      <categories>
        <category>CloudMusic</category>
      </categories>
      <tags>
        <tag>CloudMusic</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular2】--表单创建(FormArray、FormGroup)</title>
    <url>/posts/140ab620/</url>
    <content><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p><strong>表单的三大基本构造块：FormGroup 、 FormControl、FormArray 。</strong></p>
<blockquote>
<p><strong>FormGroup</strong> 把每个子 FormControl 的值聚合进一个对象，它的 key 是每个控件的名字。 它通过归集其子控件的状态值来计算出自己的状态。 比如，如果组中的任何一个控件是无效的，那么整个组就是无效的。</p>
</blockquote>
<blockquote>
<p><strong>FormArray</strong> 聚合了数组中每个表单控件的值。 它还会根据其所有子控件的状态总结出自己的状态。比如，如果 FromArray 中的任何一个控件是无效的，那么整个数组也会变成无效的。</p>
</blockquote>
<p>简要概述就是在创建表单时，有些数据格式并不是单单的字符串和数值类型的，可能是对象或者是数组，这时候就能用上表单的FormArray和FormGroup，以达到快速获取表单值并提交对应的数据类型。</p>
<a id="more"></a>

<hr>
<h1 id="一、场景"><a href="#一、场景" class="headerlink" title="一、场景"></a>一、场景</h1><p>假如我们需要提交个人信息，信息需要提交你和家人的姓名和年龄，以及家庭住址。<br><img data-src="https://img-blog.csdnimg.cn/20201028160948953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="表单页"></p>
<p>想到类似的表单页，就简要的写了一个，其中个人信息的姓名和年龄按照正常的字符串提交，家庭信息以数组方式提交，家庭地址按照对象提交。</p>
<hr>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="form-component-html"><a href="#form-component-html" class="headerlink" title="form.component.html"></a>form.component.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--ant卡片组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nz-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">nz-form</span> [<span class="attr">formGroup</span>]=<span class="string">&quot;formData&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--个人信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nz-divider</span> <span class="attr">nzText</span>=<span class="string">&quot;个人信息&quot;</span> <span class="attr">nzOrientation</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">nz-divider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">nz-row</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">nz-col</span> <span class="attr">nzSpan</span>=<span class="string">&quot;8&quot;</span> <span class="attr">nzOffset</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-label</span> <span class="attr">nzSpan</span>=<span class="string">&quot;6&quot;</span> <span class="attr">nzOffset</span>=<span class="string">&quot;1&quot;</span>&gt;</span>姓名 <span class="tag">&lt;/<span class="name">nz-form-label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名称&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">nz-col</span> <span class="attr">nzSpan</span>=<span class="string">&quot;8&quot;</span> <span class="attr">nzOffset</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-label</span> <span class="attr">nzSpan</span>=<span class="string">&quot;6&quot;</span> <span class="attr">nzOffset</span>=<span class="string">&quot;1&quot;</span>&gt;</span>年龄 <span class="tag">&lt;/<span class="name">nz-form-label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nz-input-number</span> [<span class="attr">nzMin</span>]=<span class="string">&quot;0&quot;</span> [<span class="attr">nzStep</span>]=<span class="string">&quot;1&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">nz-input-number</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--家庭信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nz-divider</span> <span class="attr">nzText</span>=<span class="string">&quot;家庭信息&quot;</span> <span class="attr">nzOrientation</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">nz-divider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">nz-row</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let info of family; let i = index&quot;</span> <span class="attr">formArrayName</span>=<span class="string">&#x27;family&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">nz-col</span> <span class="attr">nzSpan</span>=<span class="string">&quot;8&quot;</span> <span class="attr">nzOffset</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-label</span> <span class="attr">nzSpan</span>=<span class="string">&quot;6&quot;</span> <span class="attr">nzOffset</span>=<span class="string">&quot;1&quot;</span>&gt;</span>&#123;&#123;info.code&#125;&#125; <span class="tag">&lt;/<span class="name">nz-form-label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-control</span> [<span class="attr">formGroupName</span>]=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">nz-col</span> <span class="attr">nzSpan</span>=<span class="string">&quot;8&quot;</span> <span class="attr">nzOffset</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-label</span> <span class="attr">nzSpan</span>=<span class="string">&quot;6&quot;</span> <span class="attr">nzOffset</span>=<span class="string">&quot;1&quot;</span>&gt;</span>年龄 <span class="tag">&lt;/<span class="name">nz-form-label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-control</span> [<span class="attr">formGroupName</span>]=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nz-input-number</span> [<span class="attr">nzMin</span>]=<span class="string">&quot;0&quot;</span> [<span class="attr">nzStep</span>]=<span class="string">&quot;1&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">nz-input-number</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--家庭地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nz-divider</span> <span class="attr">nzText</span>=<span class="string">&quot;家庭地址&quot;</span> <span class="attr">nzOrientation</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">nz-divider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">nz-row</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">nz-col</span> <span class="attr">nzSpan</span>=<span class="string">&quot;24&quot;</span> <span class="attr">formGroupName</span>=<span class="string">&#x27;address&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-label</span> <span class="attr">nzSpan</span>=<span class="string">&quot;4&quot;</span> <span class="attr">nzOffset</span>=<span class="string">&quot;0&quot;</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">nz-form-label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-control</span> <span class="attr">nzSpan</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入国家&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;county&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-control</span> <span class="attr">nzSpan</span>=<span class="string">&quot;4&quot;</span> <span class="attr">nzOffset</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入省份&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;province&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nz-form-control</span> <span class="attr">nzSpan</span>=<span class="string">&quot;4&quot;</span> <span class="attr">nzOffset</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入市县&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;city&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nz-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--显示数据--&gt;</span></span><br><span class="line">&#123;&#123;formData.value | json&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<h2 id="form-component-ts"><a href="#form-component-ts" class="headerlink" title="form.component.ts"></a>form.component.ts</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> fb: FormBuilder</span>) &#123;&#125; <span class="comment">// 注入formBuilder，快速创建表单</span></span><br><span class="line"></span><br><span class="line">formData: FormGroup; <span class="comment">// 表单数据</span></span><br><span class="line"><span class="comment">// 模拟简单的家庭信息模板，真实的家庭信息数据量很大</span></span><br><span class="line">family = [</span><br><span class="line">  &#123; id: <span class="number">1</span>, code: <span class="string">&#x27;父亲&#x27;</span>, name: <span class="string">&#x27;father&#x27;</span>, age: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; id: <span class="number">2</span>, code: <span class="string">&#x27;母亲&#x27;</span>, name: <span class="string">&#x27;mother&#x27;</span>, age: <span class="number">0</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化表单</span></span><br><span class="line">  <span class="built_in">this</span>.formData = <span class="built_in">this</span>.fb.group(&#123;</span><br><span class="line">    name: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">    age: [<span class="string">&#x27;&#x27;</span>],</span><br><span class="line">    family: <span class="built_in">this</span>.fb.array([]),</span><br><span class="line">    address: <span class="built_in">this</span>.fb.group(&#123;&#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 获取表单组的address参数作为FormGroup，以便于调用FormGroup的添加formControl的方法</span></span><br><span class="line">  <span class="keyword">const</span> address = <span class="built_in">this</span>.formData.controls.address <span class="keyword">as</span> FormGroup;</span><br><span class="line">  address.addControl(<span class="string">&#x27;county&#x27;</span>, <span class="keyword">new</span> FormControl(<span class="literal">null</span>));</span><br><span class="line">  address.addControl(<span class="string">&#x27;province&#x27;</span>, <span class="keyword">new</span> FormControl(<span class="literal">null</span>));</span><br><span class="line">  address.addControl(<span class="string">&#x27;city&#x27;</span>, <span class="keyword">new</span> FormControl(<span class="literal">null</span>));</span><br><span class="line">  <span class="comment">// 获取表单组的family参数作为formarray，以便于调用FormArray的方法</span></span><br><span class="line">  <span class="keyword">const</span> familyArray = <span class="built_in">this</span>.formData.controls.family <span class="keyword">as</span> FormArray;</span><br><span class="line">  <span class="comment">// 循环创建formcontrol，用新的formgroup添加control，再调用formarray的push方法（在数组末尾添加）</span></span><br><span class="line">  <span class="built_in">this</span>.family.forEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> familyGroup = <span class="keyword">new</span> FormGroup(&#123;&#125;);</span><br><span class="line">    familyGroup.addControl(<span class="string">&#x27;name&#x27;</span>, <span class="keyword">new</span> FormControl(<span class="literal">null</span>));</span><br><span class="line">    familyGroup.addControl(<span class="string">&#x27;age&#x27;</span>, <span class="keyword">new</span> FormControl(<span class="literal">null</span>));</span><br><span class="line">    familyArray.push(familyGroup);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><ul>
<li>输入数据后：<br><img data-src="https://img-blog.csdnimg.cn/20201028162827879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center"></li>
<li>表单数据结构：<br><img data-src="https://img-blog.csdnimg.cn/20201028162917845.png#pic_center"></li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>更多的是动态创建表单，这时候在添加form control时要注意，往往需要一个唯一标识。如果formArrayName根据索引，并且对象内的属性命名跟索引有关联，那在删除的时候就要注意，再删了第一条数据之后，后边的索引都前移了一位，以至于找不到对应的formControl。</p>
]]></content>
      <categories>
        <category>Angular2</category>
      </categories>
      <tags>
        <tag>Angular2</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular2】--ng-template与ng-container搭配使用</title>
    <url>/posts/75fbea27/</url>
    <content><![CDATA[<h1 id="ng-template"><a href="#ng-template" class="headerlink" title="ng-template"></a>ng-template</h1><blockquote>
<p><ng-template>是一个 Angular 元素，用来渲染 HTML。 它永远不会直接显示出来。 </p>
</blockquote>
<p>ng-template仅是用于包含一个内容的模板，使得其可以与其他的模板镶嵌组合成一个组件模板。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>正因为其不会显示在DOM中，所以可以将一些指令放在上边。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">name</span> *<span class="attr">ngIf</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是如果有两个指令相互嵌套使用，那么能否全都放到 ==ng-template== 上呢？答案是不可以的，angular是不允许将指令放在同一个标签上的<br><img data-src="https://img-blog.csdnimg.cn/202101101513284.png" alt="在这里插入图片描述"><br>所以我们还可以使用另一个模块标签</p>
<hr>
<h1 id="ng-container"><a href="#ng-container" class="headerlink" title="ng-container"></a>ng-container</h1><blockquote>
<p>&lt; ng-container&gt; 是一个分组元素，但它不会污染样式或元素布局，因为 Angular 压根不会把它放进 DOM 中。</p>
</blockquote>
<p>而且ng-container还会提供占位，外层的组件可以将自定义模板动态的传入到页面。再结合*ng-temolateOutlet的属性可以实现动态自定义组件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">&#x27;app-a-child&#x27;</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ng-container </span></span><br><span class="line"><span class="string">    	*ngTemplateOutlet=&quot;templateR? templateR :default; context: tempValue&quot;</span></span><br><span class="line"><span class="string">    &gt;&lt;/ng-container&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;ng-template #default&gt;</span></span><br><span class="line"><span class="string">      &lt;input placeholder=&quot;input&quot; /&gt;</span></span><br><span class="line"><span class="string">&lt;/ng-template&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AChildComponent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  @Input() templateR: TemplateRef&lt;any&gt;;</span><br><span class="line">  tempValue= &#123;<span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--a.component.html--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-child</span> [<span class="attr">templateR</span>]=<span class="string">&quot;btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a-child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">btn</span> <span class="attr">let-person</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>这样就能实现父组件向子组件传递模块信息从而实现自定义组件。</p>
<p><strong>子组件中的ng-container当做占位，根据父组件传的templateR值来判断将什么当做组件内容，当父组件将引用变量btn传给子组件，此时子组件就会整体的将引用变量渲染到占位处。</strong></p>
<blockquote>
<p>参考：<a href="https://blog.tcs-y.com/2020/06/07/angular-template-container/">Angular ng-template、ng-container使用</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Angular2</category>
      </categories>
      <tags>
        <tag>Angular2</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular2】--兄弟组件传值</title>
    <url>/posts/162fe8c8/</url>
    <content><![CDATA[<h1 id="兄弟组件"><a href="#兄弟组件" class="headerlink" title="兄弟组件"></a>兄弟组件</h1><ul>
<li>兄弟组件一般使用中间人的方式实现交互，中间人也有不同的选择，可以使用第三者或者父组件也可以使用父服务，相对于第三者组件，父组件和服务的优点就体现出来了——<strong>稳定</strong> ， 父子组件一般是有耦合的，所以在确保模块的独立性时会选择父服务作为中间人。</li>
</ul>
<hr>
<a id="more"></a>


<blockquote>
<p>本篇文章参照<a href="https://blog.csdn.net/hl971115/article/details/102259417">angular8兄弟之间传值</a></p>
</blockquote>
<hr>
<h1 id="创建兄弟组件"><a href="#创建兄弟组件" class="headerlink" title="创建兄弟组件"></a>创建兄弟组件</h1><p><img data-src="https://img-blog.csdnimg.cn/20200930135605728.png#pic_center" alt="在这里插入图片描述"><br>相对于parent模块来说，tom 和 jack 是兄弟组件。parent.service就是选用的中间人。</p>
<hr>
<h1 id="tom-component-html"><a href="#tom-component-html" class="headerlink" title="tom.component.html"></a>tom.component.html</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 0; padding: 0;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;width: 49%;height: 200px;text-align: center; border:1px solid red; margin-right: 5px;float:left ;padding: 5px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;tom&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;sendToJack()&quot;</span>&gt;</span>tell parent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;width: 49%;height: 200px;text-align: center;  border:1px solid blue;margin-left: 5px; float:right;padding: 5px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-jack</span>&gt;</span><span class="tag">&lt;/<span class="name">app-jack</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear: both;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在tom组件内将jack组件引入，并调整样式。tom中有一个输入框，在tom中输入值后，点击按钮可将值传递到jack组件之中并显示。</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200930140102294.png#pic_center" alt="在这里插入图片描述"></p>
<h1 id="tom-component-ts"><a href="#tom-component-ts" class="headerlink" title="tom.component.ts"></a>tom.component.ts</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TomComponent</span>  </span>&#123;</span><br><span class="line">	<span class="comment">// 注入服务</span></span><br><span class="line">  <span class="keyword">constructor</span>(private service: ParentService) &#123;&#125;</span><br><span class="line">  <span class="comment">// 输入框绑定值</span></span><br><span class="line">  tom = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="comment">// 发送值给jack组件</span></span><br><span class="line">  sendToJack() &#123;</span><br><span class="line">    <span class="built_in">this</span>.service.emit(<span class="built_in">this</span>.tom);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="parent-service-ts"><a href="#parent-service-ts" class="headerlink" title="parent.service.ts"></a>parent.service.ts</h1><blockquote>
<p>Subject是Observable的子类。- Subject是多播的，允许将值多播给多个观察者。普通的 Observable 是单播的。<br>在 Subject 的内部，subscribe 不会调用发送值的新执行。它只是将给定的观察者注册到观察者列表中，类似于其他库或语言中的 addListener 的工作方式。<br>要给 Subject 提供新值，只要调用 next(theValue)，它会将值多播给已注册监听该 Subject 的观察者们。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ParentService</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建Subject事件</span></span><br><span class="line">  private subject = <span class="keyword">new</span> Subject();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建消费者监听</span></span><br><span class="line">  listen = <span class="built_in">this</span>.subject.asObservable();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发送数据</span></span><br><span class="line">  emit(value: any) &#123;</span><br><span class="line">    <span class="built_in">this</span>.subject.next(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在服务内，创建一个subject主题，并创建Observable监听者，在有监听者调用emit()方法时，就会将值发给监听者</p>
<hr>
<h1 id="jack-component-ts"><a href="#jack-component-ts" class="headerlink" title="jack.component.ts"></a>jack.component.ts</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">JackComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 注入服务</span></span><br><span class="line">  <span class="keyword">constructor</span>(private service: ParentService) &#123;&#125;</span><br><span class="line">  <span class="comment">// 兄弟组件传的值</span></span><br><span class="line">  value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  ngOnInit(): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="comment">// 调用服务中的监听，若观察的数据有变化则会传给观察者们</span></span><br><span class="line">    <span class="built_in">this</span>.service.listen.subscribe(<span class="function">(<span class="params">value: any</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img data-src="https://img-blog.csdnimg.cn/20200930141258477.png#pic_center" alt="在这里插入图片描述"></p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a href="https://blog.csdn.net/qq_34414916/article/details/85201246">数星星等天明</a></p>
<blockquote>
<p>我们使用Observable创建的可观察对象只能用于单播，也就是每次订阅就代表着不同的一次订阅者函数的执行，不同的观察者之间互不干扰，（不理解的话请继续阅读，后面会有具体的例子）</p>
</blockquote>
<blockquote>
<p>而我们使用Subject创建的可观察对象是可以用于多播的，也就是多个观察者共享一个订阅者函数，生产者每次发送的值，都会发送给多播中的每一个观察者！</p>
</blockquote>
<blockquote>
<p>Subject既可以作为可观察对象使用、又可以作为观察者使用！</p>
</blockquote>
<blockquote>
<p>当Subject作为可观察对象使用的时候，其subscribe函数的作用变成了注册observer，而其next方法的作用变成了发送值</p>
</blockquote>
]]></content>
      <categories>
        <category>Angular2</category>
      </categories>
      <tags>
        <tag>Angular2</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular2】--父子组件传值</title>
    <url>/posts/ab3048f6/</url>
    <content><![CDATA[<h1 id="父子组件之间传值"><a href="#父子组件之间传值" class="headerlink" title="父子组件之间传值"></a>父子组件之间传值</h1><h2 id="装饰器-Input与-Output"><a href="#装饰器-Input与-Output" class="headerlink" title="装饰器@Input与@Output"></a>装饰器@Input与@Output</h2><p>父组件引用子组件，两个组件内部都是一个输入框</p>
<p><strong>parent.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: darkred 1px solid; width: 50%;height: 50px; text-align: center;padding-top: 10px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>parent：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> #<span class="attr">parentInput</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot; text-align: center; &quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-app-child</span> [<span class="attr">parentInput</span>]=<span class="string">&quot;parentInput.value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-app-child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<a id="more"></a>
<p><strong>child.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot; background-color: aqua; width: 50%;height: 50px; padding-top: 10px;&quot;</span>&gt;</span></span><br><span class="line">  child：</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> [<span class="attr">placeholder</span>]=<span class="string">&quot;parentInput&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>child.component.ts</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppChildComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 输入性装饰器，用来接收父组件传来的同名参数</span></span><br><span class="line">  @Input() parentInput: string;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="keyword">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>效果图</strong><br>在父组件内的输入框键入，就会传入子组件，父组件在引入的子组件上用[paramName]=’value’传值， <strong>&lt;app-app-child [parentInput]=”parentInput.value”&gt;</app-app-child></strong>  子组件用  <strong>@Input() parentInput: string</strong> 接收，<br><img data-src="https://img-blog.csdnimg.cn/20200922140624705.png#pic_center" alt="效果图"></p>
<hr>
<ul>
<li><h2 id="通过-setter-截听输入属性值的变化"><a href="#通过-setter-截听输入属性值的变化" class="headerlink" title="通过 setter 截听输入属性值的变化"></a>通过 setter 截听输入属性值的变化</h2><a href="https://angular.cn/guide/component-interaction#intercept-input-property-changes-with-a-setter">Angular官网介绍</a><br>在父组件内定义一个数组，将通过setter方式传入子组件</li>
</ul>
<p><strong>parent.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: darkred 1px solid; width: 50%;height: 50px; text-align: center;padding-top: 10px;&quot;</span>&gt;</span></span><br><span class="line"> parent：&#123;&#123;names&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot; text-align: center; &quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--ts中定义names数组，循环将name传入子组件中--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-app-child</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let name of names&quot;</span> [<span class="attr">name</span>]=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-app-child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>parent.component.ts</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">&#x27;Dr IQ&#x27;</span>, <span class="string">&#x27;   &#x27;</span>, <span class="string">&#x27;  Bombasto  &#x27;</span>];</span><br></pre></td></tr></table></figure>
<p><strong>child.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot; background-color: aqua; width: 50%;height: 50px; padding-top: 10px;&quot;</span>&gt;</span></span><br><span class="line">  child：&#123;&#123;name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>child.componetn.ts</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppChildComponent</span> </span>&#123;</span><br><span class="line">  private _name = <span class="string">&#x27;&#x27;</span>; <span class="comment">// 定义私有变量name，用来转换传入的数据</span></span><br><span class="line"></span><br><span class="line">  @Input()</span><br><span class="line">  <span class="comment">// 当参数name被传入，就会调用set方法，来进行判断和赋值</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title">name</span>(<span class="params">name: string</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = (name &amp;&amp; name.trim()) || <span class="string">&#x27;&lt;no name set&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 当有地方使用name参数，就会调用get方法进行输出</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title">name</span>(): <span class="title">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>效果图</strong><br>子组件通过@Input接收父组件传入的数据，并通过自身设置的set,get方法进行判断并输出</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200922152516522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<hr>
<h2 id="通过ngOnChanges-来截听输入属性值的变化"><a href="#通过ngOnChanges-来截听输入属性值的变化" class="headerlink" title="通过ngOnChanges()来截听输入属性值的变化"></a>通过ngOnChanges()来截听输入属性值的变化</h2><ul>
<li><strong>child</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input, OnChanges, SimpleChange &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">&#x27;app-version-child&#x27;</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h3&gt;Version &#123;&#123;major&#125;&#125;.&#123;&#123;minor&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &lt;h4&gt;Change log:&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">      &lt;li *ngFor=&quot;let change of changeLog&quot;&gt;&#123;&#123;change&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">VersionChildComponent</span> <span class="title">implements</span> <span class="title">OnChanges</span> </span>&#123;</span><br><span class="line">  @Input() major: number;</span><br><span class="line">  @Input() minor: number;</span><br><span class="line">  changeLog: string[] = [];</span><br><span class="line"></span><br><span class="line">  ngOnChanges(changes: &#123;[propKey: string]: SimpleChange&#125;) &#123;</span><br><span class="line">    <span class="keyword">let</span> log: string[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> propName <span class="keyword">in</span> changes) &#123;</span><br><span class="line">      <span class="keyword">let</span> changedProp = changes[propName];</span><br><span class="line">      <span class="keyword">let</span> to = <span class="built_in">JSON</span>.stringify(changedProp.currentValue);</span><br><span class="line">      <span class="keyword">if</span> (changedProp.isFirstChange()) &#123;</span><br><span class="line">        log.push(<span class="string">`Initial value of <span class="subst">$&#123;propName&#125;</span> set to <span class="subst">$&#123;to&#125;</span>`</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">from</span> = <span class="built_in">JSON</span>.stringify(changedProp.previousValue);</span><br><span class="line">        log.push(<span class="string">`<span class="subst">$&#123;propName&#125;</span> changed from <span class="subst">$&#123;<span class="keyword">from</span>&#125;</span> to <span class="subst">$&#123;to&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.changeLog.push(log.join(<span class="string">&#x27;, &#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>parent</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">&#x27;app-version-parent&#x27;</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h2&gt;Source code version&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;newMinor()&quot;&gt;New minor version&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;newMajor()&quot;&gt;New major version&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;app-version-child [major]=&quot;major&quot; [minor]=&quot;minor&quot;&gt;&lt;/app-version-child&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">VersionParentComponent</span> </span>&#123;</span><br><span class="line">  major = <span class="number">1</span>;</span><br><span class="line">  minor = <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line">  newMinor() &#123;</span><br><span class="line">    <span class="built_in">this</span>.minor++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  newMajor() &#123;</span><br><span class="line">    <span class="built_in">this</span>.major++;</span><br><span class="line">    <span class="built_in">this</span>.minor = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
ngOnChanges是当数据绑定输入属性的值发生变化时而调用，我们父组件通过点击触发minor和major数值的变化，从而使子组件@Input接收的两个变量发生变化而调用ngOnChanges()函数。在子组件中 <strong>for (let propName in changes) {}</strong> 会被TSLint检测为异常，可以使用 <strong>for (const propName of Object.keys(changes)) {}</strong> 来代替。</li>
</ul>
<hr>
<h2 id="父组件监听子组件的事件"><a href="#父组件监听子组件的事件" class="headerlink" title="父组件监听子组件的事件"></a>父组件监听子组件的事件</h2><p><strong>child.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot; background-color: aqua; width: 50%;height: 50px; padding-top: 10px;&quot;</span>&gt;</span></span><br><span class="line">  child：</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> #<span class="attr">childInput</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--子组件定义一个按钮，用来发射要传递的数据--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;childSend(childInput.value)&quot;</span>&gt;</span>child<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>child.component.ts</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppChildComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 用 EventEmitter 和 output 装饰器配合使用 &lt;string&gt;指定类型变量</span></span><br><span class="line">  @Output() childInput = <span class="keyword">new</span> EventEmitter&lt;string&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="keyword">void</span> &#123;&#125;</span><br><span class="line">  <span class="comment">// 子组件广播发射数据</span></span><br><span class="line">  childSend(value: string) &#123;</span><br><span class="line">    <span class="built_in">this</span>.childInput.emit(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>parent.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: darkred 1px solid; width: 50%;height: 50px; text-align: center;padding-top: 10px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>parent：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> [<span class="attr">placeholder</span>]=<span class="string">&quot;placeholder&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot; text-align: center; &quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用（子组件内output的参数名）=&quot;父组件接收事件函数&quot; 来实现接收数据--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-app-child</span> (<span class="attr">childInput</span>)=<span class="string">&quot;receive($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-app-child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>parent.component.ts</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppParentComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  placeholder = <span class="string">&#x27;&#x27;</span>;	<span class="comment">// 父组件要显示的内容</span></span><br><span class="line">  ngOnInit(): <span class="keyword">void</span> &#123;&#125;</span><br><span class="line">  <span class="comment">//接收事件</span></span><br><span class="line">  receive(value: string) &#123;</span><br><span class="line">    <span class="built_in">this</span>.placeholder = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>效果图</strong><br><img data-src="https://img-blog.csdnimg.cn/20200922143416805.png#pic_center" alt="效果"></p>
<p>在子组件内使用@output装饰器和EventEmitter来装饰要传给父组件的参数及类型，通过子组件的点击事件触发广播发射数据，而父组件只需要定义接收数据事件即可。</p>
<hr>
<h2 id="父组件与子组件通过本地变量互动"><a href="#父组件与子组件通过本地变量互动" class="headerlink" title="父组件与子组件通过本地变量互动"></a>父组件与子组件通过本地变量互动</h2><p><strong>父组件不能使用数据绑定来读取子组件的属性或调用子组件的方法。但可以在父组件模板里，新建一个本地变量来代表子组件，然后利用这个变量来读取子组件的属性和调用子组件的方法</strong></p>
<p><strong>child.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--简单的一个输入框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot; background-color: aqua; width: 50%;height: 50px; padding-top: 10px;&quot;</span>&gt;</span></span><br><span class="line">  child：</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> [<span class="attr">placeholder</span>]=<span class="string">&quot;childValue&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>child.componetn.ts</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppChildComponent</span> </span>&#123;</span><br><span class="line">  childValue = <span class="string">&#x27;123&#x27;</span>;	<span class="comment">// 输入框显示的值</span></span><br><span class="line">  <span class="comment">// 变更显示</span></span><br><span class="line">  changeValue() &#123;</span><br><span class="line">    <span class="built_in">this</span>.childValue = <span class="string">&#x27;456&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>parent.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: darkred 1px solid; width: 50%;height: 50px; text-align: center;padding-top: 10px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>parent：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> [<span class="attr">placeholder</span>]=<span class="string">&quot;child.childValue&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;child.changeValue()&quot;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot; text-align: center; &quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-app-child</span> #<span class="attr">child</span>&gt;</span><span class="tag">&lt;/<span class="name">app-app-child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>效果图</strong></p>
<ul>
<li>点击按钮前：<br><img data-src="https://img-blog.csdnimg.cn/2020092216402164.png#pic_center" alt="在这里插入图片描述"></li>
<li>点击按钮后：<img data-src="https://img-blog.csdnimg.cn/20200922164108482.png#pic_center" alt="在这里插入图片描述"><br>由此可以看出，父组件只需要给子组件命名（#Name）即可用Name来调用子组件内的变量以及方法</li>
</ul>
<hr>
<h2 id="父组件调用-ViewChild"><a href="#父组件调用-ViewChild" class="headerlink" title="父组件调用@ViewChild()"></a>父组件调用@ViewChild()</h2><blockquote>
<p>本地变量方法是个简单便利的方法，但是它也有局限性，<strong>因为父组件-子组件的连接必须全部在父组件的模板中进行。父组件本身的代码对子组件没有访问权</strong>。如果<strong>父组件的类需要读取子组件的属性值或调用子组件的方法，就不能使用本地变量方法。</strong><br>当父组件类需要这种访问时，可以把子组件作为 ViewChild，注入到父组件里面。</p>
</blockquote>
<p><strong>child.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot; background-color: aqua; width: 50%;height: 50px; padding-top: 10px;&quot;</span>&gt;</span></span><br><span class="line">  child：</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> [<span class="attr">placeholder</span>]=<span class="string">&quot;childValue&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>child.component.ts</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppChildComponent</span> </span>&#123;</span><br><span class="line">  @Output() childSend = <span class="keyword">new</span> EventEmitter&lt;string&gt;();</span><br><span class="line">  childValue = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  changeValue(value: any) &#123;</span><br><span class="line">    value = <span class="string">&#x27;456&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.childSend.emit(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>parent.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: darkred 1px solid; width: 50%;height: 50px; text-align: center;padding-top: 10px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>parent：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> [<span class="attr">placeholder</span>]=<span class="string">&quot;placeholder&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;parentChangeValue()&quot;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot; text-align: center; &quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-app-child</span> (<span class="attr">childSend</span>)=<span class="string">&quot;childSend($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-app-child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>parent.component.ts</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppParentComponent</span> </span>&#123;</span><br><span class="line">  @ViewChild(AppChildComponent) private child: AppChildComponent;</span><br><span class="line">  placeholder = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  parentChangeValue() &#123;</span><br><span class="line">    <span class="built_in">this</span>.child.changeValue(<span class="built_in">this</span>.placeholder);</span><br><span class="line">  &#125;</span><br><span class="line">  childSend(value: string) &#123;</span><br><span class="line">    <span class="built_in">this</span>.placeholder = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>效果图</strong></p>
<ul>
<li>点击前<img data-src="https://img-blog.csdnimg.cn/20200922171452735.png#pic_center" alt="在这里插入图片描述"></li>
<li>点击后<img data-src="https://img-blog.csdnimg.cn/20200922171512697.png#pic_center" alt="在这里插入图片描述"></li>
</ul>
<p><strong>在这里，父组件直接将整个子组件注入，这样父组件类就能访问子组件的变量与类，当父组件点击change时，会调用父组件的parentChangeValue()函数，从而调用子组件的changeValue()函数，将参数变更，然后通过子组件将改变后的值发射出去，以便于父组件能够接到改变后的值，所以会在子组件上定义一个监听。</strong></p>
<hr>
<h2 id="父组件和子组件通过服务来通讯"><a href="#父组件和子组件通过服务来通讯" class="headerlink" title="父组件和子组件通过服务来通讯"></a>父组件和子组件通过服务来通讯</h2><blockquote>
<p>观察者（Observer）模式是一个软件设计模式，它有一个对象，称之为主体 Subject，负责维护一个依赖项（称之为观察者 Observer）的列表，并且在状态变化时自动通知它们。 该模式和发布/订阅模式非常相似（但不完全一样）。</p>
</blockquote>
<blockquote>
<p>可观察对象是声明式的 —— 也就是说，虽然你定义了一个用于发布值的函数，但是在有消费者订阅它之前，这个函数并不会实际执行。 订阅之后，当这个函数执行完或取消订阅时，订阅者就会收到通知。</p>
</blockquote>
<blockquote>
<p>可观察对象可以发送多个任意类型的值 —— 字面量、消息、事件。无论这些值是同步发送的还是异步发送的，接收这些值的 API 都是一样的。 由于准备（setup）和清场（teardown）的逻辑都是由可观察对象自己处理的，因此你的应用代码只管订阅并消费这些值就可以了，做完之后，取消订阅。无论这个流是击键流、HTTP 响应流还是定时器，对这些值进行监听和停止监听的接口都是一样的。</p>
</blockquote>
<blockquote>
<p>一句话形容： <strong>观察者只是具有三个回调的对象，用于处理Observable提供的每种类型的通知。</strong></p>
</blockquote>
<p>作为发布者，你创建一个 Observable 的实例，其中定义了一个订阅者（subscriber）函数。 当有消费者调用 subscribe() 方法时，这个函数就会执行。 订阅者函数用于定义“如何获取或生成那些要发布的值或消息”。</p>
<p>要执行所创建的可观察对象，并开始从中接收通知，你就要调用它的 subscribe() 方法，并传入一个观察者（observer）。 这是一个 JavaScript 对象，它定义了你收到的这些消息的处理器（handler）。 subscribe() 调用会返回一个 Subscription 对象，该对象具有一个 unsubscribe() 方法。 当调用该方法时，你就会停止接收通知。</p>
<p><strong>parent.service</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ParentService</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 数据源 next(发射数据)</span></span><br><span class="line">  private parentToChildSource = <span class="keyword">new</span> Subject&lt;string&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据流 subscribe(取得数据)，在组件中需要订阅</span></span><br><span class="line">  parentToChild$ = <span class="built_in">this</span>.parentToChildSource.asObservable();</span><br><span class="line"></span><br><span class="line">  parentToChild(parentDataItem: string) &#123;</span><br><span class="line">    <span class="built_in">this</span>.parentToChildSource.next(parentDataItem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>parent.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;emissionDataToChild()&quot;</span>&gt;</span>发射数据给子组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let data of dataFromChild&quot;</span>&gt;</span>&#123;&#123;data&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">fieldset 元素可将表单内的相关元素分组。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;fieldset&gt; 标签将表单内容的一部分打包，生成一组相关表单的字段。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当一组表单元素放到 &lt;fieldset&gt; 标签内时，浏览器会以特殊方式来显示它们，它们可能有特殊的边界、3D 效果，或者甚至可创建一个子表单来处理这些元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;fieldset&gt; 标签没有必需的或唯一的属性。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">legend</span>&gt;</span>子组件部分：<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-app-child</span>&gt;</span><span class="tag">&lt;/<span class="name">app-app-child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>parent.component.ts</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppParentComponent</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 父组件数据</span></span><br><span class="line">  parentData = [<span class="string">&#x27;来自父组件数据a&#x27;</span>, <span class="string">&#x27;来自父组件数据b&#x27;</span>, <span class="string">&#x27;来自父组件数据c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储来自子组件数据</span></span><br><span class="line">  dataFromChild = [];</span><br><span class="line">  nextData = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(private parentService: ParentService) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发射数据到子组件</span></span><br><span class="line">  emissionDataToChild() &#123;</span><br><span class="line">    <span class="keyword">const</span> toChildData = <span class="built_in">this</span>.parentData[<span class="built_in">this</span>.nextData++];</span><br><span class="line">    <span class="built_in">this</span>.parentService.parentToChild(toChildData);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.nextData &gt;= <span class="built_in">this</span>.parentData.length) &#123;</span><br><span class="line">      <span class="built_in">this</span>.nextData = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>child.component.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let data of dataFromParent&quot;</span>&gt;</span>&#123;&#123;data&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>child.component.ts</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppChildComponent</span> <span class="title">implements</span> <span class="title">OnDestroy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储来自父组件数据</span></span><br><span class="line">  dataFromParent = [];</span><br><span class="line">  subscription: Subscription;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(private parentService: ParentService) &#123;</span><br><span class="line">    <span class="built_in">this</span>.subscription = parentService.parentToChild$.subscribe(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.dataFromParent.push(<span class="string">`<span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 生命周期销毁钩子</span></span><br><span class="line">  public ngOnDestroy() &#123;</span><br><span class="line">    <span class="built_in">this</span>.subscription.unsubscribe();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>效果图</strong></p>
<ul>
<li>连续点击按钮四次<br><img data-src="https://img-blog.csdnimg.cn/20200923102757411.png#pic_center" alt="在这里插入图片描述"></li>
</ul>
<hr>
<blockquote>
<p>Subject是一个特殊的Observable,它允许将值多播给多个观察者。而且 每个 Subject 都是 Observable 每个 Subject 都是观察者 也就是说Subject可以被订阅,同时也具有观察者的三种方法:next,error,component<br>解释来源：<a href="https://www.jianshu.com/p/6a5bff3d38fd">简书</a></p>
</blockquote>
<blockquote>
<p>试着理解一下：</p>
<blockquote>
<p>1、当我点击父组件页面的按钮时，他就会触发父组件的emissionDataToChild()函数<br>2、父组件会根据nextData的数值来确定parentData下标所代表的值<br>3、接着，父组件会调用服务中的parentToChild(),并将要传给子组件的值作为参数传送过去<br>4、服务内，已经声明Subject &lt; string &gt; 类型的parentToChildSource，会通过next()将值多播给已注册监听该 Subject 的观察者们<br>5、其实这个时候传值就已经初步实现了，那只要规划好观察者就可以了，我们在让child作为观察者，<strong>那么就需要观察一个可被观察的对象</strong>，于是乎，我们在服务中将Subject类型的parentToChildSource通过asObservable()为一个可被观察的对象。<br>6、在child中声明一个观察者（subscription: Subscription），让他来subscribe parentToChild$的变化，并把变化的值返回，再通过定义好的数组push进去就好了。</p>
</blockquote>
</blockquote>
<p><strong>Q</strong>: Subscription是什么?<br><strong>A</strong>:当subscribe一个observable的时候, 返回的就是一个subscription. 它是一个一次性对象(disposable), 它有一个非常重要的方法 ubsubscribe(), 它没有参数, 它会dispose掉subscription所持有的资源, 或者叫取消observable的执行.如果没有取消，就有可能会造成内存泄漏，这也是为什么要在生命周期销毁的时候调用取消订阅。</p>
<blockquote>
<p>服务通讯的理解是借助于<a href="">https://blog.csdn.net/Handsome_fan/article/details/84202758</a>，对博主表示感谢。</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>感觉父子组件传值比较常用的应该是装饰器和服务，模块化开发的话就会有一些非父子组件的传值，先留个坑，肝一肝再补上。</p>
]]></content>
      <categories>
        <category>Angular2</category>
      </categories>
      <tags>
        <tag>Angular2</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular2】--创建动态表单</title>
    <url>/posts/b1f108b2/</url>
    <content><![CDATA[<h1 id="动态增加表单"><a href="#动态增加表单" class="headerlink" title="动态增加表单"></a>动态增加表单</h1><p>这个问题的环境是基于<strong>Angular10</strong>和NG-ZROOR，nz中的动态表单案例是有个触发机制的——点击按钮，而有时候页面的显示是不需要手动触发的。先从后台取回数据，在进行数据的渲染。取回的数据大多是数组，所以案例中的就不可取了，在借鉴了<a href="https://blog.csdn.net/wjyyhhxit/article/details/91973582">wujiayucn</a> 的《响应式表单-FormArray &amp; 动态的增加、减少FormArray中的元素 &amp; 给FormArray 赋值》一文，我也终于对这个问题有了一丝理解，先做个笔记</p>
<a id="more"></a>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p><strong>在进入某一个页面的时候，通过获取到的数组，动态渲染到表单中，再提交表单的时候同样以数组形式提交出去</strong></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><h2 id="page-component-html"><a href="#page-component-html" class="headerlink" title="page.component.html"></a>page.component.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nz-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">nz-form</span> [<span class="attr">formGroup</span>]=<span class="string">&quot;validateForm&quot;</span> (<span class="attr">ngSubmit</span>)=<span class="string">&quot;submitForm()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let control of tempList; let i = index&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nz-form-control</span> [<span class="attr">formGroupName</span>]=<span class="string">&quot;control.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">nz-row</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">nz-col</span> <span class="attr">nzSpan</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nz-form-label</span> <span class="attr">nzSpan</span>=<span class="string">&quot;8&quot;</span> <span class="attr">nzRequired</span>&gt;</span>name<span class="tag">&lt;/<span class="name">nz-form-label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nz-form-control</span> <span class="attr">nzSpan</span>=<span class="string">&quot;16&quot;</span> [<span class="attr">nzErrorTip</span>]=<span class="string">&quot;nameError&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> <span class="attr">formControlName</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">nameError</span> <span class="attr">let-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">&quot;name.hasError(&#x27;required&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                  name必填</span><br><span class="line">                <span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">nz-col</span> <span class="attr">nzSpan</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nz-form-label</span> <span class="attr">nzSpan</span>=<span class="string">&quot;8&quot;</span> <span class="attr">nzRequired</span>&gt;</span>age<span class="tag">&lt;/<span class="name">nz-form-label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nz-form-control</span> <span class="attr">nzSpan</span>=<span class="string">&quot;16&quot;</span> [<span class="attr">nzErrorTip</span>]=<span class="string">&quot;ageError&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> <span class="attr">formControlName</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">ageError</span> <span class="attr">let-age</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">&quot;age.hasError(&#x27;required&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                  age必填</span><br><span class="line">                <span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">nz-col</span> <span class="attr">nzSpan</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nz-form-label</span> <span class="attr">nzSpan</span>=<span class="string">&quot;8&quot;</span> <span class="attr">nzRequired</span>&gt;</span>phone<span class="tag">&lt;/<span class="name">nz-form-label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nz-form-control</span> <span class="attr">nzSpan</span>=<span class="string">&quot;16&quot;</span> [<span class="attr">nzErrorTip</span>]=<span class="string">&quot;phoneError&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">nz-input</span> <span class="attr">formControlName</span>=<span class="string">&quot;phoneNumber&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">phoneError</span> <span class="attr">let-phone</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">&quot;phone.hasError(&#x27;required&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nz-form-control</span> [<span class="attr">nzSm</span>]=<span class="string">&quot;&#123; span: 20, offset: 4 &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">nz-button</span> <span class="attr">nzType</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">nz-form-control</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nz-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nz-card</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://img-blog.csdnimg.cn/20200921132039535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="布局"></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h2 id="page-component-ts"><a href="#page-component-ts" class="headerlink" title="page.component.ts"></a>page.component.ts</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(private fb: FormBuilder) &#123;&#125; </span><br><span class="line"> validateForm: FormGroup;</span><br><span class="line"> <span class="comment">// 模拟数据：获取到的数组</span></span><br><span class="line"> tempList = [</span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">phoneNumber</span>: <span class="number">15855855858</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">phoneNumber</span>: <span class="number">15855855858</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;王二&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">phoneNumber</span>: <span class="number">15855855858</span> &#125;,</span><br><span class="line"> ];</span><br><span class="line"> ngOnInit(): <span class="keyword">void</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.validateForm = <span class="built_in">this</span>.fb.group(&#123;&#125;);</span><br><span class="line">   <span class="built_in">this</span>.addField();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> addField(): <span class="keyword">void</span> &#123;</span><br><span class="line"> <span class="comment">//  根据获取到的数组循环创建controller</span></span><br><span class="line">   <span class="built_in">this</span>.tempList.forEach(<span class="function">(<span class="params">item: any</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.validateForm.addControl(</span><br><span class="line">       item.id,</span><br><span class="line">       <span class="keyword">new</span> FormGroup(</span><br><span class="line">         &#123;</span><br><span class="line">           name: <span class="keyword">new</span> FormControl([item.name], [Validators.required]),</span><br><span class="line">           age: <span class="keyword">new</span> FormControl(item.age, Validators.required),</span><br><span class="line">           phoneNumber: <span class="keyword">new</span> FormControl(item.phoneNumber, [Validators.required]),</span><br><span class="line">         &#125;,</span><br><span class="line">         [Validators.required],</span><br><span class="line">       ),</span><br><span class="line">     );</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// 提交表单</span></span><br><span class="line"> submitForm(): <span class="keyword">void</span> &#123;</span><br><span class="line"> <span class="comment">// 表单脏校验</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">in</span> <span class="built_in">this</span>.validateForm.controls) &#123;</span><br><span class="line">     <span class="built_in">this</span>.validateForm.controls[i].markAsDirty();</span><br><span class="line">     <span class="built_in">this</span>.validateForm.controls[i].updateValueAndValidity();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> tempValue = []; </span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">1</span>; index &lt;= <span class="built_in">this</span>.tempList.length; index++) &#123;</span><br><span class="line">     <span class="keyword">const</span> element = <span class="built_in">this</span>.validateForm.value[index];</span><br><span class="line">     tempValue.push(element);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;tempValue&#x27;</span>, tempValue);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="tempValue"><a href="#tempValue" class="headerlink" title="tempValue:"></a>tempValue:</h2><p><img data-src="https://img-blog.csdnimg.cn/20200921132757308.png#pic_center" alt="submit"></p>
<h2 id="validateForm-value"><a href="#validateForm-value" class="headerlink" title="validateForm.value:"></a>validateForm.value:</h2><p><img data-src="https://img-blog.csdnimg.cn/20200921133540611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h1 id="残留问题："><a href="#残留问题：" class="headerlink" title="残留问题："></a>残留问题：</h1><p>在创建controller的时候可以添加同步验证，但是同步验证的结果却是有问题的,虽然能显示要输出的提示，但是存在 ’提示不出现‘ 以及 ’颜色有问题‘，也就是说，创建controller的参数还是不合理的，希望看到的大佬们能够提点一下我，深表感谢！！</p>
<blockquote>
<p>new FormGroup(<br>          {<br>            name: new FormControl([item.name], [Validators.required]),<br>            age: new FormControl(item.age, Validators.required),<br>            phoneNumber: new FormControl(item.phoneNumber, [Validators.required]),<br>          },<br>          [Validators.required],<br>        ),<br><img data-src="https://img-blog.csdnimg.cn/2020092113295940.png#pic_center" alt="error"></p>
</blockquote>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>动态增加表单时，或许可以以表单分组来循环创建，创建之后的结构会更加分明，之后再解构就能达到想要的结构。该写法或许还有不合理或者未发现的安全隐患，请看到的大佬们给一些反馈和指导，在此感激不尽！</p>
<hr>
<h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>关于提示问题，已经解决，在每个 <strong>&lt; nz-form-control &gt; &lt;/ nz-form-control &gt;</strong> 外层添加一层 <strong>&lt; nz-form-item&gt;</strong> 即可。<br><img data-src="https://img-blog.csdnimg.cn/20200921173132159.png#pic_center" alt="实现"></p>
<blockquote>
<p>表单项用于区分表单中不同的区域，包含表单域和表单标签(可选)。</p>
</blockquote>
]]></content>
      <categories>
        <category>Angular2</category>
      </categories>
      <tags>
        <tag>Angular2</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular2】--快速搭建Alain框架</title>
    <url>/posts/b758f302/</url>
    <content><![CDATA[<h1 id="Angular搭建模板框架"><a href="#Angular搭建模板框架" class="headerlink" title="Angular搭建模板框架"></a>Angular搭建模板框架</h1><p><strong>前言</strong>：网络不好，可以使用国内淘宝镜像。本模板的脚手架使用<a href="https://ng-alain.com/docs/getting-started/zh"><strong>Ng Alain</strong></a>，本地环境需要安装 node 和 git。技术栈基于 <a href="https://www.tslang.cn/docs/handbook/typescript-in-5-minutes.html">Typescript</a>、<a href="https://angular.cn/docs">Angular</a>、<a href="https://antv.vision/zh#products">g2</a>、@delon 和 <a href="https://ng.ant.design/docs/introduce/zh">ng-zorro-antd</a>。</p>
<a id="more"></a>
<ul>
<li>配置国内镜像：<blockquote>
<p>打开终端，输入 <strong>npm config get registry</strong> 来查看当前地址</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>更改地址：<strong>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></strong></p>
</blockquote>
<h2 id="安装（推荐CLI）"><a href="#安装（推荐CLI）" class="headerlink" title="安装（推荐CLI）"></a>安装（推荐CLI）</h2><blockquote>
<p>创建项目：<strong>ng new my-project –style less –routing</strong><br>打开项目：<strong>cd my-project</strong><br>安装脚手架：<strong>ng add ng-alain</strong><br>运行：<strong>npm start</strong></p>
</blockquote>
<h2 id="在安装脚手架时的提示"><a href="#在安装脚手架时的提示" class="headerlink" title="在安装脚手架时的提示"></a>在安装脚手架时的提示<img data-src="https://img-blog.csdnimg.cn/20200910104713684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="alain"></h2><ul>
<li><strong>你愿意在谷歌的隐私政策下，与谷歌Angular团队分享这个项目的 匿名使用数据吗？</strong></li>
<li><strong>选择你想使用的默认语言</strong></li>
<li><strong>是否添加hmr插件</strong></li>
<li><strong>是否添加代码样式插件</strong></li>
<li><strong>是否添加动态模具（sf组件）插件</strong></li>
<li><strong>是否添加模拟数据插件</strong></li>
<li><strong>是否添加国际化插件</strong></li>
</ul>
<h2 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成<img data-src="https://img-blog.csdnimg.cn/20200910110008127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="alain"></h2><ul>
<li>账号输入<strong>admin</strong>/<strong>user</strong></li>
<li>密码输入<strong>ng-alain.com</strong><br><img data-src="https://img-blog.csdnimg.cn/2020091011024826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
</ul>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><blockquote>
<p><strong>NG-ALAIN 是一个标准的 Angular CLI 构建的项目，并提供了涵盖中后台开发的各类功能和坑位，下面是整个项目的目录结构。</strong></p>
</blockquote>
<p><img data-src="https://img-blog.csdnimg.cn/20200910111307628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Angular2</category>
      </categories>
      <tags>
        <tag>Angular2</tag>
      </tags>
  </entry>
  <entry>
    <title>js实现倒计时</title>
    <url>/posts/16107/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>突然想到倒计时的案例，就试着写了一个，但是当时的思路是直接获取dom并输出，没有实现可复用性，而且耦合度很大，在搜索了几篇文章后，发现有个大佬写的确实很好，就摘抄一下，以加强理解。</p>
<hr>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图<img data-src="https://img-blog.csdnimg.cn/20200914152141555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="效果图"></h1><p>这里可以实现以你选择的时间作为倒计时结束的时间</p>
<hr>
<h1 id="countDown-html"><a href="#countDown-html" class="headerlink" title="countDown.html"></a>countDown.html</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;countDown&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;countdown.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">    &lt;/link&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;select&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;datetime-local&quot;</span> id=<span class="string">&quot;selectTime&quot;</span> /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;clear&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;倒计时&lt;/h1&gt;</span><br><span class="line">        &lt;div id=<span class="string">&quot;time&quot;</span>&gt;</span><br><span class="line">            &lt;strong&gt;&lt;span id=<span class="string">&quot;day&quot;</span>&gt;**天&lt;/span&gt;&lt;/strong&gt;</span><br><span class="line">            &lt;strong&gt;&lt;span id=<span class="string">&quot;hour&quot;</span>&gt;**时&lt;/span&gt;&lt;/strong&gt;</span><br><span class="line">            &lt;strong&gt;&lt;span id=<span class="string">&quot;minute&quot;</span>&gt;**分&lt;/span&gt;&lt;/strong&gt;</span><br><span class="line">            &lt;strong&gt;&lt;span id=<span class="string">&quot;second&quot;</span>&gt;**秒&lt;/span&gt;&lt;/strong&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;countdown.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var tempContent = my$(&#x27;time&#x27;);</span><br><span class="line">        var daySpan = my$(&#x27;day&#x27;);</span><br><span class="line">        var hourSpan = my$(&#x27;hour&#x27;);</span><br><span class="line">        var minuteSpan = my$(&#x27;minute&#x27;);</span><br><span class="line">        var secondSpan = my$(&#x27;second&#x27;);</span><br><span class="line">        TimeRow();</span><br><span class="line">        setInterval(TimeRow, <span class="number">1000</span>)</span><br><span class="line">	<span class="comment">// 这里是主要的显示回调</span></span><br><span class="line">        <span class="function">function <span class="title">TimeRow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            var selectTime = my$(&#x27;selectTime&#x27;).value;</span><br><span class="line">            var end = <span class="keyword">new</span> Date(selectTime);</span><br><span class="line">            var start = <span class="keyword">new</span> Date();</span><br><span class="line">            var time = getInterval(start, end);</span><br><span class="line">            var tempDisable = end &gt; start;</span><br><span class="line">            <span class="keyword">if</span> (tempDisable) &#123;</span><br><span class="line">                setInnerText(daySpan, time.day + <span class="string">&#x27;天&#x27;</span>);</span><br><span class="line">                setInnerText(hourSpan, time.hour + <span class="string">&#x27;时&#x27;</span>);</span><br><span class="line">                setInnerText(minuteSpan, time.minute + <span class="string">&#x27;分&#x27;</span>);</span><br><span class="line">                setInnerText(secondSpan, time.second + <span class="string">&#x27;秒&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setInnerText(daySpan, <span class="string">&#x27;已&#x27;</span>);</span><br><span class="line">                setInnerText(hourSpan, <span class="string">&#x27;超&#x27;</span>);</span><br><span class="line">                setInnerText(minuteSpan, <span class="string">&#x27;时&#x27;</span>);</span><br><span class="line">                setInnerText(secondSpan, <span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="countDown-css"><a href="#countDown-css" class="headerlink" title="countDown.css"></a>countDown.css</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background-color: #<span class="number">2</span>a3852;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#select &#123;</span></span><br><span class="line">    margin-top: <span class="number">8</span>px;</span><br><span class="line">    <span class="keyword">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#box &#123;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    margin-top: <span class="number">300</span>px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#box h1 &#123;</span></span><br><span class="line">    letter-spacing: <span class="number">3</span>px;</span><br><span class="line">    font-weight: <span class="number">500</span>;</span><br><span class="line">    color: <span class="meta">#fff;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#time &#123;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">    line-height: <span class="number">50</span>px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#time span &#123;</span></span><br><span class="line">    font-size: <span class="number">20</span>px;</span><br><span class="line">    color: <span class="meta">#fff;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#time strong &#123;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">    margin-left: <span class="number">20</span>px;</span><br><span class="line">    background-color: #<span class="number">3f</span>5174;</span><br><span class="line">    border-radius: <span class="number">10</span>px;</span><br><span class="line">    width: <span class="number">70</span>px;</span><br><span class="line">    height: <span class="number">50</span>px;</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#clear &#123;</span></span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="countDown-js"><a href="#countDown-js" class="headerlink" title="countDown.js"></a>countDown.js</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">function my$(id) &#123;</span><br><span class="line">    <span class="keyword">return</span> document.getElementById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理innerText和textContent的兼容性问题</span></span><br><span class="line"><span class="comment">// 设置标签之间的内容</span></span><br><span class="line"><span class="function">function <span class="title">setInnerText</span><span class="params">(element, content)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断当前浏览器是否支持 innerText</span></span><br><span class="line">    if (typeof element.innerText === &#x27;string&#x27;) &#123;</span><br><span class="line">        element.innerText = content;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        element.textContent = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">getInterval</span><span class="params">(start, end)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 两个日期对象，相差的毫秒数</span></span><br><span class="line">    var interval = end - start;</span><br><span class="line">    <span class="comment">// 求 相差的天数/小时数/分钟数/秒数</span></span><br><span class="line">    var day, hour, minute, second;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两个日期对象，相差的秒数</span></span><br><span class="line">    <span class="comment">// interval = interval / 1000;</span></span><br><span class="line">    interval /= <span class="number">1000</span>;</span><br><span class="line">	<span class="comment">// 计算时间采取四舍五入</span></span><br><span class="line">    day = Math.round(interval / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line">    hour = Math.round(interval / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span><br><span class="line">    minute = Math.round(interval / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">    second = Math.round(interval % <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        day: day,</span><br><span class="line">        hour: hour,</span><br><span class="line">        minute: minute,</span><br><span class="line">        second: second</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>关于innerText和textContent的兼容性问题<blockquote>
<p><strong>IE支持innerHTML与innerText</strong><br><strong>FireFox支持innerHTML与textContent</strong><br>所以在IE与FireFox中使用显示内容时 必须得先判断浏览器 然后决定使用innerText还是textContent**</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>这个大佬的代码很清晰，没有不必要的耦合，而不是单单的获取DOM树后在渲染，减少不必要的麻烦，对于时间起始和结束的判断以及超时显示是我后加的，想用三元表达式代替的，结果没写好，希望能够补充一下，不然赋值的那几行很是啰嗦。<blockquote>
<p>文章引用：<a href="https://segmentfault.com/a/1190000024433108">https://segmentfault.com/a/1190000024433108</a></p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Example</category>
      </categories>
      <tags>
        <tag>Example</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular2】--路由传参</title>
    <url>/posts/99aa8e8e/</url>
    <content><![CDATA[<h1 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h1><ul>
<li><h2 id="queryParams"><a href="#queryParams" class="headerlink" title="queryParams"></a>queryParams</h2></li>
</ul>
<p>在H5页面标签上添加queryParams</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/detail&quot;</span> [<span class="attr">queryParams</span>]=<span class="string">&quot;&#123;id: 1&#125;&quot;</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在组件中接收参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ActivatedRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入依赖类</span></span><br><span class="line"><span class="keyword">constructor</span>(private route: ActivatedRoute) &#123; &#125;</span><br><span class="line">   </span><br><span class="line"> ngOnInit () &#123;</span><br><span class="line"> 	<span class="comment">// 变量赋值</span></span><br><span class="line">   <span class="built_in">this</span>.id = <span class="built_in">this</span>.route.snapshot.queryParamMap.get(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>ActivatedRoute</strong> 中有很多方法可以获取到当前路由上的参数，包括params , snapshot,以及几个取值器，都可以使用订阅的方式来获取到参数。</p>
<hr>
<h2 id="路由配置文件"><a href="#路由配置文件" class="headerlink" title="路由配置文件"></a>路由配置文件</h2><p>在路由配置中先设置好路由的参数形式，进入此页面必须符合当前格式</p>
<ul>
<li><p>test-routing.moduel.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [&#123;</span><br><span class="line">    path: <span class="string">&#x27;test/:id&#x27;</span>, <span class="attr">component</span>: TestComponent,</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
</li>
<li><p>test.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/detail/&#123;&#123;1&#125;&#125;&quot;</span> &gt;</span>detail<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>detail.component</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注入依赖类</span></span><br><span class="line"><span class="keyword">constructor</span>(private route: ActivatedRoute) &#123;</span><br><span class="line">	 <span class="built_in">this</span>.activeRoute.params.subscribe( <span class="function"><span class="params">param</span> =&gt;</span> <span class="built_in">this</span>.id= param.id);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="静态数据"><a href="#静态数据" class="headerlink" title="静态数据"></a>静态数据</h2><p>其原理和配置路由文件一样，在配置中设置属性即可</p>
<ul>
<li>test-routing.moduel.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [&#123;</span><br><span class="line">    path: <span class="string">&#x27;test/:id&#x27;</span>,</span><br><span class="line">    component: TestComponent,</span><br><span class="line">    data: &#123; <span class="attr">type</span>: <span class="string">&#x27;test&#x27;</span> &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></li>
<li>detail.component<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注入依赖类</span></span><br><span class="line"><span class="keyword">constructor</span>(private route: ActivatedRoute) &#123;</span><br><span class="line">	<span class="built_in">this</span>.type =  <span class="built_in">this</span>.activeRoute.snapshot.data.type</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><ul>
<li>test.component.ts<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">constructor</span>(</span><br><span class="line">    private router: Router</span><br><span class="line">    ) &#123;&#125;</span><br><span class="line"></span><br><span class="line">test()&#123;</span><br><span class="line">	<span class="keyword">const</span> link = [<span class="string">&#x27;/test/&#x27;</span> + <span class="built_in">this</span>.id];</span><br><span class="line">	<span class="built_in">this</span>.router.navigate(link);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Angular2</category>
      </categories>
      <tags>
        <tag>Angular2</tag>
      </tags>
  </entry>
  <entry>
    <title>超简洁后台系统静态登陆页面</title>
    <url>/posts/44873/</url>
    <content><![CDATA[<h1 id="静态登录页面"><a href="#静态登录页面" class="headerlink" title="静态登录页面"></a>静态登录页面</h1><p>今天在网上看到一个后台登录页面，很简洁，看着也很舒服，就试着模仿做一下这个小案例(这个案例的水平很低，只是我复习css的第一步)。没有验证码和js逻辑，就只是简单地一个页面渲染。我感觉一般的后台管理登录页面应该不会注重样式(可能觉得没必要，只要能用就行)。这个小案例也算是我重拾css的第一步，样式用惯了框架，真要写的时候才发现都给忘了。。。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img data-src="https://img-blog.csdnimg.cn/2020091320435635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center"></h2><a id="more"></a>

<hr>
<h2 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;mate charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;login&lt;/title&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;login.css&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;login-user&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;login-btn&quot;</span>&gt;</span><br><span class="line">      &lt;h1&gt;login&lt;/h1&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;userName&quot;</span>&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pass&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;passWord&quot;</span>&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;button&gt;登录&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="login-css"><a href="#login-css" class="headerlink" title="login.css"></a>login.css</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重设边距和填充</span></span><br><span class="line">* &#123;</span><br><span class="line">  margin: <span class="number">0</span>;</span><br><span class="line">  padding: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加背景和比例</span></span><br><span class="line">body &#123;</span><br><span class="line">  background: url(<span class="string">&quot;background.jpg&quot;</span>);</span><br><span class="line">  background-size: <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login-user &#123;</span><br><span class="line">  margin: auto;</span><br><span class="line">  width: <span class="number">400</span>px;</span><br><span class="line">  height: <span class="number">300</span>px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-top: <span class="number">200</span>px;</span><br><span class="line">  background: rgb(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  border-radius: <span class="number">1</span>em;</span><br><span class="line">  transition: <span class="number">0.3</span>s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login-user:hover &#123;</span><br><span class="line">  box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">3</span>px <span class="number">3</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login-btn h1 &#123;</span><br><span class="line">  font-size: <span class="number">60</span>px;</span><br><span class="line">  margin: <span class="number">10</span>px;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login-user&gt;div input &#123;</span><br><span class="line">  width: <span class="number">200</span>px;</span><br><span class="line">  height: <span class="number">35</span>px;</span><br><span class="line">  margin: <span class="number">15</span>px;</span><br><span class="line">  background-color: transparent;</span><br><span class="line">  border: <span class="number">0</span>;</span><br><span class="line">  outline: none;</span><br><span class="line">  border-bottom: 2px solid #fff;</span><br><span class="line">  font-size: <span class="number">20</span>px;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login-user&gt;div button &#123;</span><br><span class="line">  width: <span class="number">150</span>px;</span><br><span class="line">  height: <span class="number">35</span>px;</span><br><span class="line">  background-color: transparent;</span><br><span class="line">  border: <span class="number">0</span>;</span><br><span class="line">  outline: none;</span><br><span class="line">  border-radius: <span class="number">1</span>em;</span><br><span class="line">  margin-top: <span class="number">10</span>px;</span><br><span class="line">  border: 1px solid #fff;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ul>
<li><strong>为什么要先重设边距和填充？</strong><br>  1、默认的块元素有些会自带margin或者padding。<br>2、body默认就会有8个像素margin，这样设定后可以清除body的margin。<br>3、清除这些元素的默认margin和padding后我们自定义的css样式才不会有偏差。<br>4、同时设置margin为0也有为了居中对其的目的。<br>（来源于：<a href="https://www.cnblogs.com/H-Gfeng/p/10422365.html%EF%BC%89">https://www.cnblogs.com/H-Gfeng/p/10422365.html）</a></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于像我这样的菜鸟来说，再回首从学校出来后带出来的css知识，已经远远地跟不上同时期的同学了，目前对于系统的前端知识理解还未入门，但是我相信，只要肯学，我就会有进步，加油！！！</p>
]]></content>
      <categories>
        <category>Example</category>
      </categories>
      <tags>
        <tag>Example</tag>
      </tags>
  </entry>
  <entry>
    <title>Theme Allocation Of Next</title>
    <url>/posts/54882/</url>
    <content><![CDATA[<p> <img data-src="http://theme-next.iissnan.com/assets/img/NextSchemes3.png"><br>有关hexo建站的教程，官网和一些博客介绍的很详细，基本上创建一个静态的博客是没有问题的，但是在使用主题后对主题进行一些列的配置就很麻烦，具体体现在各个文件的关联和繁杂的第三方。</p>
<a id="more"></a>

<h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><p> <a href="https://hexo.io/zh-cn/docs/">hexo官网</a></p>
<blockquote>
<p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>
</blockquote>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ul>
<li>Hexo搭建步骤</li>
<li>安装Git</li>
<li>安装Node.js</li>
<li>安装Hexo</li>
<li>GitHub创建个人仓库</li>
<li>生成SSH添加到GitHub</li>
<li>将hexo部署到GitHub</li>
<li>设置个人域名</li>
<li>发布文章</li>
</ul>
<p>具体的安装教程可以参考<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a></p>
<p>建站过程中有两点短板，先记录下来，后续跟进学习：</p>
<ul>
<li>git的相关语法</li>
<li>css</li>
</ul>
<p><strong>其中有关百度收录方面，使用CNAME是最方便的，直接使用域名解析到百度提供的地址即可</strong></p>
<p><strong>收录推送也只是简单的选择sitemap</strong></p>
<p>next内置了valine的评论系统，而valine使用cleanCloud的数据库，这就造成了一个数据方面的问题————cleanCloud每天要休眠一段时间，这就使评论系统有时候会出现显示不了的问题，所以果断舍弃，大道至简。</p>
<h2 id="next主题优化"><a href="#next主题优化" class="headerlink" title="next主题优化"></a>next主题优化</h2><ul>
<li>参考<blockquote>
<p><a href="http://theme-next.iissnan.com/theme-settings.html">nexT官方文档</a><br><a href="https://zhuanlan.zhihu.com/p/30836436">next-主题优化</a></p>
</blockquote>
</li>
</ul>
<p>再参考相关文章之后，主要添加了几个实用的优化：</p>
<ul>
<li>搜索</li>
<li>文本字数和时间提醒</li>
<li>点击效果</li>
<li>卡片样式调整</li>
</ul>
<p>还有一个就是使用了<a href="https://lucksun.work/404.html">腾讯公益的404页面</a></p>
]]></content>
      <categories>
        <category>Testing</category>
      </categories>
      <tags>
        <tag>Testing</tag>
      </tags>
  </entry>
  <entry>
    <title>【Angular2】--配置开发环境</title>
    <url>/posts/9c4101a6/</url>
    <content><![CDATA[<h1 id="Angular简介"><a href="#Angular简介" class="headerlink" title="Angular简介"></a>Angular简介</h1><p>先贴一下<a href="https://angular.cn/guide/setup-local">官网</a>：<a href="https://angular.cn/guide/setup-local">https://angular.cn/guide/setup-local</a></p>
<p>首先Angular是一个mvc框架，它致力于<strong>mvc代码解耦</strong>，采用<strong>model</strong>,<strong>controller</strong>以及<strong>view</strong>方式去组织代码，Angular会将一个HTML页面分成若干个模块，每个模块都可以自己的scope，service以及directive，各个模块之间也可以进行通信，但是整体上结构是比较清晰的，就是说其代码组织方式是模块化的。</p>
<a id="more"></a>
<p>angular的view可能仅仅是一个框架，对view的dom操作或者时间监听都是在directive中实现的，而且一般情况下很少自己直接去写Dom操作代码，只要你监听model。model发生变化后view也会发生变化。<br><strong>Angular特点：</strong></p>
<ul>
<li><strong>数据的双向绑定</strong>——这可能是其最激动人心的特性吧，view层的数据和model层的数据是双向绑定的，其中之一发生更改，另一方会随之变化，这不用你写任何代码！</li>
<li><strong>代码模块化</strong>——每个模块的代码独立拥有自己的作用域，model，controller等。</li>
<li><strong>依赖注入</strong>——将这种后端语言的设计模式赋予前端代码，这意味着前端的代码可以提高重用性和灵活性，未来的模式可能将大量操作放在客户端，服务端只提供数据来源和其他客户端无法完成的操作；</li>
<li><strong>测试驱动开发</strong>——angularjs一开始就以此为目标，使用angular开发的应用可以很容易地进行单元测试和端对端测试，这解决了传统的js代码难以测试和维护的缺陷<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ul>
<li><strong>Node.js</strong><br><a href="https://nodejs.org/zh-cn/">官网</a><img data-src="https://img-blog.csdnimg.cn/20200909145958723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="node.js官网"><br>安装完成后在<strong>终端</strong>中输入<strong>node -v</strong>，返回<strong>版本号(例：v12.16.2)</strong> 即表示安装成功。</li>
<li><strong>npm包管理器</strong><br>Angular、Angular CLI 以及 Angular 应用都要依赖 npm 包来实现很多特性和功能。<strong>npm会随着node的安装而一起安装</strong>，在<strong>终端</strong>中输入<strong>npm -v</strong>返回<strong>版本号(6.14.4)</strong></li>
<li><strong>cnpm国内淘宝镜像(可选)</strong><br>终端输入：npm  install -g  cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></li>
<li><strong>Angular CLI（angular脚手架）</strong><br>终端输入：npm  install  -g  @angular/cli  或<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cnpm  install  -g  @angular/cli  （推荐使用cnpm）<br>验证安装是否成功：ng  v（出现以下即成功）<img data-src="https://img-blog.csdnimg.cn/20200909151606264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmdvb2RsdWNrNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="cli安装成功"></li>
<li><strong>编辑工具</strong><br>选择自己习惯的就好，个人比较喜欢<a href="https://code.visualstudio.com/">VS Code</a>，原因有几点：</li>
</ul>
</li>
</ul>
<p><strong>界面现代化，主题多样，可定制性高</strong><br>VSCode 不但可以换主题还可以换图标包，甚至自定义界面的 CSS 和 js。<br><strong>免费</strong><br>你看 MDN 以及很多前端教程都推荐使用 VSCode，一方面也降低了学习难度不是。扩展生态强大。我仍然记得我第一次使用 gitlens 的惊艳，居然每一行代码都给我标出来了是最近一次是谁修改的，什么时候修改的，简直是甩锅利器。虽然我前面说了有相当一部分VSCode 的插件质量确实不行，但是优秀实用有趣的插件也不少。<br><strong>开源而且官方维护积极</strong><br>因为是个开源项目，不但可以通过其本身的代码设计学到很多东西，还可以清楚的看到当前的开发进度，每次更新都能给我惊喜。</p>
]]></content>
      <categories>
        <category>Angular2</category>
      </categories>
      <tags>
        <tag>Angular2</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
</search>
